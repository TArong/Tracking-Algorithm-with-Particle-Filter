//FRAME Size
`define FRAME_WIDTH 12'd640
`define FRAME_HEIGHT 12'd480


//Address Number in # Memory Elements
`define ADDRNUMin1ELEMENT 7'd10
`define ADDRNUMin2ELEMENT 7'd20
`define ADDRNUMin3ELEMENT 7'd30
`define ADDRNUMin4ELEMENT 7'd40
`define ADDRNUMin5ELEMENT 7'd50
`define ADDRNUMin6ELEMENT 7'd60
`define ADDRNUMin7ELEMENT 7'd70
`define ADDRNUMin8ELEMENT 7'd80



//modes
`define IDLE                                          6'd0
`define ACCUMULATION_CANDIDATE_HISTOGRAM              6'd1
`define ACCUMULATION_TARGET_HISTOGRAM                 6'd2
`define COMPUTE_DISTANCE                              6'd3
`define SAVE_LOAD_FROM_DMA                            6'd4
`define ACCUMULATION_CANDIDATE_BACKGROUND_HISTOGRAM   6'd5
`define ACCUMULATION_TARGET_BACKGROUND_HISTOGRAM      6'd6
`define CONNECT_COMPONENT_ANALYSIS                    6'd7
`define SEGMENTATION_MODE                             6'd8
`define OBJECT_INFO_RSPE                              6'd9

/*********************************************/
//    CONNECT COMPONENT ANALYSIS STATE
/*********************************************/
`define CCA_IDLE                                      2'd0
`define CCA_WRITE_I                                   2'd1
`define CCA_WRITE_D                                   2'd2
`define CCA_OPER                                      2'd3


//states & paramters of each mode
/*********************************************/
//   Segmentation STATE & parameters
/*********************************************/
`define SEGSTATE_REST            4'd0
`define SEGSTATE_INPUT_BM_Y      4'd1
`define SEGSTATE_INPUT_BM_U      4'd2
`define SEGSTATE_INPUT_BM_V      4'd3
`define SEGSTATE_INPUT_BM_W      4'd4
`define SEGSTATE_INPUT_CUR_Y     4'd5
`define SEGSTATE_INPUT_CUR_U     4'd6
`define SEGSTATE_INPUT_CUR_V     4'd7
`define SEGSTATE_PROCESSING      4'd8
`define SEGSTATE_OUTPUT_BM_Y     4'd9
`define SEGSTATE_OUTPUT_BM_U     4'd10
`define SEGSTATE_OUTPUT_BM_V     4'd11
`define SEGSTATE_OUTPUT_BM_W     4'd12
`define SEGSTATE_OUTPUT_MASK     4'd13

`define BM_ADDR_NUM              7'd80
`define CUR_ADDR_NUM             5'd20
`define MASK_ADDR_NUM            4'd10

`define LINEQUARTER1             12'd160
`define LINEQUARTER2             12'd320
`define LINEQUARTER3             12'd480
`define LINEQUARTER4             12'd640

`define PIXELNUMin1ELEMENT_BM      12'd20
`define PIXELNUMin2ELEMENT_BM      12'd40
`define PIXELNUMin3ELEMENT_BM      12'd60
`define PIXELNUMin4ELEMENT_BM      12'd80
`define PIXELNUMin5ELEMENT_BM      12'd100
`define PIXELNUMin6ELEMENT_BM      12'd120
`define PIXELNUMin7ELEMENT_BM      12'd140
`define PIXELNUMin8ELEMENT_BM      12'd160

`define PIXELNUMin1ELEMENT_CUR     12'd80
`define PIXELNUMin2ELEMENT_CUR     12'd160

`define PIXELNUMin1ELEMENT_MASK     12'd640


/*********************************************/
//    HISTOGRAM ACCUMULATION BUFFER STATE
/*********************************************/
`define BUFFER_IDLE                                   3'd0
`define BUFFER_COMPUTE_CORDIC                         3'd1
`define BUFFER_WRITE_BUFFER                           3'd2
`define BUFFER_WAIT                                   3'd3
`define BUFFER_OPER                                   3'd4
`define BUFFER_COUNT_BU                               3'd5
`define BUFFER_CLEAN                                  3'd6

`define WRITE_Y_BUFFER			                        3'd1
`define WRITE_U_BUFFER			                        3'd2
`define WRITE_V_BUFFER			                        3'd3
`define WRITE_MASK_BUFFER			                     3'd4




module SISP (
                clk,
                reset,
                
                seg_enable_i, 
                seg_stall,                
                Seg_DataIn_i,
                Seg_DataInReady_i,
                Seg_DataOut_o,
                Seg_DataOutReady_o,
                
                //From Arong
                color_0_in, 
                color_1_in, 
                color_2_in, 
                color_3_in, 
                color_4_in, 
                color_5_in, 
                color_6_in, 
                color_7_in,  // 8 pixel data in
                write_which_in,  // Write which color into the buffer 1:Y  2:U  3:V  4:Mask  
                compute_bu_in,   // 0: wait  1: write buffer (cordic)  2: Compute  eg:Wait->wait CORDIC and write buffer->Wait->Compute
                start_position_x_in, start_position_y_in, width_in, height_in,  //position and size for histogram accumulation position count
                accumulate_how_many_in,  //how many data input once (2, 4, 6, 8)
                centerx_in, centery_in,  //particle center coordinate (for cordic)
                background_weight_0_in,  
                background_weight_1_in, 
                background_weight_2_in, 
                background_weight_3_in, 
                background_weight_4_in, 
                background_weight_5_in, 
                background_weight_6_in, 
                background_weight_7_in, //input background weights for background histogram accumulation
                
                diag, //particle 對角線長度 (INPUT)
                distanceY, distanceU, distanceV, // OUTPUT DISTANCE
                done, 
                controller_enable,  
                iteration_times, //for distance computation
                total_target_histogram_y, total_target_histogram_u, total_target_histogram_v, //for distance computation
                use_background_color_or_not, background_weight_threshold_in, background_binvalue_threshold_in, //for background histogram removal
                histogram_accumulation_done,
                reset_register, reset_buffer, 
                CCA_stop, CCA_D_in, CCA_I_in, //for Connected component labeling   D: data (只用7bits 但外面還是接8bit)  I: segmentation結果 (1 bit)
                Address_from_DMA, Data_from_DMA, Data_to_DMA, WEAN_from_DMA, choose_reg_from_DMA, MUXA_from_DMA,  //(可以在外部控制)
                
                //From context Register
                Mode_i,
                
                //From Archerjwk
                BDthY_default_i, BDthU_default_i, BDthV_default_i,  Bth_default_i, BckGndBuildTH_default_i,
                box1xmax_i,  box1ymax_i,  box1xmin_i,  box1ymin_i,  BDthY_box1_i,  BDthU_box1_i,  BDthV_box1_i,   update_box1_i,   Bth_box1_i,  BckGndBuildTH_box1_i,
                box2xmax_i,  box2ymax_i,  box2xmin_i,  box2ymin_i,  BDthY_box2_i,  BDthU_box2_i,  BDthV_box2_i,   update_box2_i,   Bth_box2_i,  BckGndBuildTH_box2_i,
                box3xmax_i,  box3ymax_i,  box3xmin_i,  box3ymin_i,  BDthY_box3_i,  BDthU_box3_i,  BDthV_box3_i,   update_box3_i,   Bth_box3_i,  BckGndBuildTH_box3_i,
                box4xmax_i,  box4ymax_i,  box4xmin_i,  box4ymin_i,  BDthY_box4_i,  BDthU_box4_i,  BDthV_box4_i,   update_box4_i,   Bth_box4_i,  BckGndBuildTH_box4_i,
                box5xmax_i,  box5ymax_i,  box5xmin_i,  box5ymin_i,  BDthY_box5_i,  BDthU_box5_i,  BDthV_box5_i,   update_box5_i,   Bth_box5_i,  BckGndBuildTH_box5_i,
                box6xmax_i,  box6ymax_i,  box6xmin_i,  box6ymin_i,  BDthY_box6_i,  BDthU_box6_i,  BDthV_box6_i,   update_box6_i,   Bth_box6_i,  BckGndBuildTH_box6_i,
                box7xmax_i,  box7ymax_i,  box7xmin_i,  box7ymin_i,  BDthY_box7_i,  BDthU_box7_i,  BDthV_box7_i,   update_box7_i,   Bth_box7_i,  BckGndBuildTH_box7_i,
                box8xmax_i,  box8ymax_i,  box8xmin_i,  box8ymin_i,  BDthY_box8_i,  BDthU_box8_i,  BDthV_box8_i,   update_box8_i,   Bth_box8_i,  BckGndBuildTH_box8_i,
                box9xmax_i,  box9ymax_i,  box9xmin_i,  box9ymin_i,  BDthY_box9_i,  BDthU_box9_i,  BDthV_box9_i,   update_box9_i,   Bth_box9_i,  BckGndBuildTH_box9_i,
                box10xmax_i, box10ymax_i, box10xmin_i, box10ymin_i, BDthY_box10_i, BDthU_box10_i, BDthV_box10_i,  update_box10_i,  Bth_box10_i, BckGndBuildTH_box10_i,
                
                
                //object info RSPE
                OI_Data_64bit, //input data
                o0_label, o1_label, o2_label, o3_label, o4_label, o5_label, o6_label, o7_label, o8_label, o9_label, //10 objects' label
                o0_x_min, o0_x_max, o1_x_min, o1_x_max, o2_x_min, o2_x_max, o3_x_min, o3_x_max, o4_x_min, o4_x_max, o5_x_min, o5_x_max, o6_x_min, o6_x_max,
                o7_x_min, o7_x_max, o8_x_min, o8_x_max, o9_x_min, o9_x_max, o0_y_min, o0_y_max, o1_y_min, o1_y_max, o2_y_min, o2_y_max, o3_y_min, o3_y_max,
                o4_y_min, o4_y_max, o5_y_min, o5_y_max, o6_y_min, o6_y_max, o7_y_min, o7_y_max, o8_y_min, o8_y_max, o9_y_min, o9_y_max,  // output
                
                
                total_candidate_histogram_Y_out, total_target_histogram_Y_out,
                total_candidate_histogram_U_out, total_target_histogram_U_out,
                total_candidate_histogram_V_out, total_target_histogram_V_out,   //total histogram out
                
                mask_in, //input mask
                mask_on_or_not, //1:在累積histogram時考慮segmentation
                MASK_input_stop, //寫完buffer 把module停下來
                
                //把cca的結果放進context register裡
                CCA_1_out, CCA_2_out, //cca的結果
                CCL_write_time        //三個cycles寫兩筆
                
                
                
                
                
                
                                
                );
                
input clk;                     
input reset;                                    
input seg_enable_i;            
input seg_stall; 
input mask_on_or_not;
input MASK_input_stop;


input [63:0] Seg_DataIn_i;
input Seg_DataInReady_i;
output[63:0] Seg_DataOut_o;
output Seg_DataOutReady_o;  

/*************************************************************/
//              from Context Register
/*************************************************************/
input [5:0] Mode_i;
input [11:0] box1xmax_i; 
input [11:0] box2xmax_i; 
input [11:0] box3xmax_i; 
input [11:0] box4xmax_i; 
input [11:0] box5xmax_i; 
input [11:0] box6xmax_i; 
input [11:0] box7xmax_i; 
input [11:0] box8xmax_i; 
input [11:0] box9xmax_i; 
input [11:0] box10xmax_i;

input [11:0] box1ymax_i; 
input [11:0] box2ymax_i; 
input [11:0] box3ymax_i; 
input [11:0] box4ymax_i; 
input [11:0] box5ymax_i; 
input [11:0] box6ymax_i; 
input [11:0] box7ymax_i; 
input [11:0] box8ymax_i; 
input [11:0] box9ymax_i; 
input [11:0] box10ymax_i;

input [11:0] box1xmin_i; 
input [11:0] box2xmin_i; 
input [11:0] box3xmin_i; 
input [11:0] box4xmin_i; 
input [11:0] box5xmin_i; 
input [11:0] box6xmin_i; 
input [11:0] box7xmin_i; 
input [11:0] box8xmin_i; 
input [11:0] box9xmin_i; 
input [11:0] box10xmin_i;

input [11:0] box1ymin_i; 
input [11:0] box2ymin_i; 
input [11:0] box3ymin_i; 
input [11:0] box4ymin_i; 
input [11:0] box5ymin_i; 
input [11:0] box6ymin_i; 
input [11:0] box7ymin_i; 
input [11:0] box8ymin_i; 
input [11:0] box9ymin_i; 
input [11:0] box10ymin_i;

input [7:0] BDthY_default_i;
input [7:0] BDthY_box1_i; 
input [7:0] BDthY_box2_i; 
input [7:0] BDthY_box3_i; 
input [7:0] BDthY_box4_i; 
input [7:0] BDthY_box5_i; 
input [7:0] BDthY_box6_i; 
input [7:0] BDthY_box7_i; 
input [7:0] BDthY_box8_i; 
input [7:0] BDthY_box9_i; 
input [7:0] BDthY_box10_i;

input [7:0] BDthU_default_i; 
input [7:0] BDthU_box1_i; 
input [7:0] BDthU_box2_i; 
input [7:0] BDthU_box3_i; 
input [7:0] BDthU_box4_i; 
input [7:0] BDthU_box5_i; 
input [7:0] BDthU_box6_i; 
input [7:0] BDthU_box7_i; 
input [7:0] BDthU_box8_i; 
input [7:0] BDthU_box9_i; 
input [7:0] BDthU_box10_i;

input [7:0] BDthV_default_i;        
input [7:0] BDthV_box1_i;      
input [7:0] BDthV_box2_i;      
input [7:0] BDthV_box3_i;      
input [7:0] BDthV_box4_i;      
input [7:0] BDthV_box5_i;      
input [7:0] BDthV_box6_i;      
input [7:0] BDthV_box7_i;      
input [7:0] BDthV_box8_i;      
input [7:0] BDthV_box9_i;      
input [7:0] BDthV_box10_i;     

input update_box1_i; 
input update_box2_i; 
input update_box3_i; 
input update_box4_i; 
input update_box5_i; 
input update_box6_i; 
input update_box7_i; 
input update_box8_i; 
input update_box9_i; 
input update_box10_i;

input [7:0] Bth_default_i;
input [7:0] Bth_box1_i; 
input [7:0] Bth_box2_i; 
input [7:0] Bth_box3_i; 
input [7:0] Bth_box4_i; 
input [7:0] Bth_box5_i; 
input [7:0] Bth_box6_i; 
input [7:0] Bth_box7_i; 
input [7:0] Bth_box8_i; 
input [7:0] Bth_box9_i; 
input [7:0] Bth_box10_i;

          
input [7:0] BckGndBuildTH_default_i;
input [7:0] BckGndBuildTH_box1_i; 
input [7:0] BckGndBuildTH_box2_i; 
input [7:0] BckGndBuildTH_box3_i; 
input [7:0] BckGndBuildTH_box4_i; 
input [7:0] BckGndBuildTH_box5_i; 
input [7:0] BckGndBuildTH_box6_i; 
input [7:0] BckGndBuildTH_box7_i; 
input [7:0] BckGndBuildTH_box8_i; 
input [7:0] BckGndBuildTH_box9_i; 
input [7:0] BckGndBuildTH_box10_i ;

input    [7:0]    color_0_in;
input    [7:0]    color_1_in;
input    [7:0]    color_2_in;
input    [7:0]    color_3_in;
input    [7:0]    color_4_in;
input    [7:0]    color_5_in;
input    [7:0]    color_6_in;
input    [7:0]    color_7_in;
input    [2:0]    write_which_in;
input    [1:0]    compute_bu_in;
input    [9:0]    start_position_x_in, width_in;
input    [8:0]    start_position_y_in, height_in;
input    [3:0]    accumulate_how_many_in;

input    [7:0]    background_weight_0_in; 
input    [7:0]    background_weight_1_in; 
input    [7:0]    background_weight_2_in; 
input    [7:0]    background_weight_3_in; 
input    [7:0]    background_weight_4_in; 
input    [7:0]    background_weight_5_in; 
input    [7:0]    background_weight_6_in; 
input    [7:0]    background_weight_7_in;
input    [63:0]   mask_in;
input    [31:0]   diag;

input    [9:0]    centerx_in;
input    [8:0]    centery_in;
//input    [3:0]    cmd;
input             controller_enable;
input    [2:0]    iteration_times;
input    [19:0]   total_target_histogram_y;
input    [19:0]   total_target_histogram_u;
input    [19:0]   total_target_histogram_v;
//input             buffer_input_stop;
input             use_background_color_or_not;
input    [7:0]    background_weight_threshold_in;
input    [15:0]   background_binvalue_threshold_in;
input             reset_register;
input             reset_buffer;
input             CCA_stop; 
output   [6:0]    CCA_1_out, CCA_2_out;
input    [63:0]   CCA_D_in, CCA_I_in;
input    [3:0]    Address_from_DMA;
input    [63:0]   Data_from_DMA;
input             WEAN_from_DMA;
input    [47:0]   choose_reg_from_DMA;
input    [3:0]    MUXA_from_DMA;


input    [63:0]   OI_Data_64bit;
input    [7:0]    o0_label;
input    [7:0]    o1_label;
input    [7:0]    o2_label;
input    [7:0]    o3_label;
input    [7:0]    o4_label;
input    [7:0]    o5_label;
input    [7:0]    o6_label;
input    [7:0]    o7_label;
input    [7:0]    o8_label;
input    [7:0]    o9_label;

output   [9:0]    o0_x_min, o0_x_max;
output   [9:0]    o1_x_min, o1_x_max;
output   [9:0]    o2_x_min, o2_x_max;
output   [9:0]    o3_x_min, o3_x_max;
output   [9:0]    o4_x_min, o4_x_max;
output   [9:0]    o5_x_min, o5_x_max;
output   [9:0]    o6_x_min, o6_x_max;
output   [9:0]    o7_x_min, o7_x_max;
output   [9:0]    o8_x_min, o8_x_max;
output   [9:0]    o9_x_min, o9_x_max;

output   [8:0]    o0_y_min, o0_y_max;
output   [8:0]    o1_y_min, o1_y_max;
output   [8:0]    o2_y_min, o2_y_max;
output   [8:0]    o3_y_min, o3_y_max;
output   [8:0]    o4_y_min, o4_y_max;
output   [8:0]    o5_y_min, o5_y_max;
output   [8:0]    o6_y_min, o6_y_max;
output   [8:0]    o7_y_min, o7_y_max;
output   [8:0]    o8_y_min, o8_y_max;
output   [8:0]    o9_y_min, o9_y_max;


output   [63:0]   Data_to_DMA;

output   [63:0]   distanceY;
output   [63:0]   distanceU;
output   [63:0]   distanceV;
output            done;
output            histogram_accumulation_done;

output   [19:0]   total_candidate_histogram_Y_out, total_target_histogram_Y_out;
output   [19:0]   total_candidate_histogram_U_out, total_target_histogram_U_out;
output   [19:0]   total_candidate_histogram_V_out, total_target_histogram_V_out;

output            CCL_write_time;


   
   
/*************************************************************/ 
//                            IN OUTPUT Stage                             
/*************************************************************/ 
wire [63:0] Seg_DataIn_ws;
wire [63:0] Seg_DataOut_w;
wire [63:0] Seg_DataOut_ws;
reg [63:0] Seg_DataOut_r;
reg [63:0] Seg_DataIn_r ;


wire Seg_DataInReady_ws  ;
wire Seg_DataOutReady_ws ;
wire Seg_DataOutReady_w  ;
reg Seg_DataOutReady_r ;  
reg Seg_DataInReady_r  ;  






/*************************************************************/   
//                distance  computation  
/*************************************************************/   


wire     [63:0]   distanceY_w;
wire     [63:0]   distanceU_w;
wire     [63:0]   distanceV_w;
   
   
/*************************************************************/   
//                            PAZEN   
/*************************************************************/   
wire              pazen_enable;
reg               pazen_enable_r;
wire              distance_compute_enable;

wire     [15:0]   data_read_A_Y_pazen;  
wire     [15:0]   data_read_B_Y_pazen;  
wire     [15:0]   data_read_A_U_pazen;  
wire     [15:0]   data_read_B_U_pazen;  
wire     [15:0]   data_read_A_V_pazen;  
wire     [15:0]   data_read_B_V_pazen;  
wire     [15:0]   data_write_A_Y_pazen; 
wire     [15:0]   data_write_B_Y_pazen; 
wire     [15:0]   data_write_A_U_pazen; 
wire     [15:0]   data_write_B_U_pazen; 
wire     [15:0]   data_write_A_V_pazen; 
wire     [15:0]   data_write_B_V_pazen; 
wire     [15:0]   data_read_A_Y_pazen_bg;
wire     [15:0]   data_read_B_Y_pazen_bg;
wire     [15:0]   data_read_A_U_pazen_bg;
wire     [15:0]   data_read_B_U_pazen_bg;
wire     [15:0]   data_read_A_V_pazen_bg;
wire     [15:0]   data_read_B_V_pazen_bg;

wire     [9:0]    positionx_0_w; 
wire     [8:0]    positiony_0_w; 
wire     [9:0]    positionx_1_w; 
wire     [8:0]    positiony_1_w; 
wire     [9:0]    positionx_2_w; 
wire     [8:0]    positiony_2_w; 
wire     [9:0]    positionx_3_w; 
wire     [8:0]    positiony_3_w; 
wire     [9:0]    positionx_4_w; 
wire     [8:0]    positiony_4_w; 
wire     [9:0]    positionx_5_w; 
wire     [8:0]    positiony_5_w; 
wire     [9:0]    positionx_6_w; 
wire     [8:0]    positiony_6_w; 
wire     [9:0]    positionx_7_w; 
wire     [8:0]    positiony_7_w; 

wire              wea_Y_pazen;   
wire              web_Y_pazen;   
wire              wea_U_pazen;   
wire              web_U_pazen;   
wire              wea_V_pazen;   
wire              web_V_pazen;   
wire              csa_Y_pazen;   
wire              csb_Y_pazen;   
wire              csa_U_pazen;   
wire              csb_U_pazen;   
wire              csa_V_pazen;   
wire              csb_V_pazen;   
wire              oea_Y_pazen;   
wire              oeb_Y_pazen;   
wire              oea_U_pazen;   
wire              oeb_U_pazen;   
wire              oea_V_pazen;   
wire              oeb_V_pazen;   

wire     [19:0]   total_histogram_pazen_y_w;
wire     [19:0]   total_histogram_pazen_u_w;
wire     [19:0]   total_histogram_pazen_v_w;
wire     [9:0]    differencex1_out_pazen;
wire     [9:0]    differencex2_out_pazen;
wire     [8:0]    differencey1_out_pazen;
wire     [8:0]    differencey2_out_pazen;
//wire              histogram_accumulation_state_r == BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == BUFFER_WRITE_BUFFER;

wire     [7:0]    y1_pazen;
wire     [7:0]    y2_pazen;
wire     [7:0]    u1_pazen;
wire     [7:0]    u2_pazen;
wire     [7:0]    v1_pazen;
wire     [7:0]    v2_pazen;



/*************************************************************/
//                CONNECT COMPONENT ANALYSIS
/*************************************************************/
                  
   wire     [15:0]   ALU_nobuffer_0_data_out_w;
   wire     [15:0]   ALU_nobuffer_1_data_out_w;
   wire     [15:0]   ALU_nobuffer_2_data_out_w;
   wire     [15:0]   ALU_nobuffer_3_data_out_w;
   wire              ALU_enable;
   wire              CCA_enable;
            
   wire     [15:0]   Dtemp_0_w;
   wire     [6:0]    PE_temp_0_w;
   wire     [15:0]   temp_out_0_w;
   wire     [15:0]   Dtemp_1_w;
   wire     [6:0]    PE_temp_1_w;
   wire     [15:0]   temp_out_1_w;
            
   wire     [6:0]    Dout_0_out_w, Dout_0_out, Dout_1_out;
   
   wire              Iup_0_in, Ileft_0_in, Iup_1_in, Imid_0_in, Imid_1_in;
   wire     [6:0]    Dup_0_in, Dleft_0_in, Dup_1_in, Dmid_0_in, Dmid_1_in;
            
   wire     [63:0]   CCA_I_DOA_up_w, CCA_I_DOA_w;
   wire     [6:0]    CCA_1_out_w, CCA_2_out_w;
            
   wire     [63:0]   CCA_I_DOA_0_w;
   wire     [63:0]   CCA_I_DOA_1_w;
   wire     [63:0]   CCA_D_DOA_00_w;
   wire     [63:0]   CCA_D_DOA_01_w;
   wire     [63:0]   CCA_D_DOA_02_w;
   wire     [63:0]   CCA_D_DOA_03_w;
   wire     [63:0]   CCA_D_DOA_04_w;
   wire     [63:0]   CCA_D_DOA_05_w;
   wire     [63:0]   CCA_D_DOA_06_w;
   wire     [63:0]   CCA_D_DOA_07_w;
   wire     [63:0]   CCA_D_DOA_08_w;
   wire     [63:0]   CCA_D_DOA_09_w;
   wire     [63:0]   CCA_D_DOA_10_w;
   wire     [63:0]   CCA_D_DOA_11_w;
   wire     [63:0]   CCA_D_DOA_12_w;
   wire     [63:0]   CCA_D_DOA_13_w;
   wire     [63:0]   CCA_D_DOA_14_w;
   wire     [63:0]   CCA_D_DOA_15_w;
   wire     [63:0]   CCA_D_DOA_16_w;
   wire     [63:0]   CCA_D_DOA_17_w;
   wire     [63:0]   CCA_D_DOA_18_w;
   wire     [63:0]   CCA_D_DOA_19_w;
            
   wire     [63:0]   CCA_I_DIA_0_w;
   wire     [63:0]   CCA_I_DIA_1_w;
   wire     [63:0]   CCA_D_DIA_00_w;
   wire     [63:0]   CCA_D_DIA_01_w;
   wire     [63:0]   CCA_D_DIA_02_w;
   wire     [63:0]   CCA_D_DIA_03_w;
   wire     [63:0]   CCA_D_DIA_04_w;
   wire     [63:0]   CCA_D_DIA_05_w;
   wire     [63:0]   CCA_D_DIA_06_w;
   wire     [63:0]   CCA_D_DIA_07_w;
   wire     [63:0]   CCA_D_DIA_08_w;
   wire     [63:0]   CCA_D_DIA_09_w;
   wire     [63:0]   CCA_D_DIA_10_w;
   wire     [63:0]   CCA_D_DIA_11_w;
   wire     [63:0]   CCA_D_DIA_12_w;
   wire     [63:0]   CCA_D_DIA_13_w;
   wire     [63:0]   CCA_D_DIA_14_w;
   wire     [63:0]   CCA_D_DIA_15_w;
   wire     [63:0]   CCA_D_DIA_16_w;
   wire     [63:0]   CCA_D_DIA_17_w;
   wire     [63:0]   CCA_D_DIA_18_w;
   wire     [63:0]   CCA_D_DIA_19_w;
            
   
   wire     [3:0]    CCA_D_A_w;
   wire     [3:0]    CCA_I_A_w;
            
            
   wire     [1:0]    CCA_compute_count_w;
            
   wire              CCA_I_LEFT_w;
   wire     [6:0]    CCA_D_LEFT_w;
   wire     [5:0]    CCA_index_I_0_w;
   wire     [5:0]    CCA_index_I_1_w;
   wire     [63:0]   CCA_D_DIA_w;
   wire     [3:0]    DIA_D_MUX_w;      
          
/*************************************************************/   
//                            CORDIC  
/*************************************************************/   
   
wire     [31:0]   xn_cordic_0_out, yn_cordic_0_out, zn_cordic_0_out;
wire     [31:0]   xn_cordic_1_out, yn_cordic_1_out, zn_cordic_1_out;
wire     [31:0]   xn_cordic_2_out, yn_cordic_2_out, zn_cordic_2_out;
wire     [31:0]   xn_cordic_3_out, yn_cordic_3_out, zn_cordic_3_out;
wire     [31:0]   xn_cordic_4_out, yn_cordic_4_out, zn_cordic_4_out;
wire     [31:0]   xn_cordic_5_out, yn_cordic_5_out, zn_cordic_5_out;
wire     [31:0]   xn_cordic_6_out, yn_cordic_6_out, zn_cordic_6_out;
wire     [31:0]   xn_cordic_7_out, yn_cordic_7_out, zn_cordic_7_out;

wire     [9:0]    differencex0_w;     
wire     [9:0]    differencex1_w;     
wire     [9:0]    differencex2_w;     
wire     [9:0]    differencex3_w;     
wire     [9:0]    differencex4_w;     
wire     [9:0]    differencex5_w;     
wire     [9:0]    differencex6_w;     
wire     [9:0]    differencex7_w;     
wire     [8:0]    differencey0_w;     
wire     [8:0]    differencey1_w;     
wire     [8:0]    differencey2_w;     
wire     [8:0]    differencey3_w;     
wire     [8:0]    differencey4_w;     
wire     [8:0]    differencey5_w;     
wire     [8:0]    differencey6_w;     
wire     [8:0]    differencey7_w;     

wire     [7:0]    normalize_difference0_w;     
wire     [7:0]    normalize_difference1_w;     
wire     [7:0]    normalize_difference2_w;     
wire     [7:0]    normalize_difference3_w;     
wire     [7:0]    normalize_difference4_w;     
wire     [7:0]    normalize_difference5_w;     
wire     [7:0]    normalize_difference6_w;     
wire     [7:0]    normalize_difference7_w;      

/*************************************************************/   
//                 OBJECT INFO RSPE
/*************************************************************/    

   
   wire             OI_start;
   wire             ObjectInfoRSPE_en;
   wire    [63:0]   OI_Data_64bit;
   wire    [7:0]    o0_label;
   wire    [7:0]    o1_label;
   wire    [7:0]    o2_label;
   wire    [7:0]    o3_label;
   wire    [7:0]    o4_label;
   wire    [7:0]    o5_label;
   wire    [7:0]    o6_label;
   wire    [7:0]    o7_label;
   wire    [7:0]    o8_label;
   wire    [7:0]    o9_label;
   wire    [9:0]    o0_x_min, o0_x_max;
   wire    [9:0]    o1_x_min, o1_x_max;
   wire    [9:0]    o2_x_min, o2_x_max;
   wire    [9:0]    o3_x_min, o3_x_max;
   wire    [9:0]    o4_x_min, o4_x_max;
   wire    [9:0]    o5_x_min, o5_x_max;
   wire    [9:0]    o6_x_min, o6_x_max;
   wire    [9:0]    o7_x_min, o7_x_max;
   wire    [9:0]    o8_x_min, o8_x_max;
   wire    [9:0]    o9_x_min, o9_x_max;
   wire    [8:0]    o0_y_min, o0_y_max;
   wire    [8:0]    o1_y_min, o1_y_max;
   wire    [8:0]    o2_y_min, o2_y_max;
   wire    [8:0]    o3_y_min, o3_y_max;
   wire    [8:0]    o4_y_min, o4_y_max;
   wire    [8:0]    o5_y_min, o5_y_max;
   wire    [8:0]    o6_y_min, o6_y_max;
   wire    [8:0]    o7_y_min, o7_y_max;
   wire    [8:0]    o8_y_min, o8_y_max;
   wire    [8:0]    o9_y_min, o9_y_max;

   
   
   
   
/*************************************************************/   
//                 PAZEN_MEMORY_CONTROL
/*************************************************************/     
wire     [3:0]    A_memory_control_Y_w;          
wire     [3:0]    B_memory_control_Y_w;   
wire     [3:0]    A_memory_control_Y_bg_w;          
wire     [3:0]    B_memory_control_Y_bg_w;          
wire     [63:0]   DOA00_memory_control_Y_w;        
wire     [63:0]   DOB00_memory_control_Y_w;        
wire     [63:0]   DOA01_memory_control_Y_w;        
wire     [63:0]   DOB01_memory_control_Y_w;        
wire     [63:0]   DOA02_memory_control_Y_w;        
wire     [63:0]   DOB02_memory_control_Y_w;        
wire     [63:0]   DOA03_memory_control_Y_w;        
wire     [63:0]   DOB03_memory_control_Y_w;        
wire     [63:0]   DOA04_memory_control_Y_w;        
wire     [63:0]   DOB04_memory_control_Y_w;        
wire     [63:0]   DOA05_memory_control_Y_w;        
wire     [63:0]   DOB05_memory_control_Y_w;        
wire     [63:0]   DOA06_memory_control_Y_w;        
wire     [63:0]   DOB06_memory_control_Y_w;  
wire     [63:0]   DOA07_memory_control_Y_w;  
wire     [63:0]   DOB07_memory_control_Y_w;
wire     [63:0]   DOA08_memory_control_Y_w;
wire     [63:0]   DOB08_memory_control_Y_w;
wire     [63:0]   DOA09_memory_control_Y_w;
wire     [63:0]   DOB09_memory_control_Y_w;
wire     [63:0]   DOA10_memory_control_Y_w;
wire     [63:0]   DOB10_memory_control_Y_w;
wire     [63:0]   DOA11_memory_control_Y_w;
wire     [63:0]   DOB11_memory_control_Y_w;
wire     [63:0]   DOA12_memory_control_Y_w;
wire     [63:0]   DOB12_memory_control_Y_w;
wire     [63:0]   DOA13_memory_control_Y_w;
wire     [63:0]   DOB13_memory_control_Y_w;
      
wire     [63:0]   DIA_T_memory_control_Y_w;        
wire     [63:0]   DIB_T_memory_control_Y_w;        
wire     [6:0]    choose_reg_A_memory_control_Y_w; 
wire     [6:0]    choose_reg_B_memory_control_Y_w; 
wire     [3:0]    MUXA_memory_control_Y;             
wire     [3:0]    MUXB_memory_control_Y;             
                     
wire     [3:0]    A_memory_control_U_w;          
wire     [3:0]    B_memory_control_U_w; 
wire     [3:0]    A_memory_control_U_bg_w;          
wire     [3:0]    B_memory_control_U_bg_w;            
wire     [63:0]   DOA00_memory_control_U_w;        
wire     [63:0]   DOB00_memory_control_U_w;        
wire     [63:0]   DOA01_memory_control_U_w;        
wire     [63:0]   DOB01_memory_control_U_w;        
wire     [63:0]   DOA02_memory_control_U_w;        
wire     [63:0]   DOB02_memory_control_U_w;        
wire     [63:0]   DOA03_memory_control_U_w;        
wire     [63:0]   DOB03_memory_control_U_w;        
wire     [63:0]   DOA04_memory_control_U_w;        
wire     [63:0]   DOB04_memory_control_U_w;        
wire     [63:0]   DOA05_memory_control_U_w;        
wire     [63:0]   DOB05_memory_control_U_w;        
wire     [63:0]   DOA06_memory_control_U_w;        
wire     [63:0]   DOB06_memory_control_U_w;  
wire     [63:0]   DOA07_memory_control_U_w;  
wire     [63:0]   DOB07_memory_control_U_w;
wire     [63:0]   DOA08_memory_control_U_w;
wire     [63:0]   DOB08_memory_control_U_w;
wire     [63:0]   DOA09_memory_control_U_w;
wire     [63:0]   DOB09_memory_control_U_w;
wire     [63:0]   DOA10_memory_control_U_w;
wire     [63:0]   DOB10_memory_control_U_w;
wire     [63:0]   DOA11_memory_control_U_w;
wire     [63:0]   DOB11_memory_control_U_w;
wire     [63:0]   DOA12_memory_control_U_w;
wire     [63:0]   DOB12_memory_control_U_w;
wire     [63:0]   DOA13_memory_control_U_w;
wire     [63:0]   DOB13_memory_control_U_w;       
wire     [63:0]   DIA_T_memory_control_U_w;        
wire     [63:0]   DIB_T_memory_control_U_w;        
wire     [6:0]    choose_reg_A_memory_control_U_w; 
wire     [6:0]    choose_reg_B_memory_control_U_w; 
wire     [3:0]    MUXA_memory_control_U;             
wire     [3:0]    MUXB_memory_control_U;             

wire     [3:0]    A_memory_control_V_w;          
wire     [3:0]    B_memory_control_V_w;
wire     [3:0]    A_memory_control_V_bg_w;          
wire     [3:0]    B_memory_control_V_bg_w;             
wire     [63:0]   DOA00_memory_control_V_w;        
wire     [63:0]   DOB00_memory_control_V_w;        
wire     [63:0]   DOA01_memory_control_V_w;        
wire     [63:0]   DOB01_memory_control_V_w;        
wire     [63:0]   DOA02_memory_control_V_w;        
wire     [63:0]   DOB02_memory_control_V_w;        
wire     [63:0]   DOA03_memory_control_V_w;        
wire     [63:0]   DOB03_memory_control_V_w;        
wire     [63:0]   DOA04_memory_control_V_w;        
wire     [63:0]   DOB04_memory_control_V_w;        
wire     [63:0]   DOA05_memory_control_V_w;        
wire     [63:0]   DOB05_memory_control_V_w;        
wire     [63:0]   DOA06_memory_control_V_w;        
wire     [63:0]   DOB06_memory_control_V_w;  
wire     [63:0]   DOA07_memory_control_V_w;  
wire     [63:0]   DOB07_memory_control_V_w;
wire     [63:0]   DOA08_memory_control_V_w;
wire     [63:0]   DOB08_memory_control_V_w;
wire     [63:0]   DOA09_memory_control_V_w;
wire     [63:0]   DOB09_memory_control_V_w;
wire     [63:0]   DOA10_memory_control_V_w;
wire     [63:0]   DOB10_memory_control_V_w;
wire     [63:0]   DOA11_memory_control_V_w;
wire     [63:0]   DOB11_memory_control_V_w;
wire     [63:0]   DOA12_memory_control_V_w;
wire     [63:0]   DOB12_memory_control_V_w;
wire     [63:0]   DOA13_memory_control_V_w;
wire     [63:0]   DOB13_memory_control_V_w;       
wire     [63:0]   DIA_T_memory_control_V_w;        
wire     [63:0]   DIB_T_memory_control_V_w;        
wire     [6:0]    choose_reg_A_memory_control_V_w; 
wire     [6:0]    choose_reg_B_memory_control_V_w; 
wire     [3:0]    MUXA_memory_control_V;    
wire     [3:0]    MUXB_memory_control_V;    
   
/*************************************************************/   
//                 REGISTER FILE
/*************************************************************/                 
   
wire     [63:0]   DOA00_w, DOB00_w;
wire     [63:0]   DOA01_w, DOB01_w;
wire     [63:0]   DOA02_w, DOB02_w;
wire     [63:0]   DOA03_w, DOB03_w;
wire     [63:0]   DOA04_w, DOB04_w;
wire     [63:0]   DOA05_w, DOB05_w;
wire     [63:0]   DOA06_w, DOB06_w;
wire     [63:0]   DOA07_w, DOB07_w;
wire     [63:0]   DOA08_w, DOB08_w;
wire     [63:0]   DOA09_w, DOB09_w;
wire     [63:0]   DOA10_w, DOB10_w;
wire     [63:0]   DOA11_w, DOB11_w;
wire     [63:0]   DOA12_w, DOB12_w;
wire     [63:0]   DOA13_w, DOB13_w;
wire     [63:0]   DOA14_w, DOB14_w;
wire     [63:0]   DOA15_w, DOB15_w;
wire     [63:0]   DOA16_w, DOB16_w;
wire     [63:0]   DOA17_w, DOB17_w;
wire     [63:0]   DOA18_w, DOB18_w;
wire     [63:0]   DOA19_w, DOB19_w;
wire     [63:0]   DOA20_w, DOB20_w;
wire     [63:0]   DOA21_w, DOB21_w;
wire     [63:0]   DOA22_w, DOB22_w;
wire     [63:0]   DOA23_w, DOB23_w;
wire     [63:0]   DOA24_w, DOB24_w;
wire     [63:0]   DOA25_w, DOB25_w;
wire     [63:0]   DOA26_w, DOB26_w;
wire     [63:0]   DOA27_w, DOB27_w;
wire     [63:0]   DOA28_w, DOB28_w;
wire     [63:0]   DOA29_w, DOB29_w;
wire     [63:0]   DOA30_w, DOB30_w;
wire     [63:0]   DOA31_w, DOB31_w;
wire     [63:0]   DOA32_w, DOB32_w;
wire     [63:0]   DOA33_w, DOB33_w;
wire     [63:0]   DOA34_w, DOB34_w;
wire     [63:0]   DOA35_w, DOB35_w;
wire     [63:0]   DOA36_w, DOB36_w;
wire     [63:0]   DOA37_w, DOB37_w;
wire     [63:0]   DOA38_w, DOB38_w;
wire     [63:0]   DOA39_w, DOB39_w;
wire     [63:0]   DOA40_w, DOB40_w;
wire     [63:0]   DOA41_w, DOB41_w;
wire     [63:0]   DOA42_w, DOB42_w;
wire     [63:0]   DOA43_w, DOB43_w;
wire     [63:0]   DOA44_w, DOB44_w;
wire     [63:0]   DOA45_w, DOB45_w;
wire     [63:0]   DOA46_w, DOB46_w;
wire     [63:0]   DOA47_w, DOB47_w;
   

   
/*************************************************************/   
//                 DISTANCE COMPUTE
/*************************************************************/     
   
   
   
wire     [19:0]   total_histogram_C_y_w, total_histogram_T_y_w;
wire     [19:0]   total_histogram_C_u_w, total_histogram_T_u_w;
wire     [19:0]   total_histogram_C_v_w, total_histogram_T_v_w;

wire     [63:0]   data_read_C_A_DC_Y; 
wire     [63:0]   data_read_C_B_DC_Y; 
//wire     [63:0]   data_write_C_A_DC_Y; 
wire     [63:0]   data_write_C_B_DC_Y; 
wire     [5:0]    A_C_out_DC_Y; 
wire     [5:0]    B_C_out_DC_Y; 
wire              WEAN_C_DC_Y; 
wire              WEBN_C_DC_Y; 
wire              CSA_C_DC_Y; 
wire              CSB_C_DC_Y; 
wire              OEA_C_DC_Y; 
wire              OEB_C_DC_Y;
wire     [63:0]   data_read_T_A_DC_Y; 
wire     [63:0]   data_read_T_B_DC_Y; 
wire              WEAN_T_DC_Y; 
wire              WEBN_T_DC_Y; 
wire              CSA_T_DC_Y; 
wire              CSB_T_DC_Y; 
wire              OEA_T_DC_Y; 
wire              OEB_T_DC_Y;
wire     [63:0]   distance_DC_Y; 
wire              done_DC_Y; 
wire     [3:0]    MUX_DC_Y;        





wire     [63:0]   data_read_C_A_DC_U; 
wire     [63:0]   data_read_C_B_DC_U; 
//wire     [63:0]   data_write_C_A_DC_U; 
wire     [63:0]   data_write_C_B_DC_U; 
wire     [5:0]    A_C_out_DC_U; 
wire     [5:0]    B_C_out_DC_U; 
wire              WEAN_C_DC_U; 
wire              WEBN_C_DC_U; 
wire              CSA_C_DC_U; 
wire              CSB_C_DC_U; 
wire              OEA_C_DC_U; 
wire              OEB_C_DC_U;
wire     [63:0]   data_read_T_A_DC_U; 
wire     [63:0]   data_read_T_B_DC_U; 
wire              WEAN_T_DC_U; 
wire              WEBN_T_DC_U; 
wire              CSA_T_DC_U; 
wire              CSB_T_DC_U; 
wire              OEA_T_DC_U; 
wire              OEB_T_DC_U;
wire     [63:0]   distance_DC_U;  
wire              done_DC_U; 
wire     [3:0]    MUX_DC_U;    

wire     [63:0]   data_read_C_A_DC_V; 
wire     [63:0]   data_read_C_B_DC_V; 
//wire     [63:0]   data_write_C_A_DC_V; 
wire     [63:0]   data_write_C_B_DC_V; 
wire     [5:0]    A_C_out_DC_V; 
wire     [5:0]    B_C_out_DC_V; 
wire              WEAN_C_DC_V; 
wire              WEBN_C_DC_V; 
wire              CSA_C_DC_V; 
wire              CSB_C_DC_V; 
wire              OEA_C_DC_V; 
wire              OEB_C_DC_V;
wire     [63:0]   data_read_T_A_DC_V; 
wire     [63:0]   data_read_T_B_DC_V; 
wire              WEAN_T_DC_V; 
wire              WEBN_T_DC_V; 
wire              CSA_T_DC_V; 
wire              CSB_T_DC_V; 
wire              OEA_T_DC_V; 
wire              OEB_T_DC_V;
wire     [63:0]   distance_DC_V;  
wire              done_DC_V; 
wire     [3:0]    MUX_DC_V;        
   
/*************************************************************/   
//           DISTANCE COMPUTE MEMORY CONTROL
/*************************************************************/  

wire     [3:0]    A_DMC_Y_C_w;
wire     [3:0]    B_DMC_Y_C_w; 


wire     [63:0]   DOA00_DMC_C_Y_w; 
wire     [63:0]   DOB00_DMC_C_Y_w; 
wire     [63:0]   DOA01_DMC_C_Y_w; 
wire     [63:0]   DOB01_DMC_C_Y_w; 
wire     [63:0]   DOA02_DMC_C_Y_w; 
wire     [63:0]   DOB02_DMC_C_Y_w; 
wire     [63:0]   DOA03_DMC_C_Y_w; 
wire     [63:0]   DOB03_DMC_C_Y_w; 
wire     [63:0]   DOA04_DMC_C_Y_w; 
wire     [63:0]   DOB04_DMC_C_Y_w; 
wire     [63:0]   DOA05_DMC_C_Y_w; 
wire     [63:0]   DOB05_DMC_C_Y_w; 
wire     [63:0]   DOA06_DMC_C_Y_w; 
wire     [63:0]   DOB06_DMC_C_Y_w;
wire     [6:0]    choose_reg_A_DMC_C_Y_w; 
wire     [6:0]    choose_reg_B_DMC_C_Y_w;



wire     [3:0]    A_DMC_Y_T_w;
wire     [3:0]    B_DMC_Y_T_w; 

wire     [63:0]   DOA00_DMC_T_Y_w; 
wire     [63:0]   DOB00_DMC_T_Y_w; 
wire     [63:0]   DOA01_DMC_T_Y_w; 
wire     [63:0]   DOB01_DMC_T_Y_w; 
wire     [63:0]   DOA02_DMC_T_Y_w; 
wire     [63:0]   DOB02_DMC_T_Y_w; 
wire     [63:0]   DOA03_DMC_T_Y_w; 
wire     [63:0]   DOB03_DMC_T_Y_w; 
wire     [63:0]   DOA04_DMC_T_Y_w; 
wire     [63:0]   DOB04_DMC_T_Y_w; 
wire     [63:0]   DOA05_DMC_T_Y_w; 
wire     [63:0]   DOB05_DMC_T_Y_w; 
wire     [63:0]   DOA06_DMC_T_Y_w; 
wire     [63:0]   DOB06_DMC_T_Y_w;
wire     [6:0]    choose_reg_A_DMC_T_Y_w; 
wire     [6:0]    choose_reg_B_DMC_T_Y_w;

 


wire     [3:0]    A_DMC_U_C_w;
wire     [3:0]    B_DMC_U_C_w; 

wire     [63:0]   DOA00_DMC_C_U_w; 
wire     [63:0]   DOB00_DMC_C_U_w; 
wire     [63:0]   DOA01_DMC_C_U_w; 
wire     [63:0]   DOB01_DMC_C_U_w; 
wire     [63:0]   DOA02_DMC_C_U_w; 
wire     [63:0]   DOB02_DMC_C_U_w; 
wire     [63:0]   DOA03_DMC_C_U_w; 
wire     [63:0]   DOB03_DMC_C_U_w; 
wire     [63:0]   DOA04_DMC_C_U_w; 
wire     [63:0]   DOB04_DMC_C_U_w; 
wire     [63:0]   DOA05_DMC_C_U_w; 
wire     [63:0]   DOB05_DMC_C_U_w; 
wire     [63:0]   DOA06_DMC_C_U_w; 
wire     [63:0]   DOB06_DMC_C_U_w;
wire     [6:0]    choose_reg_A_DMC_C_U_w; 
wire     [6:0]    choose_reg_B_DMC_C_U_w;


wire     [3:0]    A_DMC_U_T_w;
wire     [3:0]    B_DMC_U_T_w; 

wire     [63:0]   DOA00_DMC_T_U_w; 
wire     [63:0]   DOB00_DMC_T_U_w; 
wire     [63:0]   DOA01_DMC_T_U_w; 
wire     [63:0]   DOB01_DMC_T_U_w; 
wire     [63:0]   DOA02_DMC_T_U_w; 
wire     [63:0]   DOB02_DMC_T_U_w; 
wire     [63:0]   DOA03_DMC_T_U_w; 
wire     [63:0]   DOB03_DMC_T_U_w; 
wire     [63:0]   DOA04_DMC_T_U_w; 
wire     [63:0]   DOB04_DMC_T_U_w; 
wire     [63:0]   DOA05_DMC_T_U_w; 
wire     [63:0]   DOB05_DMC_T_U_w; 
wire     [63:0]   DOA06_DMC_T_U_w; 
wire     [63:0]   DOB06_DMC_T_U_w;
wire     [6:0]    choose_reg_A_DMC_T_U_w; 
wire     [6:0]    choose_reg_B_DMC_T_U_w;



wire     [3:0]    A_DMC_V_C_w;
wire     [3:0]    B_DMC_V_C_w; 

wire     [63:0]   DOA00_DMC_C_V_w; 
wire     [63:0]   DOB00_DMC_C_V_w; 
wire     [63:0]   DOA01_DMC_C_V_w; 
wire     [63:0]   DOB01_DMC_C_V_w; 
wire     [63:0]   DOA02_DMC_C_V_w; 
wire     [63:0]   DOB02_DMC_C_V_w; 
wire     [63:0]   DOA03_DMC_C_V_w; 
wire     [63:0]   DOB03_DMC_C_V_w; 
wire     [63:0]   DOA04_DMC_C_V_w; 
wire     [63:0]   DOB04_DMC_C_V_w; 
wire     [63:0]   DOA05_DMC_C_V_w; 
wire     [63:0]   DOB05_DMC_C_V_w; 
wire     [63:0]   DOA06_DMC_C_V_w; 
wire     [63:0]   DOB06_DMC_C_V_w;
wire     [6:0]    choose_reg_A_DMC_C_V_w; 
wire     [6:0]    choose_reg_B_DMC_C_V_w;








wire     [3:0]    A_DMC_V_T_w;
wire     [3:0]    B_DMC_V_T_w; 
wire     [63:0]   DOA00_DMC_T_V_w; 
wire     [63:0]   DOB00_DMC_T_V_w; 
wire     [63:0]   DOA01_DMC_T_V_w; 
wire     [63:0]   DOB01_DMC_T_V_w; 
wire     [63:0]   DOA02_DMC_T_V_w; 
wire     [63:0]   DOB02_DMC_T_V_w; 
wire     [63:0]   DOA03_DMC_T_V_w; 
wire     [63:0]   DOB03_DMC_T_V_w; 
wire     [63:0]   DOA04_DMC_T_V_w; 
wire     [63:0]   DOB04_DMC_T_V_w; 
wire     [63:0]   DOA05_DMC_T_V_w; 
wire     [63:0]   DOB05_DMC_T_V_w; 
wire     [63:0]   DOA06_DMC_T_V_w; 
wire     [63:0]   DOB06_DMC_T_V_w;
wire     [6:0]    choose_reg_A_DMC_T_V_w; 
wire     [6:0]    choose_reg_B_DMC_T_V_w;

//wire        [255:0]  flag_Y, flag_U, flag_V;




wire              reset_pazen;
   
/**********************************************************/
/*         HISTOGRAM ACCUMULATION INPUT BUFFER            */
/**********************************************************/
wire     [15:0]   Y_buffer_DOA_w;
wire     [15:0]   U_buffer_DOA_w;
wire     [15:0]   V_buffer_DOA_w;
wire     [15:0]   Cordic_buffer_DOA_w;
wire              accumulation_histogram_enable;
wire     [15:0]   Weight_buffer_DOA_w;
wire     [2:0]    buffer_cordic_count_w;
wire              buffer_input_stop_w;

wire     [63:0]   Y_buffer_data_write_w;
wire     [63:0]   U_buffer_data_write_w;
wire     [63:0]   V_buffer_data_write_w;
wire     [63:0]   Cordic_buffer_data_write_w;
wire     [63:0]   Weight_buffer_data_write_w;
wire              accumulation_histogram_reset;
wire     [1:0]    count_bu_w;
wire	   [2:0]    write_which_in_w;
wire     [1:0]    compute_bu_in_w;
wire     [3:0]    temp_accumulate_how_many_w;
wire     [63:0]   MASK_buffer_DOA_w;
wire     [63:0]   MASK_buffer_data_write_w;
wire              MASK_stop_w;
wire              MASK_1_in_w, MASK_2_in_w;
wire              MASK_temp_address_w;


/*************************************************************/   
//                         CONTROL
/*************************************************************/     
   
wire              acc_background_color_or_not;
wire              histogram_accumulation_done_w;
wire     [9:0]    position_counter_x_w;
wire     [8:0]    position_counter_y_w;

   
  
/*************************************************************/   
//                         CORDIC
/*************************************************************/  
reg               reset_cordic_0_in;
reg      [31:0]   x_cordic_0_in, y_cordic_0_in, z_cordic_0_in;
reg               choose_cordic_0_in;
reg               enable_cordic_0_in;

reg               reset_cordic_1_in;
reg      [31:0]   x_cordic_1_in, y_cordic_1_in, z_cordic_1_in;
reg               choose_cordic_1_in;
reg               enable_cordic_1_in;

reg               reset_cordic_2_in;
reg      [31:0]   x_cordic_2_in, y_cordic_2_in, z_cordic_2_in;
reg               choose_cordic_2_in;
reg               enable_cordic_2_in;

reg               reset_cordic_3_in;
reg      [31:0]   x_cordic_3_in, y_cordic_3_in, z_cordic_3_in;
reg               choose_cordic_3_in;
reg               enable_cordic_3_in;

reg               reset_cordic_4_in;
reg      [31:0]   x_cordic_4_in, y_cordic_4_in, z_cordic_4_in;
reg               choose_cordic_4_in;
reg               enable_cordic_4_in;

reg               reset_cordic_5_in;
reg      [31:0]   x_cordic_5_in, y_cordic_5_in, z_cordic_5_in;
reg               choose_cordic_5_in;
reg               enable_cordic_5_in;

reg               reset_cordic_6_in;
reg      [31:0]   x_cordic_6_in, y_cordic_6_in, z_cordic_6_in;
reg               choose_cordic_6_in;
reg               enable_cordic_6_in;

reg               reset_cordic_7_in;
reg      [31:0]   x_cordic_7_in, y_cordic_7_in, z_cordic_7_in;
reg               choose_cordic_7_in;
reg               enable_cordic_7_in;
/*************************************************************/
//                         DMA   
/*************************************************************/
reg      [3:0]    Address_from_DMA_r;   
reg      [63:0]   Data_from_DMA_r;      
reg               WEAN_from_DMA_r;      
reg      [47:0]   choose_reg_from_DMA_r;
reg      [3:0]    MUXA_from_DMA_r;
reg      [63:0]   Data_to_DMA_w, Data_to_DMA_r;
/*************************************************************/   
//                    CONTROL
/*************************************************************/  
   
reg      [63:0]   distanceY_r;
reg      [63:0]   distanceU_r;
reg      [63:0]   distanceV_r;
reg      [19:0]   total_histogram_C_y_r, total_histogram_T_y_r;
reg      [19:0]   total_histogram_C_u_r, total_histogram_T_u_r;
reg      [19:0]   total_histogram_C_v_r, total_histogram_T_v_r;
reg      [19:0]   total_target_histogram_y_r;
reg      [19:0]   total_target_histogram_u_r;
reg      [19:0]   total_target_histogram_v_r;
   

reg      [7:0]    background_weight_0_in_r;
reg      [7:0]    background_weight_1_in_r;
reg      [7:0]    background_weight_2_in_r;
reg      [7:0]    background_weight_3_in_r;
reg      [7:0]    background_weight_4_in_r;
reg      [7:0]    background_weight_5_in_r;
reg      [7:0]    background_weight_6_in_r;
reg      [7:0]    background_weight_7_in_r;



reg      [7:0]    color_0_in_r, color_0_in_2d_r, color_0_in_3d_r, color_0_in_4d_r, color_0_in_5d_r, color_0_in_6d_r, color_0_in_7d_r, color_0_in_8d_r, color_0_in_9d_r, color_0_in_10d_r;
reg      [7:0]    color_1_in_r, color_1_in_2d_r, color_1_in_3d_r, color_1_in_4d_r, color_1_in_5d_r, color_1_in_6d_r, color_1_in_7d_r, color_1_in_8d_r, color_1_in_9d_r, color_1_in_10d_r;
reg      [7:0]    color_2_in_r, color_2_in_2d_r, color_2_in_3d_r, color_2_in_4d_r, color_2_in_5d_r, color_2_in_6d_r, color_2_in_7d_r, color_2_in_8d_r, color_2_in_9d_r, color_2_in_10d_r;
reg      [7:0]    color_3_in_r, color_3_in_2d_r, color_3_in_3d_r, color_3_in_4d_r, color_3_in_5d_r, color_3_in_6d_r, color_3_in_7d_r, color_3_in_8d_r, color_3_in_9d_r, color_3_in_10d_r;
reg      [7:0]    color_4_in_r, color_4_in_2d_r, color_4_in_3d_r, color_4_in_4d_r, color_4_in_5d_r, color_4_in_6d_r, color_4_in_7d_r, color_4_in_8d_r, color_4_in_9d_r, color_4_in_10d_r;
reg      [7:0]    color_5_in_r, color_5_in_2d_r, color_5_in_3d_r, color_5_in_4d_r, color_5_in_5d_r, color_5_in_6d_r, color_5_in_7d_r, color_5_in_8d_r, color_5_in_9d_r, color_5_in_10d_r;
reg      [7:0]    color_6_in_r, color_6_in_2d_r, color_6_in_3d_r, color_6_in_4d_r, color_6_in_5d_r, color_6_in_6d_r, color_6_in_7d_r, color_6_in_8d_r, color_6_in_9d_r, color_6_in_10d_r;
reg      [7:0]    color_7_in_r, color_7_in_2d_r, color_7_in_3d_r, color_7_in_4d_r, color_7_in_5d_r, color_7_in_6d_r, color_7_in_7d_r, color_7_in_8d_r, color_7_in_9d_r, color_7_in_10d_r;
reg      [3:0]    accumulate_how_many_in_r;

reg      [31:0]   diag_r;     
                       
reg      [9:0]    centerx_in_r;
reg      [8:0]    centery_in_r;
//reg      [3:0]    Mode_i;     
                       
reg      [2:0]    iteration_times_r;
reg               buffer_input_stop_r;  
reg               buffer_input_stop_2d_r;  
reg               buffer_input_stop_3d_r;  
reg               buffer_input_stop_4d_r;  
reg               buffer_input_stop_5d_r;  
reg               buffer_input_stop_6d_r;  
reg               buffer_input_stop_7d_r;  
reg               buffer_input_stop_8d_r;  
reg               histogram_accumulation_done_r;
reg      [63:0]   CCA_D_in_r;
reg      [63:0]   CCA_I_in_r;

reg      [6:0]    CCA_1_out_r, CCA_2_out_r;

reg      [9:0]    position_counter_x_r;
reg      [8:0]    position_counter_y_r;

/*************************************************************/   
//                    REGISTER FILE
/*************************************************************/     
reg      [3:0]    A00_w, B00_w;
reg      [3:0]    A01_w, B01_w;
reg      [3:0]    A02_w, B02_w;
reg      [3:0]    A03_w, B03_w;
reg      [3:0]    A04_w, B04_w;
reg      [3:0]    A05_w, B05_w;
reg      [3:0]    A06_w, B06_w;
reg      [3:0]    A07_w, B07_w;
reg      [3:0]    A08_w, B08_w;
reg      [3:0]    A09_w, B09_w;
reg      [3:0]    A10_w, B10_w;
reg      [3:0]    A11_w, B11_w;
reg      [3:0]    A12_w, B12_w;
reg      [3:0]    A13_w, B13_w;
reg      [3:0]    A14_w, B14_w;
reg      [3:0]    A15_w, B15_w;
reg      [3:0]    A16_w, B16_w;
reg      [3:0]    A17_w, B17_w;
reg      [3:0]    A18_w, B18_w;
reg      [3:0]    A19_w, B19_w;
reg      [3:0]    A20_w, B20_w;
reg      [3:0]    A21_w, B21_w;
reg      [3:0]    A22_w, B22_w;
reg      [3:0]    A23_w, B23_w;
reg      [3:0]    A24_w, B24_w;
reg      [3:0]    A25_w, B25_w;
reg      [3:0]    A26_w, B26_w;
reg      [3:0]    A27_w, B27_w;
reg      [3:0]    A28_w, B28_w;
reg      [3:0]    A29_w, B29_w;
reg      [3:0]    A30_w, B30_w;
reg      [3:0]    A31_w, B31_w;
reg      [3:0]    A32_w, B32_w;
reg      [3:0]    A33_w, B33_w;
reg      [3:0]    A34_w, B34_w;
reg      [3:0]    A35_w, B35_w;
reg      [3:0]    A36_w, B36_w;
reg      [3:0]    A37_w, B37_w;
reg      [3:0]    A38_w, B38_w;
reg      [3:0]    A39_w, B39_w;
reg      [3:0]    A40_w, B40_w;
reg      [3:0]    A41_w, B41_w;
reg      [3:0]    A42_w, B42_w;
reg      [3:0]    A43_w, B43_w;
reg      [3:0]    A44_w, B44_w;
reg      [3:0]    A45_w, B45_w;
reg      [3:0]    A46_w, B46_w;
reg      [3:0]    A47_w, B47_w;
   
reg      [63:0]   DIA00_w, DIB00_w;
reg      [63:0]   DIA01_w, DIB01_w;
reg      [63:0]   DIA02_w, DIB02_w;
reg      [63:0]   DIA03_w, DIB03_w;
reg      [63:0]   DIA04_w, DIB04_w;
reg      [63:0]   DIA05_w, DIB05_w;
reg      [63:0]   DIA06_w, DIB06_w;
reg      [63:0]   DIA07_w, DIB07_w;
reg      [63:0]   DIA08_w, DIB08_w;
reg      [63:0]   DIA09_w, DIB09_w;
reg      [63:0]   DIA10_w, DIB10_w;
reg      [63:0]   DIA11_w, DIB11_w;
reg      [63:0]   DIA12_w, DIB12_w;
reg      [63:0]   DIA13_w, DIB13_w;
reg      [63:0]   DIA14_w, DIB14_w;
reg      [63:0]   DIA15_w, DIB15_w;
reg      [63:0]   DIA16_w, DIB16_w;
reg      [63:0]   DIA17_w, DIB17_w;
reg      [63:0]   DIA18_w, DIB18_w;
reg      [63:0]   DIA19_w, DIB19_w;
reg      [63:0]   DIA20_w, DIB20_w;
reg      [63:0]   DIA21_w, DIB21_w;
reg      [63:0]   DIA22_w, DIB22_w;
reg      [63:0]   DIA23_w, DIB23_w;
reg      [63:0]   DIA24_w, DIB24_w;
reg      [63:0]   DIA25_w, DIB25_w;
reg      [63:0]   DIA26_w, DIB26_w;
reg      [63:0]   DIA27_w, DIB27_w;
reg      [63:0]   DIA28_w, DIB28_w;
reg      [63:0]   DIA29_w, DIB29_w;
reg      [63:0]   DIA30_w, DIB30_w;
reg      [63:0]   DIA31_w, DIB31_w;
reg      [63:0]   DIA32_w, DIB32_w;
reg      [63:0]   DIA33_w, DIB33_w;
reg      [63:0]   DIA34_w, DIB34_w;
reg      [63:0]   DIA35_w, DIB35_w;
reg      [63:0]   DIA36_w, DIB36_w;
reg      [63:0]   DIA37_w, DIB37_w;
reg      [63:0]   DIA38_w, DIB38_w;
reg      [63:0]   DIA39_w, DIB39_w;
reg      [63:0]   DIA40_w, DIB40_w;
reg      [63:0]   DIA41_w, DIB41_w;
reg      [63:0]   DIA42_w, DIB42_w;
reg      [63:0]   DIA43_w, DIB43_w;
reg      [63:0]   DIA44_w, DIB44_w;
reg      [63:0]   DIA45_w, DIB45_w;
reg      [63:0]   DIA46_w, DIB46_w;
reg      [63:0]   DIA47_w, DIB47_w;


reg      [47:0]   WEAN_w, WEBN_w, OEA_w, OEB_w;

reg      [3:0]    MUXA00_w, MUXB00_w;
reg      [3:0]    MUXA01_w, MUXB01_w;
reg      [3:0]    MUXA02_w, MUXB02_w;
reg      [3:0]    MUXA03_w, MUXB03_w;
reg      [3:0]    MUXA04_w, MUXB04_w;
reg      [3:0]    MUXA05_w, MUXB05_w;
reg      [3:0]    MUXA06_w, MUXB06_w;
reg      [3:0]    MUXA07_w, MUXB07_w;
reg      [3:0]    MUXA08_w, MUXB08_w;
reg      [3:0]    MUXA09_w, MUXB09_w;
reg      [3:0]    MUXA10_w, MUXB10_w;
reg      [3:0]    MUXA11_w, MUXB11_w;
reg      [3:0]    MUXA12_w, MUXB12_w;
reg      [3:0]    MUXA13_w, MUXB13_w;
reg      [3:0]    MUXA14_w, MUXB14_w;
reg      [3:0]    MUXA15_w, MUXB15_w;
reg      [3:0]    MUXA16_w, MUXB16_w;
reg      [3:0]    MUXA17_w, MUXB17_w;
reg      [3:0]    MUXA18_w, MUXB18_w;
reg      [3:0]    MUXA19_w, MUXB19_w;
reg      [3:0]    MUXA20_w, MUXB20_w;
reg      [3:0]    MUXA21_w, MUXB21_w;
reg      [3:0]    MUXA22_w, MUXB22_w;
reg      [3:0]    MUXA23_w, MUXB23_w;
reg      [3:0]    MUXA24_w, MUXB24_w;
reg      [3:0]    MUXA25_w, MUXB25_w;
reg      [3:0]    MUXA26_w, MUXB26_w;
reg      [3:0]    MUXA27_w, MUXB27_w;
reg      [3:0]    MUXA28_w, MUXB28_w;
reg      [3:0]    MUXA29_w, MUXB29_w;
reg      [3:0]    MUXA30_w, MUXB30_w;
reg      [3:0]    MUXA31_w, MUXB31_w;
reg      [3:0]    MUXA32_w, MUXB32_w;
reg      [3:0]    MUXA33_w, MUXB33_w;
reg      [3:0]    MUXA34_w, MUXB34_w;
reg      [3:0]    MUXA35_w, MUXB35_w;
reg      [3:0]    MUXA36_w, MUXB36_w;
reg      [3:0]    MUXA37_w, MUXB37_w;
reg      [3:0]    MUXA38_w, MUXB38_w;
reg      [3:0]    MUXA39_w, MUXB39_w;
reg      [3:0]    MUXA40_w, MUXB40_w;
reg      [3:0]    MUXA41_w, MUXB41_w;
reg      [3:0]    MUXA42_w, MUXB42_w;
reg      [3:0]    MUXA43_w, MUXB43_w;
reg      [3:0]    MUXA44_w, MUXB44_w;
reg      [3:0]    MUXA45_w, MUXB45_w;
reg      [3:0]    MUXA46_w, MUXB46_w;
reg      [3:0]    MUXA47_w, MUXB47_w;

reg      [47:0]   choose_reg_A_w, choose_reg_B_w;
reg               done;
   
/**********************************************************/
/*         HISTOGRAM ACCUMULATION INPUT BUFFER            */
/**********************************************************/
reg      [3:0]    buffer_addr_A_w;
reg      [3:0]    MASK_buffer_A_w;
reg      [3:0]    MASK_buffer_A_r;
reg	            MASK_choose_reg_A_w;
reg      [3:0]    Cordic_buffer_addr_A_w;
reg      [3:0]    buffer_MUXA_w;
reg      [3:0]    Cordic_buffer_MUXA_w;
reg               buffer_WEAN_Y_w;
reg               buffer_WEAN_U_w;
reg               buffer_WEAN_V_w;
reg               Cordic_buffer_WEAN_w;
reg               buffer_OEA_w;
reg               Cordic_buffer_OEA_w;
reg               buffer_choose_reg_A_w;
reg               Cordic_buffer_choose_reg_A_w;
reg               buffer_full_w, buffer_empty_w;
reg      [2:0]    histogram_accumulation_state_w, histogram_accumulation_state_r;
reg      [6:0]    buffer_count_w, buffer_count_r;
reg      [5:0]    buffer_count_read_w, buffer_count_read_r;	
reg      [1:0]    count_bu_r;
reg      [2:0]    buffer_cordic_count_r;
reg 	   [2:0]    write_which_in_r;
reg 	   [1:0]    compute_bu_in_r;

reg      [15:0]   Y_buffer_DOA_r;
reg      [15:0]   U_buffer_DOA_r;
reg      [15:0]   V_buffer_DOA_r;

reg      [15:0]   Cordic_buffer_DOA_r;
reg      [15:0]   Weight_buffer_DOA_r;


reg      [9:0]    MASK_buffer_count_w;
reg      [9:0]    MASK_buffer_count_r;

reg      [9:0]    MASK_buffer_count_read_w;
reg      [9:0]    MASK_buffer_count_read_r;

reg               MASK_stop_r;
reg               MASK_input_stop_r;

reg               MASK_WEAN_w;


/**********************************************************/
//               CONNECT COMPONENT ANALYSIS
/**********************************************************/
reg      [7:0]    ALU_nobuffer_0_data_1_in_w;
   reg      [7:0]    ALU_nobuffer_0_data_2_in_w;
   reg      [7:0]    ALU_nobuffer_1_data_1_in_w;
   reg      [7:0]    ALU_nobuffer_1_data_2_in_w;
   reg      [7:0]    ALU_nobuffer_2_data_1_in_w;
   reg      [7:0]    ALU_nobuffer_2_data_2_in_w;
   reg      [7:0]    ALU_nobuffer_3_data_1_in_w;
   reg      [7:0]    ALU_nobuffer_3_data_2_in_w;
   reg               ALU_nobuffer_0_input_selector_in_w;
   reg               ALU_nobuffer_1_input_selector_in_w;
   reg               ALU_nobuffer_2_input_selector_in_w;
   reg               ALU_nobuffer_3_input_selector_in_w;
   reg      [3:0]    ALU_nobuffer_0_selector_w;
   reg      [3:0]    ALU_nobuffer_1_selector_w;
   reg      [3:0]    ALU_nobuffer_2_selector_w;
   reg      [3:0]    ALU_nobuffer_3_selector_w;
   reg      [1:0]    CCA_state_w, CCA_state_r;
   reg      [63:0]   CCA_D_DOA_up_w, CCA_D_DOA_w;
   reg      [9:0]    count_CCA_r;
   reg      [9:0]    count_CCA_w;
   reg               CCA_I_WEAN_w, CCA_D_WEAN_w, CCA_D_up_WEAN_w;
   reg               CCA_I_LEFT_r;
   reg      [1:0]    CCA_compute_count_r;
   reg      [9:0]    CCA_choose_reg_w;
   reg      [63:0]   CCA_D_DOA_00_r;
   reg      [63:0]   CCA_D_DOA_01_r;
   reg      [63:0]   CCA_D_DOA_02_r;
   reg      [63:0]   CCA_D_DOA_03_r;
   reg      [63:0]   CCA_D_DOA_04_r;
   reg      [63:0]   CCA_D_DOA_05_r;
   reg      [63:0]   CCA_D_DOA_06_r;
   reg      [63:0]   CCA_D_DOA_07_r;
   reg      [63:0]   CCA_D_DOA_08_r;
   reg      [63:0]   CCA_D_DOA_09_r;
   reg      [63:0]   CCA_D_DOA_10_r;
   reg      [63:0]   CCA_D_DOA_11_r;
   reg      [63:0]   CCA_D_DOA_12_r;
   reg      [63:0]   CCA_D_DOA_13_r;
   reg      [63:0]   CCA_D_DOA_14_r;
   reg      [63:0]   CCA_D_DOA_15_r;
   reg      [63:0]   CCA_D_DOA_16_r;
   reg      [63:0]   CCA_D_DOA_17_r;
   reg      [63:0]   CCA_D_DOA_18_r;
   reg      [63:0]   CCA_D_DOA_19_r; 
   reg      [63:0]   CCA_I_DOA_0_r;
   reg      [63:0]   CCA_I_DOA_1_r;
   reg      [6:0]    CCA_D_LEFT_r;
   reg               CCA_I_LEFT_2d_r;



/*************************************************************/   
//                 Segmentation Related
/*************************************************************/     
wire [63:0] Seg_DataOut_Sel;

wire seg_stall;

reg  [3:0] SegState;
wire [3:0] SegNextState_ws;

reg  [11:0] lineidx_r;   
wire  [11:0] lineidx_ws; 

reg  [11:0] pixelidx_r;
wire  [11:0] pixelidx_ws;
reg  [11:0] pixelidx_1r;
wire  [11:0] pixelidx_1ws;
reg  [11:0] pixelidx_2r;
wire  [11:0] pixelidx_2ws;
reg  [11:0] pixelidx_3r;
wire  [11:0] pixelidx_3ws;
reg  [11:0] pixelidx_4r;
wire  [11:0] pixelidx_4ws;
reg  [11:0] pixelidx_5r;
wire  [11:0] pixelidx_5ws;

reg  [11:0] pixelidx_Quarter_r;
wire  [11:0] pixelidx_Quarter_ws;
reg  [11:0] pixelidx_Quarter_1r;
wire  [11:0] pixelidx_Quarter_1ws;
reg  [11:0] pixelidx_Quarter_2r;
wire  [11:0] pixelidx_Quarter_2ws;
reg  [11:0] pixelidx_Quarter_3r;
wire  [11:0] pixelidx_Quarter_3ws;
reg  [11:0] pixelidx_Quarter_4r;
wire  [11:0] pixelidx_Quarter_4ws;
reg  [11:0] pixelidx_Quarter_5r;
wire  [11:0] pixelidx_Quarter_5ws;

reg  [6:0] Count_BMYUVW_ADDR_r;
wire [6:0] Count_BMYUVW_ADDR_ws;
reg  [4:0] Count_CURYUV_ADDR_r;
wire [4:0] Count_CURYUV_ADDR_ws;
reg  [3:0] Count_MASKOUT_ADDR_r;
wire [3:0] Count_MASKOUT_ADDR_ws;


           
wire [6:0] CountBMYUVWSubAddrNumIn1Elem  ;
wire [6:0] CountBMYUVWSubAddrNumIn2Elem  ;
wire [6:0] CountBMYUVWSubAddrNumIn3Elem  ;
wire [6:0] CountBMYUVWSubAddrNumIn4Elem  ;
wire [6:0] CountBMYUVWSubAddrNumIn5Elem  ;
wire [6:0] CountBMYUVWSubAddrNumIn6Elem  ;
wire [6:0] CountBMYUVWSubAddrNumIn7Elem  ;

wire [6:0] CountCURYUVSubAddrNumIn1Elem  ;

wire  [11:0] pixelidxQuarter5r12b		    ;
wire  [11:0] pixelidxQuarter5rSubPixelNumin1ElemBM ;
wire  [11:0] pixelidxQuarter5rSubPixelNumin2ElemBM ;
wire  [11:0] pixelidxQuarter5rSubPixelNumin3ElemBM ;
wire  [11:0] pixelidxQuarter5rSubPixelNumin4ElemBM ;
wire  [11:0] pixelidxQuarter5rSubPixelNumin5ElemBM ;
wire  [11:0] pixelidxQuarter5rSubPixelNumin6ElemBM ;
wire  [11:0] pixelidxQuarter5rSubPixelNumin7ElemBM ;

wire  [11:0] pixelidxQuarterr12b		     ;
wire  [11:0] pixelidxQuarterrSubPixelNuminlElemBM ;
wire  [11:0] pixelidxQuarterrSubPixelNumin2ElemBM ;
wire  [11:0] pixelidxQuarterrSubPixelNumin3ElemBM ;
wire  [11:0] pixelidxQuarterrSubPixelNumin4ElemBM ;
wire  [11:0] pixelidxQuarterrSubPixelNumin5ElemBM ;
wire  [11:0] pixelidxQuarterrSubPixelNumin6ElemBM ;
wire  [11:0] pixelidxQuarterrSubPixelNumin7ElemBM ;




wire  [11:0] pixelidxQuarterr12b3sh;
wire  [11:0] pixelidxQuarterrSubPixelNumin1ElemCUR ;

wire  [11:0] pixelidx5r6sh ;






//Buffer for Background Model Y 
reg [3:0]       BMY_IObuffer_A00_w              ;
reg [3:0]       BMY_IObuffer_A01_w              ;
reg [3:0]       BMY_IObuffer_A02_w              ;
reg [3:0]       BMY_IObuffer_A03_w              ;
reg [3:0]       BMY_IObuffer_A04_w              ;
reg [3:0]       BMY_IObuffer_A05_w              ;
reg [3:0]       BMY_IObuffer_A06_w              ;
reg [3:0]       BMY_IObuffer_A07_w              ;
reg [63:0]      BMY_IObuffer_DIA00_w            ;
reg [63:0]      BMY_IObuffer_DIA01_w            ;
reg [63:0]      BMY_IObuffer_DIA02_w            ;
reg [63:0]      BMY_IObuffer_DIA03_w            ;
reg [63:0]      BMY_IObuffer_DIA04_w            ;
reg [63:0]      BMY_IObuffer_DIA05_w            ;
reg [63:0]      BMY_IObuffer_DIA06_w            ;
reg [63:0]      BMY_IObuffer_DIA07_w            ;
reg             BMY_IObuffer_WEAN_00_w          ;
reg             BMY_IObuffer_WEAN_01_w          ;
reg             BMY_IObuffer_WEAN_02_w          ;
reg             BMY_IObuffer_WEAN_03_w          ;
reg             BMY_IObuffer_WEAN_04_w          ;
reg             BMY_IObuffer_WEAN_05_w          ;
reg             BMY_IObuffer_WEAN_06_w          ;
reg             BMY_IObuffer_WEAN_07_w          ;
reg             BMY_IObuffer_OEA_00_w           ;
reg             BMY_IObuffer_OEA_01_w           ;
reg             BMY_IObuffer_OEA_02_w           ;
reg             BMY_IObuffer_OEA_03_w           ;
reg             BMY_IObuffer_OEA_04_w           ;
reg             BMY_IObuffer_OEA_05_w           ;
reg             BMY_IObuffer_OEA_06_w           ;
reg             BMY_IObuffer_OEA_07_w           ;
reg             BMY_IObuffer_choose_reg_A_00_w  ;
reg             BMY_IObuffer_choose_reg_A_01_w  ;
reg             BMY_IObuffer_choose_reg_A_02_w  ;
reg             BMY_IObuffer_choose_reg_A_03_w  ;
reg             BMY_IObuffer_choose_reg_A_04_w  ;
reg             BMY_IObuffer_choose_reg_A_05_w  ;
reg             BMY_IObuffer_choose_reg_A_06_w  ;
reg             BMY_IObuffer_choose_reg_A_07_w  ;
                                
reg [3:0]       BMY_IObuffer_B00_w              ;
reg [3:0]       BMY_IObuffer_B01_w              ;
reg [3:0]       BMY_IObuffer_B02_w              ;
reg [3:0]       BMY_IObuffer_B03_w              ;
reg [3:0]       BMY_IObuffer_B04_w              ;
reg [3:0]       BMY_IObuffer_B05_w              ;
reg [3:0]       BMY_IObuffer_B06_w              ;
reg [3:0]       BMY_IObuffer_B07_w              ;
reg [63:0]      BMY_IObuffer_DIB00_w            ;
reg [63:0]      BMY_IObuffer_DIB01_w            ;
reg [63:0]      BMY_IObuffer_DIB02_w            ;
reg [63:0]      BMY_IObuffer_DIB03_w            ;
reg [63:0]      BMY_IObuffer_DIB04_w            ;
reg [63:0]      BMY_IObuffer_DIB05_w            ;
reg [63:0]      BMY_IObuffer_DIB06_w            ;
reg [63:0]      BMY_IObuffer_DIB07_w            ;
reg             BMY_IObuffer_WEBN_00_w          ;
reg             BMY_IObuffer_WEBN_01_w          ;
reg             BMY_IObuffer_WEBN_02_w          ;
reg             BMY_IObuffer_WEBN_03_w          ;
reg             BMY_IObuffer_WEBN_04_w          ;
reg             BMY_IObuffer_WEBN_05_w          ;
reg             BMY_IObuffer_WEBN_06_w          ;
reg             BMY_IObuffer_WEBN_07_w          ;
reg             BMY_IObuffer_OEB_00_w           ;
reg             BMY_IObuffer_OEB_01_w           ;
reg             BMY_IObuffer_OEB_02_w           ;
reg             BMY_IObuffer_OEB_03_w           ;
reg             BMY_IObuffer_OEB_04_w           ;
reg             BMY_IObuffer_OEB_05_w           ;
reg             BMY_IObuffer_OEB_06_w           ;
reg             BMY_IObuffer_OEB_07_w           ;
reg             BMY_IObuffer_choose_reg_B_00_w  ;
reg             BMY_IObuffer_choose_reg_B_01_w  ;
reg             BMY_IObuffer_choose_reg_B_02_w  ;
reg             BMY_IObuffer_choose_reg_B_03_w  ;
reg             BMY_IObuffer_choose_reg_B_04_w  ;
reg             BMY_IObuffer_choose_reg_B_05_w  ;
reg             BMY_IObuffer_choose_reg_B_06_w  ;
reg             BMY_IObuffer_choose_reg_B_07_w  ;
                                
                                
                                
                                
//Buffer for Background Model U 
reg [3:0]       BMU_IObuffer_A08_w              ;
reg [3:0]       BMU_IObuffer_A09_w              ;
reg [3:0]       BMU_IObuffer_A10_w              ;
reg [3:0]       BMU_IObuffer_A11_w              ;
reg [3:0]       BMU_IObuffer_A12_w              ;
reg [3:0]       BMU_IObuffer_A13_w              ;
reg [3:0]       BMU_IObuffer_A14_w              ;
reg [3:0]       BMU_IObuffer_A15_w              ;
reg [63:0]      BMU_IObuffer_DIA08_w            ;
reg [63:0]      BMU_IObuffer_DIA09_w            ;
reg [63:0]      BMU_IObuffer_DIA10_w            ;
reg [63:0]      BMU_IObuffer_DIA11_w            ;
reg [63:0]      BMU_IObuffer_DIA12_w            ;
reg [63:0]      BMU_IObuffer_DIA13_w            ;
reg [63:0]      BMU_IObuffer_DIA14_w            ;
reg [63:0]      BMU_IObuffer_DIA15_w            ;
reg             BMU_IObuffer_WEAN_08_w          ;
reg             BMU_IObuffer_WEAN_09_w          ;
reg             BMU_IObuffer_WEAN_10_w          ;
reg             BMU_IObuffer_WEAN_11_w          ;
reg             BMU_IObuffer_WEAN_12_w          ;
reg             BMU_IObuffer_WEAN_13_w          ;
reg             BMU_IObuffer_WEAN_14_w          ;
reg             BMU_IObuffer_WEAN_15_w          ;
reg             BMU_IObuffer_OEA_08_w           ;
reg             BMU_IObuffer_OEA_09_w           ;
reg             BMU_IObuffer_OEA_10_w           ;
reg             BMU_IObuffer_OEA_11_w           ;
reg             BMU_IObuffer_OEA_12_w           ;
reg             BMU_IObuffer_OEA_13_w           ;
reg             BMU_IObuffer_OEA_14_w           ;
reg             BMU_IObuffer_OEA_15_w           ;
reg             BMU_IObuffer_choose_reg_A_08_w  ;
reg             BMU_IObuffer_choose_reg_A_09_w  ;
reg             BMU_IObuffer_choose_reg_A_10_w  ;
reg             BMU_IObuffer_choose_reg_A_11_w  ;
reg             BMU_IObuffer_choose_reg_A_12_w  ;
reg             BMU_IObuffer_choose_reg_A_13_w  ;
reg             BMU_IObuffer_choose_reg_A_14_w  ;
reg             BMU_IObuffer_choose_reg_A_15_w  ;
                                
                                
reg [3:0]       BMU_IObuffer_B08_w              ;
reg [3:0]       BMU_IObuffer_B09_w              ;
reg [3:0]       BMU_IObuffer_B10_w              ;
reg [3:0]       BMU_IObuffer_B11_w              ;
reg [3:0]       BMU_IObuffer_B12_w              ;
reg [3:0]       BMU_IObuffer_B13_w              ;
reg [3:0]       BMU_IObuffer_B14_w              ;
reg [3:0]       BMU_IObuffer_B15_w              ;
reg [63:0]      BMU_IObuffer_DIB08_w            ;
reg [63:0]      BMU_IObuffer_DIB09_w            ;
reg [63:0]      BMU_IObuffer_DIB10_w            ;
reg [63:0]      BMU_IObuffer_DIB11_w            ;
reg [63:0]      BMU_IObuffer_DIB12_w            ;
reg [63:0]      BMU_IObuffer_DIB13_w            ;
reg [63:0]      BMU_IObuffer_DIB14_w            ;
reg [63:0]      BMU_IObuffer_DIB15_w            ;
reg             BMU_IObuffer_WEBN_08_w          ;
reg             BMU_IObuffer_WEBN_09_w          ;
reg             BMU_IObuffer_WEBN_10_w          ;
reg             BMU_IObuffer_WEBN_11_w          ;
reg             BMU_IObuffer_WEBN_12_w          ;
reg             BMU_IObuffer_WEBN_13_w          ;
reg             BMU_IObuffer_WEBN_14_w          ;
reg             BMU_IObuffer_WEBN_15_w          ;
reg             BMU_IObuffer_OEB_08_w           ;
reg             BMU_IObuffer_OEB_09_w           ;
reg             BMU_IObuffer_OEB_10_w           ;
reg             BMU_IObuffer_OEB_11_w           ;
reg             BMU_IObuffer_OEB_12_w           ;
reg             BMU_IObuffer_OEB_13_w           ;
reg             BMU_IObuffer_OEB_14_w           ;
reg             BMU_IObuffer_OEB_15_w           ;
reg             BMU_IObuffer_choose_reg_B_08_w  ;
reg             BMU_IObuffer_choose_reg_B_09_w  ;
reg             BMU_IObuffer_choose_reg_B_10_w  ;
reg             BMU_IObuffer_choose_reg_B_11_w  ;
reg             BMU_IObuffer_choose_reg_B_12_w  ;
reg             BMU_IObuffer_choose_reg_B_13_w  ;
reg             BMU_IObuffer_choose_reg_B_14_w  ;
reg             BMU_IObuffer_choose_reg_B_15_w  ;
                                
                                
                                
//Buffer for Background Model V 
reg [3:0]       BMV_IObuffer_A16_w              ;
reg [3:0]       BMV_IObuffer_A17_w              ;
reg [3:0]       BMV_IObuffer_A18_w              ;
reg [3:0]       BMV_IObuffer_A19_w              ;
reg [3:0]       BMV_IObuffer_A20_w              ;
reg [3:0]       BMV_IObuffer_A21_w              ;
reg [3:0]       BMV_IObuffer_A22_w              ;
reg [3:0]       BMV_IObuffer_A23_w              ;
reg [63:0]      BMV_IObuffer_DIA16_w            ;
reg [63:0]      BMV_IObuffer_DIA17_w            ;
reg [63:0]      BMV_IObuffer_DIA18_w            ;
reg [63:0]      BMV_IObuffer_DIA19_w            ;
reg [63:0]      BMV_IObuffer_DIA20_w            ;
reg [63:0]      BMV_IObuffer_DIA21_w            ;
reg [63:0]      BMV_IObuffer_DIA22_w            ;
reg [63:0]      BMV_IObuffer_DIA23_w            ;
reg             BMV_IObuffer_WEAN_16_w          ;
reg             BMV_IObuffer_WEAN_17_w          ;
reg             BMV_IObuffer_WEAN_18_w          ;
reg             BMV_IObuffer_WEAN_19_w          ;
reg             BMV_IObuffer_WEAN_20_w          ;
reg             BMV_IObuffer_WEAN_21_w          ;
reg             BMV_IObuffer_WEAN_22_w          ;
reg             BMV_IObuffer_WEAN_23_w          ;
reg             BMV_IObuffer_OEA_16_w           ;
reg             BMV_IObuffer_OEA_17_w           ;
reg             BMV_IObuffer_OEA_18_w           ;
reg             BMV_IObuffer_OEA_19_w           ;
reg             BMV_IObuffer_OEA_20_w           ;
reg             BMV_IObuffer_OEA_21_w           ;
reg             BMV_IObuffer_OEA_22_w           ;
reg             BMV_IObuffer_OEA_23_w           ;
reg             BMV_IObuffer_choose_reg_A_16_w  ;
reg             BMV_IObuffer_choose_reg_A_17_w  ;
reg             BMV_IObuffer_choose_reg_A_18_w  ;
reg             BMV_IObuffer_choose_reg_A_19_w  ;
reg             BMV_IObuffer_choose_reg_A_20_w  ;
reg             BMV_IObuffer_choose_reg_A_21_w  ;
reg             BMV_IObuffer_choose_reg_A_22_w  ;
reg             BMV_IObuffer_choose_reg_A_23_w  ;
                                
reg [3:0]       BMV_IObuffer_B16_w              ;
reg [3:0]       BMV_IObuffer_B17_w              ;
reg [3:0]       BMV_IObuffer_B18_w              ;
reg [3:0]       BMV_IObuffer_B19_w              ;
reg [3:0]       BMV_IObuffer_B20_w              ;
reg [3:0]       BMV_IObuffer_B21_w              ;
reg [3:0]       BMV_IObuffer_B22_w              ;
reg [3:0]       BMV_IObuffer_B23_w              ;
reg [63:0]      BMV_IObuffer_DIB16_w            ;
reg [63:0]      BMV_IObuffer_DIB17_w            ;
reg [63:0]      BMV_IObuffer_DIB18_w            ;
reg [63:0]      BMV_IObuffer_DIB19_w            ;
reg [63:0]      BMV_IObuffer_DIB20_w            ;
reg [63:0]      BMV_IObuffer_DIB21_w            ;
reg [63:0]      BMV_IObuffer_DIB22_w            ;
reg [63:0]      BMV_IObuffer_DIB23_w            ;
reg             BMV_IObuffer_WEBN_16_w          ;
reg             BMV_IObuffer_WEBN_17_w          ;
reg             BMV_IObuffer_WEBN_18_w          ;
reg             BMV_IObuffer_WEBN_19_w          ;
reg             BMV_IObuffer_WEBN_20_w          ;
reg             BMV_IObuffer_WEBN_21_w          ;
reg             BMV_IObuffer_WEBN_22_w          ;
reg             BMV_IObuffer_WEBN_23_w          ;
reg             BMV_IObuffer_OEB_16_w           ;
reg             BMV_IObuffer_OEB_17_w           ;
reg             BMV_IObuffer_OEB_18_w           ;
reg             BMV_IObuffer_OEB_19_w           ;
reg             BMV_IObuffer_OEB_20_w           ;
reg             BMV_IObuffer_OEB_21_w           ;
reg             BMV_IObuffer_OEB_22_w           ;
reg             BMV_IObuffer_OEB_23_w           ;
reg             BMV_IObuffer_choose_reg_B_16_w  ;
reg             BMV_IObuffer_choose_reg_B_17_w  ;
reg             BMV_IObuffer_choose_reg_B_18_w  ;
reg             BMV_IObuffer_choose_reg_B_19_w  ;
reg             BMV_IObuffer_choose_reg_B_20_w  ;
reg             BMV_IObuffer_choose_reg_B_21_w  ;
reg             BMV_IObuffer_choose_reg_B_22_w  ;
reg             BMV_IObuffer_choose_reg_B_23_w  ;
                                
                                
                                
                                
//Buffer for Background Model W 
reg [3:0]       BMW_IObuffer_A24_w              ;
reg [3:0]       BMW_IObuffer_A25_w              ;
reg [3:0]       BMW_IObuffer_A26_w              ;
reg [3:0]       BMW_IObuffer_A27_w              ;
reg [3:0]       BMW_IObuffer_A28_w              ;
reg [3:0]       BMW_IObuffer_A29_w              ;
reg [3:0]       BMW_IObuffer_A30_w              ;
reg [3:0]       BMW_IObuffer_A31_w              ;
reg [63:0]      BMW_IObuffer_DIA24_w            ;
reg [63:0]      BMW_IObuffer_DIA25_w            ;
reg [63:0]      BMW_IObuffer_DIA26_w            ;
reg [63:0]      BMW_IObuffer_DIA27_w            ;
reg [63:0]      BMW_IObuffer_DIA28_w            ;
reg [63:0]      BMW_IObuffer_DIA29_w            ;
reg [63:0]      BMW_IObuffer_DIA30_w            ;
reg [63:0]      BMW_IObuffer_DIA31_w            ;
reg             BMW_IObuffer_WEAN_24_w          ;
reg             BMW_IObuffer_WEAN_25_w          ;
reg             BMW_IObuffer_WEAN_26_w          ;
reg             BMW_IObuffer_WEAN_27_w          ;
reg             BMW_IObuffer_WEAN_28_w          ;
reg             BMW_IObuffer_WEAN_29_w          ;
reg             BMW_IObuffer_WEAN_30_w          ;
reg             BMW_IObuffer_WEAN_31_w          ;
reg             BMW_IObuffer_OEA_24_w           ;
reg             BMW_IObuffer_OEA_25_w           ;
reg             BMW_IObuffer_OEA_26_w           ;
reg             BMW_IObuffer_OEA_27_w           ;
reg             BMW_IObuffer_OEA_28_w           ;
reg             BMW_IObuffer_OEA_29_w           ;
reg             BMW_IObuffer_OEA_30_w           ;
reg             BMW_IObuffer_OEA_31_w           ;
reg             BMW_IObuffer_choose_reg_A_24_w  ;
reg             BMW_IObuffer_choose_reg_A_25_w  ;
reg             BMW_IObuffer_choose_reg_A_26_w  ;
reg             BMW_IObuffer_choose_reg_A_27_w  ;
reg             BMW_IObuffer_choose_reg_A_28_w  ;
reg             BMW_IObuffer_choose_reg_A_29_w  ;
reg             BMW_IObuffer_choose_reg_A_30_w  ;
reg             BMW_IObuffer_choose_reg_A_31_w  ;
                                
reg [3:0]       BMW_IObuffer_B24_w              ;
reg [3:0]       BMW_IObuffer_B25_w              ;
reg [3:0]       BMW_IObuffer_B26_w              ;
reg [3:0]       BMW_IObuffer_B27_w              ;
reg [3:0]       BMW_IObuffer_B28_w              ;
reg [3:0]       BMW_IObuffer_B29_w              ;
reg [3:0]       BMW_IObuffer_B30_w              ;
reg [3:0]       BMW_IObuffer_B31_w              ;
reg [63:0]      BMW_IObuffer_DIB24_w            ;
reg [63:0]      BMW_IObuffer_DIB25_w            ;
reg [63:0]      BMW_IObuffer_DIB26_w            ;
reg [63:0]      BMW_IObuffer_DIB27_w            ;
reg [63:0]      BMW_IObuffer_DIB28_w            ;
reg [63:0]      BMW_IObuffer_DIB29_w            ;
reg [63:0]      BMW_IObuffer_DIB30_w            ;
reg [63:0]      BMW_IObuffer_DIB31_w            ;
reg             BMW_IObuffer_WEBN_24_w          ;
reg             BMW_IObuffer_WEBN_25_w          ;
reg             BMW_IObuffer_WEBN_26_w          ;
reg             BMW_IObuffer_WEBN_27_w          ;
reg             BMW_IObuffer_WEBN_28_w          ;
reg             BMW_IObuffer_WEBN_29_w          ;
reg             BMW_IObuffer_WEBN_30_w          ;
reg             BMW_IObuffer_WEBN_31_w          ;
reg             BMW_IObuffer_OEB_24_w           ;
reg             BMW_IObuffer_OEB_25_w           ;
reg             BMW_IObuffer_OEB_26_w           ;
reg             BMW_IObuffer_OEB_27_w           ;
reg             BMW_IObuffer_OEB_28_w           ;
reg             BMW_IObuffer_OEB_29_w           ;
reg             BMW_IObuffer_OEB_30_w           ;
reg             BMW_IObuffer_OEB_31_w           ;
reg             BMW_IObuffer_choose_reg_B_24_w  ;
reg             BMW_IObuffer_choose_reg_B_25_w  ;
reg             BMW_IObuffer_choose_reg_B_26_w  ;
reg             BMW_IObuffer_choose_reg_B_27_w  ;
reg             BMW_IObuffer_choose_reg_B_28_w  ;
reg             BMW_IObuffer_choose_reg_B_29_w  ;
reg             BMW_IObuffer_choose_reg_B_30_w  ;
reg             BMW_IObuffer_choose_reg_B_31_w  ;
                                
                                
                                
                                
//Buffer for Curent frame Y     
reg [3:0]       CurY_Ibuffer_A32_w              ;
reg [3:0]       CurY_Ibuffer_A33_w              ;
reg [63:0]      CurY_Ibuffer_DIA32_w            ;
reg [63:0]      CurY_Ibuffer_DIA33_w            ;
reg             CurY_Ibuffer_WEAN_32_w          ;
reg             CurY_Ibuffer_WEAN_33_w          ;
reg             CurY_Ibuffer_OEA_32_w           ;
reg             CurY_Ibuffer_OEA_33_w           ;
reg             CurY_Ibuffer_choose_reg_A_32_w  ;
reg             CurY_Ibuffer_choose_reg_A_33_w  ;
                                
reg [3:0]       CurY_Ibuffer_B32_w              ;
reg [3:0]       CurY_Ibuffer_B33_w              ;
reg [63:0]      CurY_Ibuffer_DIB32_w            ;
reg [63:0]      CurY_Ibuffer_DIB33_w            ;
reg             CurY_Ibuffer_WEBN_32_w          ;
reg             CurY_Ibuffer_WEBN_33_w          ;
reg             CurY_Ibuffer_OEB_32_w           ;
reg             CurY_Ibuffer_OEB_33_w           ;
reg             CurY_Ibuffer_choose_reg_B_32_w  ;
reg             CurY_Ibuffer_choose_reg_B_33_w  ;
                                
                                
                                
//Buffer for Curent frame U     
reg [3:0]       CurU_Ibuffer_A34_w              ;
reg [3:0]       CurU_Ibuffer_A35_w              ;
reg [63:0]      CurU_Ibuffer_DIA34_w            ;
reg [63:0]      CurU_Ibuffer_DIA35_w            ;
reg             CurU_Ibuffer_WEAN_34_w          ;
reg             CurU_Ibuffer_WEAN_35_w          ;
reg             CurU_Ibuffer_OEA_34_w           ;
reg             CurU_Ibuffer_OEA_35_w           ;
reg             CurU_Ibuffer_choose_reg_A_34_w  ;
reg             CurU_Ibuffer_choose_reg_A_35_w  ;
                                
reg [3:0]       CurU_Ibuffer_B34_w              ;
reg [3:0]       CurU_Ibuffer_B35_w              ;
reg [63:0]      CurU_Ibuffer_DIB34_w            ;
reg [63:0]      CurU_Ibuffer_DIB35_w            ;
reg             CurU_Ibuffer_WEBN_34_w          ;
reg             CurU_Ibuffer_WEBN_35_w          ;
reg             CurU_Ibuffer_OEB_34_w           ;
reg             CurU_Ibuffer_OEB_35_w           ;
reg             CurU_Ibuffer_choose_reg_B_34_w  ;
reg             CurU_Ibuffer_choose_reg_B_35_w  ;
                                
                                
                                
//Buffer for Curent frame V     
reg [3:0]       CurV_Ibuffer_A36_w              ;
reg [3:0]       CurV_Ibuffer_A37_w              ;
reg [63:0]      CurV_Ibuffer_DIA36_w            ;
reg [63:0]      CurV_Ibuffer_DIA37_w            ;
reg             CurV_Ibuffer_WEAN_36_w          ;
reg             CurV_Ibuffer_WEAN_37_w          ;
reg             CurV_Ibuffer_OEA_36_w           ;
reg             CurV_Ibuffer_OEA_37_w           ;
reg             CurV_Ibuffer_choose_reg_A_36_w  ;
reg             CurV_Ibuffer_choose_reg_A_37_w  ;
                                
reg [3:0]       CurV_Ibuffer_B36_w              ;
reg [3:0]       CurV_Ibuffer_B37_w              ;
reg [63:0]      CurV_Ibuffer_DIB36_w            ;
reg [63:0]      CurV_Ibuffer_DIB37_w            ;
reg             CurV_Ibuffer_WEBN_36_w          ;
reg             CurV_Ibuffer_WEBN_37_w          ;
reg             CurV_Ibuffer_OEB_36_w           ;
reg             CurV_Ibuffer_OEB_37_w           ;
reg             CurV_Ibuffer_choose_reg_B_36_w  ;
reg             CurV_Ibuffer_choose_reg_B_37_w  ;
                                
                                
                                
//Buffer for Mask               
reg [3:0]       Mask_Obuffer_A38_w              ;
reg [63:0]      Mask_Obuffer_DIA38_w            ;
reg             Mask_Obuffer_WEAN_38_w          ;
reg             Mask_Obuffer_OEA_38_w           ;
reg             Mask_Obuffer_choose_reg_A_38_w  ;
                                
reg [3:0]       Mask_Obuffer_B38_w              ;
reg [63:0]      Mask_Obuffer_DIB38_w            ;
reg             Mask_Obuffer_WEBN_38_w          ;
reg             Mask_Obuffer_OEB_38_w           ;
reg             Mask_Obuffer_choose_reg_B_38_w  ;

wire       Mask_Obuffer_WEAN_w;                                                 
wire [1:0] CurV_Ibuffer_WEAN_w;                 
wire [1:0] CurU_Ibuffer_WEAN_w;                 
wire [1:0] CurY_Ibuffer_WEAN_w;                 
wire [7:0] BMW_IObuffer_WEAN_w;                 
wire [7:0] BMV_IObuffer_WEAN_w;                 
wire [7:0] BMU_IObuffer_WEAN_w;         
wire [7:0] BMY_IObuffer_WEAN_w;         
wire       Mask_Obuffer_WEBN_w;                 
wire [1:0] CurV_Ibuffer_WEBN_w;         
wire [1:0] CurU_Ibuffer_WEBN_w;         
wire [1:0] CurY_Ibuffer_WEBN_w;         
wire [7:0] BMW_IObuffer_WEBN_w;     
wire [7:0] BMV_IObuffer_WEBN_w;         
wire [7:0] BMU_IObuffer_WEBN_w;         
wire [7:0] BMY_IObuffer_WEBN_w;         
                                
wire       Mask_Obuffer_OEA_w ;         
wire [1:0] CurV_Ibuffer_OEA_w ;         
wire [1:0] CurU_Ibuffer_OEA_w ;         
wire [1:0] CurY_Ibuffer_OEA_w ;         
wire [7:0] BMW_IObuffer_OEA_w ;         
wire [7:0] BMV_IObuffer_OEA_w ;         
wire [7:0] BMU_IObuffer_OEA_w ;         
wire [7:0] BMY_IObuffer_OEA_w ;         
wire       Mask_Obuffer_OEB_w ;         
wire [1:0] CurV_Ibuffer_OEB_w ;         
wire [1:0] CurU_Ibuffer_OEB_w ;         
wire [1:0] CurY_Ibuffer_OEB_w ;         
wire [7:0] BMW_IObuffer_OEB_w ;         
wire [7:0] BMV_IObuffer_OEB_w ;         
wire [7:0] BMU_IObuffer_OEB_w ;         
wire [7:0] BMY_IObuffer_OEB_w ;         
                                
wire       Mask_Obuffer_choose_reg_A_w ;
wire [1:0] CurV_Ibuffer_choose_reg_A_w ;
wire [1:0] CurU_Ibuffer_choose_reg_A_w ;
wire [1:0] CurY_Ibuffer_choose_reg_A_w ;
wire [7:0] BMW_IObuffer_choose_reg_A_w ;
wire [7:0] BMV_IObuffer_choose_reg_A_w ;
wire [7:0] BMU_IObuffer_choose_reg_A_w ;
wire [7:0] BMY_IObuffer_choose_reg_A_w ;
wire       Mask_Obuffer_choose_reg_B_w ;
wire [1:0] CurV_Ibuffer_choose_reg_B_w ;
wire [1:0] CurU_Ibuffer_choose_reg_B_w ;
wire [1:0] CurY_Ibuffer_choose_reg_B_w ;
wire [7:0] BMW_IObuffer_choose_reg_B_w ;
wire [7:0] BMV_IObuffer_choose_reg_B_w ;
wire [7:0] BMU_IObuffer_choose_reg_B_w ;
wire [7:0] BMY_IObuffer_choose_reg_B_w ;

wire [8:0] RSPE_minmax0_data_00_in;   
wire [8:0] RSPE_minmax0_data_01_in;   
wire [8:0] RSPE_minmax0_data_02_in;   
wire [8:0] RSPE_minmax0_data_03_in;   
wire [8:0] RSPE_minmax0_data_04_in;   
wire [8:0] RSPE_minmax0_data_05_in;   
wire [8:0] RSPE_minmax0_data_06_in;   
wire [8:0] RSPE_minmax0_data_07_in;   
wire [8:0] RSPE_minmax0_data_08_in;   
wire [8:0] RSPE_minmax0_data_09_in;   
wire [8:0] RSPE_minmax0_data_10_in;   
wire [8:0] RSPE_minmax0_data_11_in;   
wire [8:0] RSPE_minmax0_data_12_in;   
wire [8:0] RSPE_minmax0_data_13_in;   
wire [8:0] RSPE_minmax0_data_14_in;   
wire [8:0] RSPE_minmax0_data_15_in;   
wire [8:0] RSPE_minmax0_data_16_in;   
wire [8:0] RSPE_minmax0_data_17_in;   
wire [8:0] RSPE_minmax0_data_18_in;   
wire [8:0] RSPE_minmax0_data_19_in;   
wire [8:0] RSPE_minmax0_data_20_in;   
wire [8:0] RSPE_minmax0_data_21_in;   
wire [8:0] RSPE_minmax0_data_22_in;   
wire [8:0] RSPE_minmax0_data_23_in;   
wire [8:0] RSPE_minmax0_data_24_in;   
wire [8:0] RSPE_minmax0_data_25_in;   
wire [8:0] RSPE_minmax0_data_26_in;   
                                      


wire [7:0] Seg_curpixelY_w;
wire [7:0] Seg_curpixelU_w;
wire [7:0] Seg_curpixelV_w;


wire [31:0] Seg_bckgndlayerY_w;
wire [31:0] Seg_bckgndlayerU_w;
wire [31:0] Seg_bckgndlayerV_w;
wire [31:0] Seg_bckgndlayerW_w; 

wire [7:0] Seg_curpixelY_1ws;
wire [7:0] Seg_curpixelU_1ws;
wire [7:0] Seg_curpixelV_1ws;

reg [7:0] Seg_curpixelY_1r;
reg [7:0] Seg_curpixelU_1r;
reg [7:0] Seg_curpixelV_1r;

wire [31:0] Seg_bckgndlayerY_1ws;
wire [31:0] Seg_bckgndlayerU_1ws;
wire [31:0] Seg_bckgndlayerV_1ws;
wire [31:0] Seg_bckgndlayerW_1ws; 

reg [31:0] Seg_bckgndlayerY_1r;
reg [31:0] Seg_bckgndlayerU_1r;
reg [31:0] Seg_bckgndlayerV_1r;
reg [31:0] Seg_bckgndlayerW_1r; 


wire [7:0] Seg_curpixelY_2ws;
wire [7:0] Seg_curpixelU_2ws;
wire [7:0] Seg_curpixelV_2ws;

reg [7:0] Seg_curpixelY_2r;
reg [7:0] Seg_curpixelU_2r;
reg [7:0] Seg_curpixelV_2r;

wire [31:0] Seg_bckgndlayerY_2ws;
wire [31:0] Seg_bckgndlayerU_2ws;
wire [31:0] Seg_bckgndlayerV_2ws;
wire [31:0] Seg_bckgndlayerW_2ws; 

reg [31:0] Seg_bckgndlayerY_2r;
reg [31:0] Seg_bckgndlayerU_2r;
reg [31:0] Seg_bckgndlayerV_2r;
reg [31:0] Seg_bckgndlayerW_2r; 

reg [63:0] Updated_BMY_32to64_r;
wire [63:0] Updated_BMY_32to64_ws;
wire [31:0] Seg_updatedbckgndlayerY;

reg [63:0] Updated_BMU_32to64_r;
wire [63:0] Updated_BMU_32to64_ws;
wire [31:0] Seg_updatedbckgndlayerU;

reg [63:0] Updated_BMV_32to64_r;
wire [63:0] Updated_BMV_32to64_ws;
wire [31:0] Seg_updatedbckgndlayerV;

reg [63:0] Updated_BMW_32to64_r;
wire [63:0] Updated_BMW_32to64_ws;
wire [31:0] Seg_updatedbckgndlayerW;

reg [63:0] Mask_1to64_r;
wire  [63:0] Mask_1to64_ws;

wire Seg_mask;

wire [8:0] RSPE_minmax0_min_out ;
wire [8:0] RSPE_minmax0_max_out ;
wire [4:0] RSPE_minmax0_which_min_out;
wire [4:0] RSPE_minmax0_which_max_out;

reg [2:0] Count_LineSegmentNum_r;
wire [2:0] Count_LineSegmentNum_ws;

wire RSPE_minmax0_enable_w;

/******************************************************************************************************************************/                                
/**************************************            Input Stage                *************************************************/
/******************************************************************************************************************************/                                
//wire gclk = clk & controller_enable;
//wire sclk = clk & seg_enable_i;

assign Seg_DataIn_ws = (seg_stall)? Seg_DataIn_r : Seg_DataIn_i;
assign Seg_DataInReady_ws = (seg_stall)? Seg_DataInReady_r : Seg_DataInReady_i;

always@(posedge clk or posedge reset)
begin
      if(reset)
      begin
         Seg_DataIn_r <= 64'd0;
         Seg_DataInReady_r <= 1'b0;
      end
      else if(seg_enable_i)
      begin
         Seg_DataIn_r <= Seg_DataIn_ws ;
         Seg_DataInReady_r <= Seg_DataInReady_ws ;
      end
end


/******************************************************************************************************************************/                                
/**************************************            Output Stage                *************************************************/
/******************************************************************************************************************************/                                


assign Seg_DataOut_w = (Mode_i == `SEGMENTATION_MODE)? Seg_DataOut_Sel:
                                                   64'd0;
  
assign Seg_DataOutReady_w = (Mode_i == `SEGMENTATION_MODE)? 1'b1:
                                                   1'b0;
                                                   
assign CCA_1_out = CCA_1_out_r[6:0];                                                   
assign CCA_2_out = CCA_2_out_r[6:0];


assign Seg_DataOut_ws = (seg_stall)? Seg_DataOut_r : Seg_DataOut_w;
assign Seg_DataOutReady_ws = (seg_stall)? Seg_DataOutReady_r : Seg_DataOutReady_w;

always@(posedge clk or posedge reset)
begin
      if(reset)
      begin
         Seg_DataOut_r <= 64'd0;
         Seg_DataOutReady_r <= 1'b0;
      end
      else if(seg_enable_i)
      begin
         Seg_DataOut_r <= Seg_DataOut_ws ;
         Seg_DataOutReady_r <= Seg_DataOutReady_ws ;
      end
end


assign Seg_DataOut_o = Seg_DataOut_r;
assign Seg_DataOutReady_o =Seg_DataOutReady_r;           

   
   
   
   
   
/******************************************************************************************************************************/                                
/**************************************          Central Control Unit         *************************************************/
/******************************************************************************************************************************/                                

/***********************************/
/*****Control when Segmentation*****/
/***********************************/

assign Count_BMYUVW_ADDR_ws =   (seg_stall)?    Count_BMYUVW_ADDR_r:
                                ( (SegState == `SEGSTATE_INPUT_BM_Y) && (Count_BMYUVW_ADDR_r >= 7'd0) && (Count_BMYUVW_ADDR_r < (`BM_ADDR_NUM - 1'b1)) )? Count_BMYUVW_ADDR_r + 1'b1:
                                ( (SegState == `SEGSTATE_INPUT_BM_U) && (Count_BMYUVW_ADDR_r >= 7'd0) && (Count_BMYUVW_ADDR_r < (`BM_ADDR_NUM - 1'b1)) )? Count_BMYUVW_ADDR_r + 1'b1:
                                ( (SegState == `SEGSTATE_INPUT_BM_V) && (Count_BMYUVW_ADDR_r >= 7'd0) && (Count_BMYUVW_ADDR_r < (`BM_ADDR_NUM - 1'b1)) )? Count_BMYUVW_ADDR_r + 1'b1:
                                ( (SegState == `SEGSTATE_INPUT_BM_W) && (Count_BMYUVW_ADDR_r >= 7'd0) && (Count_BMYUVW_ADDR_r < (`BM_ADDR_NUM - 1'b1)) )? Count_BMYUVW_ADDR_r + 1'b1:
                                
                                ( (SegState == `SEGSTATE_OUTPUT_BM_Y) && (Count_BMYUVW_ADDR_r >= 7'd0) && (Count_BMYUVW_ADDR_r < (`BM_ADDR_NUM - 1'b1)) )? Count_BMYUVW_ADDR_r + 1'b1:
                                ( (SegState == `SEGSTATE_OUTPUT_BM_U) && (Count_BMYUVW_ADDR_r >= 7'd0) && (Count_BMYUVW_ADDR_r < (`BM_ADDR_NUM - 1'b1)) )? Count_BMYUVW_ADDR_r + 1'b1:
                                ( (SegState == `SEGSTATE_OUTPUT_BM_V) && (Count_BMYUVW_ADDR_r >= 7'd0) && (Count_BMYUVW_ADDR_r < (`BM_ADDR_NUM - 1'b1)) )? Count_BMYUVW_ADDR_r + 1'b1:
                                ( (SegState == `SEGSTATE_OUTPUT_BM_W) && (Count_BMYUVW_ADDR_r >= 7'd0) && (Count_BMYUVW_ADDR_r < (`BM_ADDR_NUM - 1'b1)) )? Count_BMYUVW_ADDR_r + 1'b1:
                                                                                                                                                                 7'd0;
                                                                                                                  


always@(posedge clk or posedge reset)
begin
      if(reset)
      begin
         Count_BMYUVW_ADDR_r <=  7'd0;
      end
      else if(seg_enable_i)
      begin
         Count_BMYUVW_ADDR_r <= Count_BMYUVW_ADDR_ws;
      end
end             

assign Count_CURYUV_ADDR_ws =   (seg_stall)?    Count_CURYUV_ADDR_r:
                                ( (SegState == `SEGSTATE_INPUT_CUR_Y) && (Count_CURYUV_ADDR_r >= 5'd0) && (Count_CURYUV_ADDR_r < (`CUR_ADDR_NUM - 1'b1)) )? Count_CURYUV_ADDR_r + 1'b1:
                                ( (SegState == `SEGSTATE_INPUT_CUR_U) && (Count_CURYUV_ADDR_r >= 5'd0) && (Count_CURYUV_ADDR_r < (`CUR_ADDR_NUM - 1'b1)) )? Count_CURYUV_ADDR_r + 1'b1:
                                ( (SegState == `SEGSTATE_INPUT_CUR_V) && (Count_CURYUV_ADDR_r >= 5'd0) && (Count_CURYUV_ADDR_r < (`CUR_ADDR_NUM - 1'b1)) )? Count_CURYUV_ADDR_r + 1'b1:
                                                                                                                                                                      5'd0;
always@(posedge clk or posedge reset)
begin
      if(reset)
      begin
         Count_CURYUV_ADDR_r <=  5'd0;
      end
      else if(seg_enable_i)
      begin
         Count_CURYUV_ADDR_r <= Count_CURYUV_ADDR_ws;
      end
end             

assign Count_MASKOUT_ADDR_ws =  (seg_stall)?        Count_MASKOUT_ADDR_r:
                                ( (SegState == `SEGSTATE_OUTPUT_MASK) && (Count_MASKOUT_ADDR_r >= 5'd0) && (Count_MASKOUT_ADDR_r < (`MASK_ADDR_NUM - 1'b1)) )?   Count_MASKOUT_ADDR_r + 1'b1:
                                                                                                                                                                 4'd0;
always@(posedge clk or posedge reset)
begin
      if(reset)
      begin
         Count_MASKOUT_ADDR_r <=  4'd0;
      end
      else if(seg_enable_i)
      begin
         Count_MASKOUT_ADDR_r <= Count_MASKOUT_ADDR_ws;
      end
end


assign pixelidx_ws =    (seg_stall)?   pixelidx_r:
                        (SegState == `SEGSTATE_REST)?                                                    12'd0:
                       ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_5r == (`LINEQUARTER1 - 1'b1))  )?       `LINEQUARTER1:
                       ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_5r == (`LINEQUARTER2 - 1'b1))  )?       `LINEQUARTER2:
                       ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_5r == (`LINEQUARTER3 - 1'b1))  )?       `LINEQUARTER3:
                       ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_5r == (`LINEQUARTER4 - 1'b1))  )?               12'd0:
                       
                       ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_r == (`LINEQUARTER1 - 1'b1))  )?        pixelidx_r:
                       ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_r == (`LINEQUARTER2 - 1'b1))  )?        pixelidx_r:
                       ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_r == (`LINEQUARTER3 - 1'b1))  )?        pixelidx_r:
                       ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_r == (`LINEQUARTER4 - 1'b1))  )?        pixelidx_r:  
                         
                       (SegState == `SEGSTATE_PROCESSING)?                                                   pixelidx_r + 1'b1:
                                                                                                                    pixelidx_r;
                                                                                                                    
                                                
                        //(SegState == `SEGSTATE_REST)?      12'd0:
                        //( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_r >= 12'd0        ) && (pixelidx_r < `LINEQUARTER1)  )?       pixelidx_r + 1'b1:
                        //( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_r >= `LINEQUARTER1) && (pixelidx_r < `LINEQUARTER2)  )?       pixelidx_r + 1'b1:
                        //( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_r >= `LINEQUARTER2) && (pixelidx_r < `LINEQUARTER3)  )?       pixelidx_r + 1'b1:
                        //( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_r >= `LINEQUARTER3) && (pixelidx_r < `LINEQUARTER4)  )?     pixelidx_r + 1'b1:
                        //                                                                                                              pixelidx_r;     
                       
                                                                                                                    
                                                                                                                    
assign lineidx_ws =    (seg_stall)?   lineidx_r:
                ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_5r == (`LINEQUARTER4 - 1'b1))  )?     lineidx_r + 1'b1:
                (SegState == `SEGSTATE_REST)?                                                            12'd0:
                                                                                                        lineidx_r;
assign pixelidx_1ws = (seg_stall)? pixelidx_1r :pixelidx_r;
assign pixelidx_2ws = (seg_stall)? pixelidx_2r :pixelidx_1r;
assign pixelidx_3ws = (seg_stall)? pixelidx_3r :pixelidx_2r;
assign pixelidx_4ws = (seg_stall)? pixelidx_4r :pixelidx_3r;
assign pixelidx_5ws = (seg_stall)? pixelidx_5r :pixelidx_4r;


assign pixelidx_Quarter_ws =  (seg_stall)?   pixelidx_Quarter_r:
                                ((SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r >= 12'd0) && (pixelidx_Quarter_r < (`LINEQUARTER1-1'b1))) ?   pixelidx_Quarter_r + 1'b1:
                                                                         12'd0;

assign pixelidx_Quarter_1ws = (seg_stall)? pixelidx_Quarter_1r :pixelidx_Quarter_r;
assign pixelidx_Quarter_2ws = (seg_stall)? pixelidx_Quarter_2r :pixelidx_Quarter_1r;
assign pixelidx_Quarter_3ws = (seg_stall)? pixelidx_Quarter_3r :pixelidx_Quarter_2r;
assign pixelidx_Quarter_4ws = (seg_stall)? pixelidx_Quarter_4r :pixelidx_Quarter_3r;
assign pixelidx_Quarter_5ws = (seg_stall)? pixelidx_Quarter_5r :pixelidx_Quarter_4r;

always@(posedge clk or posedge reset)
begin
      if(reset)
      begin
         lineidx_r <= 12'd0;
         pixelidx_r <= 12'd0;   
         pixelidx_1r <= 12'd0;                            
         pixelidx_2r <= 12'd0;
         pixelidx_3r <= 12'd0;
         pixelidx_4r <= 12'd0;    
         pixelidx_5r <= 12'd0;
         
         pixelidx_Quarter_r <= 12'd0;   
         pixelidx_Quarter_1r <= 12'd0;                            
         pixelidx_Quarter_2r <= 12'd0;
         pixelidx_Quarter_3r <= 12'd0;
         pixelidx_Quarter_4r <= 12'd0;    
         pixelidx_Quarter_5r <= 12'd0;                     

      end
      else if(seg_enable_i)
      begin
         lineidx_r <= lineidx_ws ;
         pixelidx_r <=  pixelidx_ws;
         pixelidx_1r <=  pixelidx_1ws;
         pixelidx_2r <=  pixelidx_2ws;
         pixelidx_3r <=  pixelidx_3ws;
         pixelidx_4r <=  pixelidx_4ws;
         pixelidx_5r <=  pixelidx_5ws;
         
         pixelidx_Quarter_r <=   pixelidx_Quarter_ws;
         pixelidx_Quarter_1r <=  pixelidx_Quarter_1ws;
         pixelidx_Quarter_2r <=  pixelidx_Quarter_2ws;
         pixelidx_Quarter_3r <=  pixelidx_Quarter_3ws;
         pixelidx_Quarter_4r <=  pixelidx_Quarter_4ws;
         pixelidx_Quarter_5r <=  pixelidx_Quarter_5ws;
      end
end


assign Count_LineSegmentNum_ws = (seg_stall)?   Count_LineSegmentNum_r:
				 (SegState == `SEGSTATE_REST)? 3'd0:
				 ((SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r == (`LINEQUARTER1-1'b1))) ?  Count_LineSegmentNum_r + 1'b1:
				 (SegState == `SEGSTATE_OUTPUT_MASK)?     3'd0:
				 					 Count_LineSegmentNum_r;
				 					 
always@(posedge clk or posedge reset)
begin
      if(reset)
      begin
         Count_LineSegmentNum_r <=  3'd0;
      end
      else if(seg_enable_i)
      begin
         Count_LineSegmentNum_r <= Count_LineSegmentNum_ws;
      end
end
				 
assign SegNextState_ws = (seg_stall)?   SegState:
                         ( (SegState == `SEGSTATE_REST)         && (Mode_i == `SEGMENTATION_MODE )                 )?   `SEGSTATE_INPUT_BM_Y:
                         ( (SegState == `SEGSTATE_INPUT_BM_Y)   && (Count_BMYUVW_ADDR_r == (`BM_ADDR_NUM - 1'b1))  )?   `SEGSTATE_INPUT_BM_U:
                         ( (SegState == `SEGSTATE_INPUT_BM_U)   && (Count_BMYUVW_ADDR_r == (`BM_ADDR_NUM - 1'b1))  )?   `SEGSTATE_INPUT_BM_V:
                         ( (SegState == `SEGSTATE_INPUT_BM_V)   && (Count_BMYUVW_ADDR_r == (`BM_ADDR_NUM - 1'b1))  )?   `SEGSTATE_INPUT_BM_W:
                         ( (SegState == `SEGSTATE_INPUT_BM_W)   && (Count_BMYUVW_ADDR_r == (`BM_ADDR_NUM - 1'b1))  )?   `SEGSTATE_INPUT_CUR_Y:
                         ( (SegState == `SEGSTATE_INPUT_CUR_Y)  && (Count_CURYUV_ADDR_r == (`CUR_ADDR_NUM - 1'b1)) )?   `SEGSTATE_INPUT_CUR_U:
                         ( (SegState == `SEGSTATE_INPUT_CUR_U)  && (Count_CURYUV_ADDR_r == (`CUR_ADDR_NUM - 1'b1)) )?   `SEGSTATE_INPUT_CUR_V:
                         ( (SegState == `SEGSTATE_INPUT_CUR_V)  && (Count_CURYUV_ADDR_r == (`CUR_ADDR_NUM - 1'b1)) )?   `SEGSTATE_PROCESSING:
                         ( (SegState == `SEGSTATE_PROCESSING)   && (pixelidx_Quarter_5r == (`LINEQUARTER1-1'b1))   )?   `SEGSTATE_OUTPUT_BM_Y:
                         ( (SegState == `SEGSTATE_OUTPUT_BM_Y)  && (Count_BMYUVW_ADDR_r == (`BM_ADDR_NUM - 1'b1)) )?    `SEGSTATE_OUTPUT_BM_U:
                         ( (SegState == `SEGSTATE_OUTPUT_BM_U)  && (Count_BMYUVW_ADDR_r == (`BM_ADDR_NUM - 1'b1)) )?    `SEGSTATE_OUTPUT_BM_V:
                         ( (SegState == `SEGSTATE_OUTPUT_BM_V)  && (Count_BMYUVW_ADDR_r == (`BM_ADDR_NUM - 1'b1)) )?    `SEGSTATE_OUTPUT_BM_W:
                         ( (SegState == `SEGSTATE_OUTPUT_BM_W)  && (Count_BMYUVW_ADDR_r == (`BM_ADDR_NUM - 1'b1)) && (Count_LineSegmentNum_r == 3'd4))?  `SEGSTATE_OUTPUT_MASK:
                         ( (SegState == `SEGSTATE_OUTPUT_BM_W)  && (Count_BMYUVW_ADDR_r == (`BM_ADDR_NUM - 1'b1)) )? `SEGSTATE_INPUT_BM_Y:
                         ( (SegState == `SEGSTATE_OUTPUT_MASK)  && (Count_MASKOUT_ADDR_r == (`MASK_ADDR_NUM - 1'b1)) && (lineidx_r == (`FRAME_HEIGHT - 1'b1)))? `SEGSTATE_REST:   
                         ( (SegState == `SEGSTATE_OUTPUT_MASK)  && (Count_MASKOUT_ADDR_r == (`MASK_ADDR_NUM - 1'b1)) )?  `SEGSTATE_INPUT_BM_Y:
                                                                                                                          SegState;




always@(posedge clk or posedge reset)
begin
      if(reset)
      begin
         SegState <=  4'd0;
      end
      else if(seg_enable_i)
      begin
         SegState <= SegNextState_ws;
      end
end


assign CountBMYUVWSubAddrNumIn1Elem  =    Count_BMYUVW_ADDR_r - `ADDRNUMin1ELEMENT;
assign CountBMYUVWSubAddrNumIn2Elem  =    Count_BMYUVW_ADDR_r - `ADDRNUMin2ELEMENT;
assign CountBMYUVWSubAddrNumIn3Elem  =    Count_BMYUVW_ADDR_r - `ADDRNUMin3ELEMENT;
assign CountBMYUVWSubAddrNumIn4Elem  =    Count_BMYUVW_ADDR_r - `ADDRNUMin4ELEMENT;
assign CountBMYUVWSubAddrNumIn5Elem  =    Count_BMYUVW_ADDR_r - `ADDRNUMin5ELEMENT;
assign CountBMYUVWSubAddrNumIn6Elem  =    Count_BMYUVW_ADDR_r - `ADDRNUMin6ELEMENT;
assign CountBMYUVWSubAddrNumIn7Elem  =    Count_BMYUVW_ADDR_r - `ADDRNUMin7ELEMENT;

assign CountCURYUVSubAddrNumIn1Elem  =    {2'd0, Count_CURYUV_ADDR_r} - `ADDRNUMin1ELEMENT;

assign pixelidxQuarter5r12b		     = pixelidx_Quarter_5r >> 1 ;
assign pixelidxQuarter5rSubPixelNumin1ElemBM = (pixelidx_Quarter_5r - `PIXELNUMin1ELEMENT_BM) >> 1;
assign pixelidxQuarter5rSubPixelNumin2ElemBM = (pixelidx_Quarter_5r - `PIXELNUMin2ELEMENT_BM) >> 1;
assign pixelidxQuarter5rSubPixelNumin3ElemBM = (pixelidx_Quarter_5r - `PIXELNUMin3ELEMENT_BM) >> 1;
assign pixelidxQuarter5rSubPixelNumin4ElemBM = (pixelidx_Quarter_5r - `PIXELNUMin4ELEMENT_BM) >> 1;
assign pixelidxQuarter5rSubPixelNumin5ElemBM = (pixelidx_Quarter_5r - `PIXELNUMin5ELEMENT_BM) >> 1;
assign pixelidxQuarter5rSubPixelNumin6ElemBM = (pixelidx_Quarter_5r - `PIXELNUMin6ELEMENT_BM) >> 1;
assign pixelidxQuarter5rSubPixelNumin7ElemBM = (pixelidx_Quarter_5r - `PIXELNUMin7ELEMENT_BM) >> 1;

assign pixelidxQuarterr12b		     = pixelidx_Quarter_r >> 1 ;
assign pixelidxQuarterrSubPixelNuminlElemBM = (pixelidx_Quarter_r - `PIXELNUMin1ELEMENT_BM) >> 1;
assign pixelidxQuarterrSubPixelNumin2ElemBM = (pixelidx_Quarter_r - `PIXELNUMin2ELEMENT_BM) >> 1;
assign pixelidxQuarterrSubPixelNumin3ElemBM = (pixelidx_Quarter_r - `PIXELNUMin3ELEMENT_BM) >> 1;
assign pixelidxQuarterrSubPixelNumin4ElemBM = (pixelidx_Quarter_r - `PIXELNUMin4ELEMENT_BM) >> 1;
assign pixelidxQuarterrSubPixelNumin5ElemBM = (pixelidx_Quarter_r - `PIXELNUMin5ELEMENT_BM) >> 1;
assign pixelidxQuarterrSubPixelNumin6ElemBM = (pixelidx_Quarter_r - `PIXELNUMin6ELEMENT_BM) >> 1;
assign pixelidxQuarterrSubPixelNumin7ElemBM = (pixelidx_Quarter_r - `PIXELNUMin7ELEMENT_BM) >> 1;




assign pixelidxQuarterr12b3sh =   pixelidx_Quarter_r  >> 3;
assign pixelidxQuarterrSubPixelNumin1ElemCUR = (pixelidx_Quarter_r - `PIXELNUMin1ELEMENT_CUR) >> 3;

assign pixelidx5r6sh = pixelidx_5r >> 6;

always@(*)
begin
         case(SegState) 
         `SEGSTATE_REST:
         begin
                
                //Buffer for Background Model Y
                BMY_IObuffer_A00_w              =        4'd0           ;
                BMY_IObuffer_A01_w              =        4'd0           ; 
                BMY_IObuffer_A02_w              =        4'd0           ; 
                BMY_IObuffer_A03_w              =        4'd0           ; 
                BMY_IObuffer_A04_w              =        4'd0           ; 
                BMY_IObuffer_A05_w              =        4'd0           ; 
                BMY_IObuffer_A06_w              =        4'd0           ;           
                BMY_IObuffer_A07_w              =        4'd0           ; 
                BMY_IObuffer_DIA00_w            =        64'd0          ; 
                BMY_IObuffer_DIA01_w            =        64'd0          ; 
                BMY_IObuffer_DIA02_w            =        64'd0          ; 
                BMY_IObuffer_DIA03_w            =        64'd0          ; 
                BMY_IObuffer_DIA04_w            =        64'd0          ; 
                BMY_IObuffer_DIA05_w            =        64'd0          ; 
                BMY_IObuffer_DIA06_w            =        64'd0          ; 
                BMY_IObuffer_DIA07_w            =        64'd0          ; 
                BMY_IObuffer_WEAN_00_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_01_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_02_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_03_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_04_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_05_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_06_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_07_w          =        1'b1           ;     
                BMY_IObuffer_OEA_00_w           =        1'b0           ;              
                BMY_IObuffer_OEA_01_w           =        1'b0           ;              
                BMY_IObuffer_OEA_02_w           =        1'b0           ;              
                BMY_IObuffer_OEA_03_w           =        1'b0           ;              
                BMY_IObuffer_OEA_04_w           =        1'b0           ;              
                BMY_IObuffer_OEA_05_w           =        1'b0           ;              
                BMY_IObuffer_OEA_06_w           =        1'b0           ;              
                BMY_IObuffer_OEA_07_w           =        1'b0           ;  
                BMY_IObuffer_choose_reg_A_00_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_01_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_02_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_03_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_04_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_05_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_06_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_07_w  =        1'b0           ;  
                
                BMY_IObuffer_B00_w              =        4'd0           ;
                BMY_IObuffer_B01_w              =        4'd0           ;
                BMY_IObuffer_B02_w              =        4'd0           ;
                BMY_IObuffer_B03_w              =        4'd0           ;
                BMY_IObuffer_B04_w              =        4'd0           ;
                BMY_IObuffer_B05_w              =        4'd0           ;
                BMY_IObuffer_B06_w              =        4'd0           ;
                BMY_IObuffer_B07_w              =        4'd0           ;
                BMY_IObuffer_DIB00_w            =        64'd0          ;
                BMY_IObuffer_DIB01_w            =        64'd0          ;
                BMY_IObuffer_DIB02_w            =        64'd0          ;
                BMY_IObuffer_DIB03_w            =        64'd0          ;
                BMY_IObuffer_DIB04_w            =        64'd0          ;
                BMY_IObuffer_DIB05_w            =        64'd0          ;
                BMY_IObuffer_DIB06_w            =        64'd0          ;
                BMY_IObuffer_DIB07_w            =        64'd0          ;
                BMY_IObuffer_WEBN_00_w          =        1'b1           ;
                BMY_IObuffer_WEBN_01_w          =        1'b1           ;
                BMY_IObuffer_WEBN_02_w          =        1'b1           ;
                BMY_IObuffer_WEBN_03_w          =        1'b1           ;
                BMY_IObuffer_WEBN_04_w          =        1'b1           ;
                BMY_IObuffer_WEBN_05_w          =        1'b1           ;
                BMY_IObuffer_WEBN_06_w          =        1'b1           ;
                BMY_IObuffer_WEBN_07_w          =        1'b1           ;
                BMY_IObuffer_OEB_00_w           =        1'b0           ;
                BMY_IObuffer_OEB_01_w           =        1'b0           ;
                BMY_IObuffer_OEB_02_w           =        1'b0           ;
                BMY_IObuffer_OEB_03_w           =        1'b0           ;
                BMY_IObuffer_OEB_04_w           =        1'b0           ;
                BMY_IObuffer_OEB_05_w           =        1'b0           ;
                BMY_IObuffer_OEB_06_w           =        1'b0           ;
                BMY_IObuffer_OEB_07_w           =        1'b0           ;
                BMY_IObuffer_choose_reg_B_00_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_01_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_02_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_03_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_04_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_05_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_06_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_07_w  =        1'b0           ;
                                                
                
                
                         
                //Buffer for Background Model U                         
                BMU_IObuffer_A08_w              =        4'd0           ;
                BMU_IObuffer_A09_w              =        4'd0           ;
                BMU_IObuffer_A10_w              =        4'd0           ;
                BMU_IObuffer_A11_w              =        4'd0           ;
                BMU_IObuffer_A12_w              =        4'd0           ;
                BMU_IObuffer_A13_w              =        4'd0           ;
                BMU_IObuffer_A14_w              =        4'd0           ;
                BMU_IObuffer_A15_w              =        4'd0           ;
                BMU_IObuffer_DIA08_w            =        64'd0          ;
                BMU_IObuffer_DIA09_w            =        64'd0          ;
                BMU_IObuffer_DIA10_w            =        64'd0          ;
                BMU_IObuffer_DIA11_w            =        64'd0          ;
                BMU_IObuffer_DIA12_w            =        64'd0          ;
                BMU_IObuffer_DIA13_w            =        64'd0          ;
                BMU_IObuffer_DIA14_w            =        64'd0          ;
                BMU_IObuffer_DIA15_w            =        64'd0          ;
                BMU_IObuffer_WEAN_08_w          =        1'b1           ;
                BMU_IObuffer_WEAN_09_w          =        1'b1           ;
                BMU_IObuffer_WEAN_10_w          =        1'b1           ;
                BMU_IObuffer_WEAN_11_w          =        1'b1           ;
                BMU_IObuffer_WEAN_12_w          =        1'b1           ;
                BMU_IObuffer_WEAN_13_w          =        1'b1           ;
                BMU_IObuffer_WEAN_14_w          =        1'b1           ;
                BMU_IObuffer_WEAN_15_w          =        1'b1           ;
                BMU_IObuffer_OEA_08_w           =        1'b0           ;
                BMU_IObuffer_OEA_09_w           =        1'b0           ;
                BMU_IObuffer_OEA_10_w           =        1'b0           ;
                BMU_IObuffer_OEA_11_w           =        1'b0           ;
                BMU_IObuffer_OEA_12_w           =        1'b0           ;
                BMU_IObuffer_OEA_13_w           =        1'b0           ;
                BMU_IObuffer_OEA_14_w           =        1'b0           ;
                BMU_IObuffer_OEA_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_A_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_15_w  =        1'b0           ;
                                                
                                                
                BMU_IObuffer_B08_w              =        4'd0           ;
                BMU_IObuffer_B09_w              =        4'd0           ;
                BMU_IObuffer_B10_w              =        4'd0           ;
                BMU_IObuffer_B11_w              =        4'd0           ;
                BMU_IObuffer_B12_w              =        4'd0           ;
                BMU_IObuffer_B13_w              =        4'd0           ;
                BMU_IObuffer_B14_w              =        4'd0           ;
                BMU_IObuffer_B15_w              =        4'd0           ;
                BMU_IObuffer_DIB08_w            =        64'd0          ;
                BMU_IObuffer_DIB09_w            =        64'd0          ;
                BMU_IObuffer_DIB10_w            =        64'd0          ;
                BMU_IObuffer_DIB11_w            =        64'd0          ;
                BMU_IObuffer_DIB12_w            =        64'd0          ;
                BMU_IObuffer_DIB13_w            =        64'd0          ;
                BMU_IObuffer_DIB14_w            =        64'd0          ;
                BMU_IObuffer_DIB15_w            =        64'd0          ;
                BMU_IObuffer_WEBN_08_w          =        1'b1           ;
                BMU_IObuffer_WEBN_09_w          =        1'b1           ;
                BMU_IObuffer_WEBN_10_w          =        1'b1           ;
                BMU_IObuffer_WEBN_11_w          =        1'b1           ;
                BMU_IObuffer_WEBN_12_w          =        1'b1           ;
                BMU_IObuffer_WEBN_13_w          =        1'b1           ;
                BMU_IObuffer_WEBN_14_w          =        1'b1           ;
                BMU_IObuffer_WEBN_15_w          =        1'b1           ;
                BMU_IObuffer_OEB_08_w           =        1'b0           ;
                BMU_IObuffer_OEB_09_w           =        1'b0           ;
                BMU_IObuffer_OEB_10_w           =        1'b0           ;
                BMU_IObuffer_OEB_11_w           =        1'b0           ;
                BMU_IObuffer_OEB_12_w           =        1'b0           ;
                BMU_IObuffer_OEB_13_w           =        1'b0           ;
                BMU_IObuffer_OEB_14_w           =        1'b0           ;
                BMU_IObuffer_OEB_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_B_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_15_w  =        1'b0           ;
                                             
                
                
                //Buffer for Background Model V
                BMV_IObuffer_A16_w              =        4'd0           ;
                BMV_IObuffer_A17_w              =        4'd0           ;
                BMV_IObuffer_A18_w              =        4'd0           ;
                BMV_IObuffer_A19_w              =        4'd0           ;
                BMV_IObuffer_A20_w              =        4'd0           ;
                BMV_IObuffer_A21_w              =        4'd0           ;
                BMV_IObuffer_A22_w              =        4'd0           ;
                BMV_IObuffer_A23_w              =        4'd0           ;
                BMV_IObuffer_DIA16_w            =        64'd0          ;
                BMV_IObuffer_DIA17_w            =        64'd0          ;
                BMV_IObuffer_DIA18_w            =        64'd0          ;
                BMV_IObuffer_DIA19_w            =        64'd0          ;
                BMV_IObuffer_DIA20_w            =        64'd0          ;
                BMV_IObuffer_DIA21_w            =        64'd0          ;
                BMV_IObuffer_DIA22_w            =        64'd0          ;
                BMV_IObuffer_DIA23_w            =        64'd0          ;
                BMV_IObuffer_WEAN_16_w          =        1'b1           ;
                BMV_IObuffer_WEAN_17_w          =        1'b1           ;
                BMV_IObuffer_WEAN_18_w          =        1'b1           ;
                BMV_IObuffer_WEAN_19_w          =        1'b1           ;
                BMV_IObuffer_WEAN_20_w          =        1'b1           ;
                BMV_IObuffer_WEAN_21_w          =        1'b1           ;
                BMV_IObuffer_WEAN_22_w          =        1'b1           ;
                BMV_IObuffer_WEAN_23_w          =        1'b1           ;
                BMV_IObuffer_OEA_16_w           =        1'b0           ;
                BMV_IObuffer_OEA_17_w           =        1'b0           ;
                BMV_IObuffer_OEA_18_w           =        1'b0           ;
                BMV_IObuffer_OEA_19_w           =        1'b0           ;
                BMV_IObuffer_OEA_20_w           =        1'b0           ;
                BMV_IObuffer_OEA_21_w           =        1'b0           ;
                BMV_IObuffer_OEA_22_w           =        1'b0           ;
                BMV_IObuffer_OEA_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_A_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_23_w  =        1'b0           ;
                              
                BMV_IObuffer_B16_w              =        4'd0           ;
                BMV_IObuffer_B17_w              =        4'd0           ;
                BMV_IObuffer_B18_w              =        4'd0           ;
                BMV_IObuffer_B19_w              =        4'd0           ;
                BMV_IObuffer_B20_w              =        4'd0           ;
                BMV_IObuffer_B21_w              =        4'd0           ;
                BMV_IObuffer_B22_w              =        4'd0           ;
                BMV_IObuffer_B23_w              =        4'd0           ;
                BMV_IObuffer_DIB16_w            =        64'd0          ;
                BMV_IObuffer_DIB17_w            =        64'd0          ;
                BMV_IObuffer_DIB18_w            =        64'd0          ;
                BMV_IObuffer_DIB19_w            =        64'd0          ;
                BMV_IObuffer_DIB20_w            =        64'd0          ;
                BMV_IObuffer_DIB21_w            =        64'd0          ;
                BMV_IObuffer_DIB22_w            =        64'd0          ;
                BMV_IObuffer_DIB23_w            =        64'd0          ;
                BMV_IObuffer_WEBN_16_w          =        1'b1           ;
                BMV_IObuffer_WEBN_17_w          =        1'b1           ;
                BMV_IObuffer_WEBN_18_w          =        1'b1           ;
                BMV_IObuffer_WEBN_19_w          =        1'b1           ;
                BMV_IObuffer_WEBN_20_w          =        1'b1           ;
                BMV_IObuffer_WEBN_21_w          =        1'b1           ;
                BMV_IObuffer_WEBN_22_w          =        1'b1           ;
                BMV_IObuffer_WEBN_23_w          =        1'b1           ;
                BMV_IObuffer_OEB_16_w           =        1'b0           ;
                BMV_IObuffer_OEB_17_w           =        1'b0           ;
                BMV_IObuffer_OEB_18_w           =        1'b0           ;
                BMV_IObuffer_OEB_19_w           =        1'b0           ;
                BMV_IObuffer_OEB_20_w           =        1'b0           ;
                BMV_IObuffer_OEB_21_w           =        1'b0           ;
                BMV_IObuffer_OEB_22_w           =        1'b0           ;
                BMV_IObuffer_OEB_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_B_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_23_w  =        1'b0           ;
                                               
                
                
                
                //Buffer for Background Model W
                BMW_IObuffer_A24_w              =        4'd0           ;
                BMW_IObuffer_A25_w              =        4'd0           ;
                BMW_IObuffer_A26_w              =        4'd0           ;
                BMW_IObuffer_A27_w              =        4'd0           ;
                BMW_IObuffer_A28_w              =        4'd0           ;
                BMW_IObuffer_A29_w              =        4'd0           ;
                BMW_IObuffer_A30_w              =        4'd0           ;
                BMW_IObuffer_A31_w              =        4'd0           ;
                BMW_IObuffer_DIA24_w            =        64'd0          ;                                        
                BMW_IObuffer_DIA25_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA26_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA27_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA28_w            =        64'd0          ;                           
                BMW_IObuffer_DIA29_w            =        64'd0          ;                               
                BMW_IObuffer_DIA30_w            =        64'd0          ;                               
                BMW_IObuffer_DIA31_w            =        64'd0          ;
                BMW_IObuffer_WEAN_24_w          =        1'b1           ;
                BMW_IObuffer_WEAN_25_w          =        1'b1           ;
                BMW_IObuffer_WEAN_26_w          =        1'b1           ;
                BMW_IObuffer_WEAN_27_w          =        1'b1           ;
                BMW_IObuffer_WEAN_28_w          =        1'b1           ;
                BMW_IObuffer_WEAN_29_w          =        1'b1           ;
                BMW_IObuffer_WEAN_30_w          =        1'b1           ;
                BMW_IObuffer_WEAN_31_w          =        1'b1           ;
                BMW_IObuffer_OEA_24_w           =        1'b0           ;
                BMW_IObuffer_OEA_25_w           =        1'b0           ;
                BMW_IObuffer_OEA_26_w           =        1'b0           ;
                BMW_IObuffer_OEA_27_w           =        1'b0           ;
                BMW_IObuffer_OEA_28_w           =        1'b0           ;
                BMW_IObuffer_OEA_29_w           =        1'b0           ;
                BMW_IObuffer_OEA_30_w           =        1'b0           ;
                BMW_IObuffer_OEA_31_w           =        1'b0           ;
                BMW_IObuffer_choose_reg_A_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_31_w  =        1'b0           ;
                
                BMW_IObuffer_B24_w              =        4'd0           ;
                BMW_IObuffer_B25_w              =        4'd0           ;
                BMW_IObuffer_B26_w              =        4'd0           ;
                BMW_IObuffer_B27_w              =        4'd0           ;
                BMW_IObuffer_B28_w              =        4'd0           ;       
                BMW_IObuffer_B29_w              =        4'd0           ;                 
                BMW_IObuffer_B30_w              =        4'd0           ;                 
                BMW_IObuffer_B31_w              =        4'd0           ;
                BMW_IObuffer_DIB24_w            =        64'd0          ;
                BMW_IObuffer_DIB25_w            =        64'd0          ;
                BMW_IObuffer_DIB26_w            =        64'd0          ;                                                                    
                BMW_IObuffer_DIB27_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB28_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB29_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB30_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB31_w            =        64'd0          ;  
                BMW_IObuffer_WEBN_24_w          =        1'b1           ;
                BMW_IObuffer_WEBN_25_w          =        1'b1           ;
                BMW_IObuffer_WEBN_26_w          =        1'b1           ;
                BMW_IObuffer_WEBN_27_w          =        1'b1           ;
                BMW_IObuffer_WEBN_28_w          =        1'b1           ;
                BMW_IObuffer_WEBN_29_w          =        1'b1           ;
                BMW_IObuffer_WEBN_30_w          =        1'b1           ;
                BMW_IObuffer_WEBN_31_w          =        1'b1           ;
                BMW_IObuffer_OEB_24_w           =        1'b0           ;
                BMW_IObuffer_OEB_25_w           =        1'b0           ;
                BMW_IObuffer_OEB_26_w           =        1'b0           ;
                BMW_IObuffer_OEB_27_w           =        1'b0           ;
                BMW_IObuffer_OEB_28_w           =        1'b0           ;
                BMW_IObuffer_OEB_29_w           =        1'b0           ;
                BMW_IObuffer_OEB_30_w           =        1'b0           ;
                BMW_IObuffer_OEB_31_w           =        1'b0           ;  
                BMW_IObuffer_choose_reg_B_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_31_w  =        1'b0           ;
                                                 
                
                
                
                //Buffer for Curent frame Y                        
                CurY_Ibuffer_A32_w              =        4'd0           ;                       
                CurY_Ibuffer_A33_w              =        4'd0           ; 
                CurY_Ibuffer_DIA32_w            =        64'd0          ;                                                             
                CurY_Ibuffer_DIA33_w            =        64'd0          ;  
                CurY_Ibuffer_WEAN_32_w          =        1'b1           ;          
                CurY_Ibuffer_WEAN_33_w          =        1'b1           ;          
                CurY_Ibuffer_OEA_32_w           =        1'b0           ;           
                CurY_Ibuffer_OEA_33_w           =        1'b0           ;           
                CurY_Ibuffer_choose_reg_A_32_w  =        1'b0           ;  
                CurY_Ibuffer_choose_reg_A_33_w  =        1'b0           ;  
                
                CurY_Ibuffer_B32_w              =        4'd0           ;                                                  
                CurY_Ibuffer_B33_w              =        4'd0           ;                                                                                                             
                CurY_Ibuffer_DIB32_w            =        64'd0          ;                                                                                                            
                CurY_Ibuffer_DIB33_w            =        64'd0          ;                                    
                CurY_Ibuffer_WEBN_32_w          =        1'b1           ;            
                CurY_Ibuffer_WEBN_33_w          =        1'b1           ;                                  
                CurY_Ibuffer_OEB_32_w           =        1'b0           ;             
                CurY_Ibuffer_OEB_33_w           =        1'b0           ;                                     
                CurY_Ibuffer_choose_reg_B_32_w  =        1'b0           ;    
                CurY_Ibuffer_choose_reg_B_33_w  =        1'b0           ;    

                
                
                //Buffer for Curent frame U                      
                CurU_Ibuffer_A34_w              =        4'd0           ;                         
                CurU_Ibuffer_A35_w              =        4'd0           ;  
                CurU_Ibuffer_DIA34_w            =        64'd0          ;                                                               
                CurU_Ibuffer_DIA35_w            =        64'd0          ;  
                CurU_Ibuffer_WEAN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEAN_35_w          =        1'b1           ;            
                CurU_Ibuffer_OEA_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEA_35_w           =        1'b0           ;             
                CurU_Ibuffer_choose_reg_A_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_A_35_w  =        1'b0           ;    
                
                CurU_Ibuffer_B34_w              =        4'd0           ;                                                  
                CurU_Ibuffer_B35_w              =        4'd0           ;                                                                                                                                 
                CurU_Ibuffer_DIB34_w            =        64'd0          ;                                                                                                            
                CurU_Ibuffer_DIB35_w            =        64'd0          ;                                     
                CurU_Ibuffer_WEBN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEBN_35_w          =        1'b1           ;                                
                CurU_Ibuffer_OEB_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEB_35_w           =        1'b0           ;                                    
                CurU_Ibuffer_choose_reg_B_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_B_35_w  =        1'b0           ;    
 
 
                
                //Buffer for Curent frame V                       
                CurV_Ibuffer_A36_w              =        4'd0           ;                        
                CurV_Ibuffer_A37_w              =        4'd0           ;                        
                CurV_Ibuffer_DIA36_w            =        64'd0          ;                                                               
                CurV_Ibuffer_DIA37_w            =        64'd0          ;    
                CurV_Ibuffer_WEAN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEAN_37_w          =        1'b1           ;            
                CurV_Ibuffer_OEA_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEA_37_w           =        1'b0           ;             
                CurV_Ibuffer_choose_reg_A_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_A_37_w  =        1'b0           ;    
                 
                CurV_Ibuffer_B36_w              =        4'd0           ;                                                                
                CurV_Ibuffer_B37_w              =        4'd0           ;  
                CurV_Ibuffer_DIB36_w            =        64'd0          ;                                                                                                             
                CurV_Ibuffer_DIB37_w            =        64'd0          ;    
                CurV_Ibuffer_WEBN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEBN_37_w          =        1'b1           ;                                    
                CurV_Ibuffer_OEB_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEB_37_w           =        1'b0           ;                                  
                CurV_Ibuffer_choose_reg_B_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_B_37_w  =        1'b0           ;    
 
                
                
                //Buffer for Mask
                Mask_Obuffer_A38_w              =        4'd0           ;                       
                Mask_Obuffer_DIA38_w            =        64'd0          ;  
                Mask_Obuffer_WEAN_38_w          =        1'b1           ;                  
                Mask_Obuffer_OEA_38_w           =        1'b0           ;                   
                Mask_Obuffer_choose_reg_A_38_w  =        1'b0           ;
                                                 
                Mask_Obuffer_B38_w              =        4'd0           ;                                                               
                Mask_Obuffer_DIB38_w            =        64'd0          ;                            
                Mask_Obuffer_WEBN_38_w          =        1'b1           ;                                            
                Mask_Obuffer_OEB_38_w           =        1'b0           ;                                  
                Mask_Obuffer_choose_reg_B_38_w  =        1'b0           ;           
                                                         
                   
                                  
                                            

            end   
            
            
            `SEGSTATE_INPUT_BM_Y:
            begin
                                
                //Buffer for Background Model Y
                 if( (Count_BMYUVW_ADDR_r >= 7'd0) && (Count_BMYUVW_ADDR_r < `ADDRNUMin1ELEMENT) )
                 begin 
                        BMY_IObuffer_A00_w              =        Count_BMYUVW_ADDR_r[3:0];
                        BMY_IObuffer_WEAN_00_w          =        1'b0           ;
                        BMY_IObuffer_OEA_00_w           =        1'b0           ;
                        BMY_IObuffer_choose_reg_A_00_w  =        1'b1           ;       
                 end             
                 else
                 begin
                        BMY_IObuffer_A00_w              =        4'd0           ;
                        BMY_IObuffer_WEAN_00_w          =        1'b1           ;  
                        BMY_IObuffer_OEA_00_w           =        1'b0           ; 
                        BMY_IObuffer_choose_reg_A_00_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin1ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin2ELEMENT) )
                 begin 
                        BMY_IObuffer_A01_w              =        CountBMYUVWSubAddrNumIn1Elem[3:0]               ;
                        BMY_IObuffer_WEAN_01_w          =        1'b0           ;
                        BMY_IObuffer_OEA_01_w           =        1'b0           ;
                        BMY_IObuffer_choose_reg_A_01_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMY_IObuffer_A01_w              =        4'd0           ; 
                        BMY_IObuffer_WEAN_01_w          =        1'b1           ;  
                        BMY_IObuffer_OEA_01_w           =        1'b0           ;    
                        BMY_IObuffer_choose_reg_A_01_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin2ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin3ELEMENT) )
                 begin 
                        BMY_IObuffer_A02_w              =        CountBMYUVWSubAddrNumIn2Elem[3:0]               ;
                        BMY_IObuffer_WEAN_02_w          =        1'b0           ;
                        BMY_IObuffer_OEA_02_w           =        1'b0           ;
                        BMY_IObuffer_choose_reg_A_02_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMY_IObuffer_A02_w              =        4'd0           ; 
                        BMY_IObuffer_WEAN_02_w          =        1'b1           ;    
                        BMY_IObuffer_OEA_02_w           =        1'b0           ;   
                        BMY_IObuffer_choose_reg_A_02_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin3ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin4ELEMENT) )
                 begin 
                        BMY_IObuffer_A03_w              =        CountBMYUVWSubAddrNumIn3Elem[3:0]               ;
                        BMY_IObuffer_WEAN_03_w          =        1'b0           ;
                        BMY_IObuffer_OEA_03_w           =        1'b0           ;
                        BMY_IObuffer_choose_reg_A_03_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMY_IObuffer_A03_w              =        4'd0           ; 
                        BMY_IObuffer_WEAN_03_w          =        1'b1           ;  
                        BMY_IObuffer_OEA_03_w           =        1'b0           ;    
                        BMY_IObuffer_choose_reg_A_03_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin4ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin5ELEMENT) )
                 begin 
                        BMY_IObuffer_A04_w              =        CountBMYUVWSubAddrNumIn4Elem[3:0]               ;
                        BMY_IObuffer_WEAN_04_w          =        1'b0           ;
                        BMY_IObuffer_OEA_04_w           =        1'b0           ;
                        BMY_IObuffer_choose_reg_A_04_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMY_IObuffer_A04_w              =        4'd0           ;
                        BMY_IObuffer_WEAN_04_w          =        1'b1           ; 
                        BMY_IObuffer_OEA_04_w           =        1'b0           ; 
                        BMY_IObuffer_choose_reg_A_04_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin5ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin6ELEMENT) )
                 begin 
                        BMY_IObuffer_A05_w              =        CountBMYUVWSubAddrNumIn5Elem[3:0]               ;
                        BMY_IObuffer_WEAN_05_w          =        1'b0           ;
                        BMY_IObuffer_OEA_05_w           =        1'b0           ;
                        BMY_IObuffer_choose_reg_A_05_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMY_IObuffer_A05_w              =        4'd0           ; 
                        BMY_IObuffer_WEAN_05_w          =        1'b1           ;
                        BMY_IObuffer_OEA_05_w           =        1'b0           ;  
                        BMY_IObuffer_choose_reg_A_05_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin6ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin7ELEMENT) )
                 begin 
                        BMY_IObuffer_A06_w              =        CountBMYUVWSubAddrNumIn6Elem[3:0]               ;
                        BMY_IObuffer_WEAN_06_w          =       1'b0            ;
                        BMY_IObuffer_OEA_06_w           =       1'b0            ;
                        BMY_IObuffer_choose_reg_A_06_w  =       1'b1            ;
                 end             
                 else
                 begin
                        BMY_IObuffer_A06_w              =        4'd0           ; 
                        BMY_IObuffer_WEAN_06_w          =        1'b1           ;
                        BMY_IObuffer_OEA_06_w           =        1'b0           ;              
                        BMY_IObuffer_choose_reg_A_06_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin7ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin8ELEMENT) )
                 begin 
                        BMY_IObuffer_A07_w              =        CountBMYUVWSubAddrNumIn7Elem[3:0]               ;
                        BMY_IObuffer_WEAN_07_w          =        1'b0           ;
                        BMY_IObuffer_OEA_07_w           =        1'b0           ;
                        BMY_IObuffer_choose_reg_A_07_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMY_IObuffer_A07_w              =        4'd0           ;                                    
                        BMY_IObuffer_WEAN_07_w          =        1'b1           ; 
                        BMY_IObuffer_OEA_07_w           =        1'b0           ;              
                        BMY_IObuffer_choose_reg_A_07_w  =        1'b0           ;  
                 end 
                
                                
                BMY_IObuffer_DIA00_w            =        Seg_DataIn_r       ; 
                BMY_IObuffer_DIA01_w            =        Seg_DataIn_r       ; 
                BMY_IObuffer_DIA02_w            =        Seg_DataIn_r       ; 
                BMY_IObuffer_DIA03_w            =        Seg_DataIn_r       ; 
                BMY_IObuffer_DIA04_w            =        Seg_DataIn_r       ; 
                BMY_IObuffer_DIA05_w            =        Seg_DataIn_r       ; 
                BMY_IObuffer_DIA06_w            =        Seg_DataIn_r       ; 
                BMY_IObuffer_DIA07_w            =        Seg_DataIn_r       ; 
                
                BMY_IObuffer_B00_w              =        4'd0           ;
                BMY_IObuffer_B01_w              =        4'd0           ;
                BMY_IObuffer_B02_w              =        4'd0           ;
                BMY_IObuffer_B03_w              =        4'd0           ;
                BMY_IObuffer_B04_w              =        4'd0           ;
                BMY_IObuffer_B05_w              =        4'd0           ;
                BMY_IObuffer_B06_w              =        4'd0           ;
                BMY_IObuffer_B07_w              =        4'd0           ;
                BMY_IObuffer_DIB00_w            =        64'd0          ;
                BMY_IObuffer_DIB01_w            =        64'd0          ;
                BMY_IObuffer_DIB02_w            =        64'd0          ;
                BMY_IObuffer_DIB03_w            =        64'd0          ;
                BMY_IObuffer_DIB04_w            =        64'd0          ;
                BMY_IObuffer_DIB05_w            =        64'd0          ;
                BMY_IObuffer_DIB06_w            =        64'd0          ;
                BMY_IObuffer_DIB07_w            =        64'd0          ;
                BMY_IObuffer_WEBN_00_w          =        1'b1           ;
                BMY_IObuffer_WEBN_01_w          =        1'b1           ;
                BMY_IObuffer_WEBN_02_w          =        1'b1           ;
                BMY_IObuffer_WEBN_03_w          =        1'b1           ;
                BMY_IObuffer_WEBN_04_w          =        1'b1           ;
                BMY_IObuffer_WEBN_05_w          =        1'b1           ;
                BMY_IObuffer_WEBN_06_w          =        1'b1           ;
                BMY_IObuffer_WEBN_07_w          =        1'b1           ;
                BMY_IObuffer_OEB_00_w           =        1'b0           ;
                BMY_IObuffer_OEB_01_w           =        1'b0           ;
                BMY_IObuffer_OEB_02_w           =        1'b0           ;
                BMY_IObuffer_OEB_03_w           =        1'b0           ;
                BMY_IObuffer_OEB_04_w           =        1'b0           ;
                BMY_IObuffer_OEB_05_w           =        1'b0           ;
                BMY_IObuffer_OEB_06_w           =        1'b0           ;
                BMY_IObuffer_OEB_07_w           =        1'b0           ;
                BMY_IObuffer_choose_reg_B_00_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_01_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_02_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_03_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_04_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_05_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_06_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_07_w  =        1'b0           ;
                                                
                
                
                         
                //Buffer for Background Model U                         
                BMU_IObuffer_A08_w              =        4'd0           ;
                BMU_IObuffer_A09_w              =        4'd0           ;
                BMU_IObuffer_A10_w              =        4'd0           ;
                BMU_IObuffer_A11_w              =        4'd0           ;
                BMU_IObuffer_A12_w              =        4'd0           ;
                BMU_IObuffer_A13_w              =        4'd0           ;
                BMU_IObuffer_A14_w              =        4'd0           ;
                BMU_IObuffer_A15_w              =        4'd0           ;
                BMU_IObuffer_DIA08_w            =        64'd0          ;
                BMU_IObuffer_DIA09_w            =        64'd0          ;
                BMU_IObuffer_DIA10_w            =        64'd0          ;
                BMU_IObuffer_DIA11_w            =        64'd0          ;
                BMU_IObuffer_DIA12_w            =        64'd0          ;
                BMU_IObuffer_DIA13_w            =        64'd0          ;
                BMU_IObuffer_DIA14_w            =        64'd0          ;
                BMU_IObuffer_DIA15_w            =        64'd0          ;
                BMU_IObuffer_WEAN_08_w          =        1'b1           ;
                BMU_IObuffer_WEAN_09_w          =        1'b1           ;
                BMU_IObuffer_WEAN_10_w          =        1'b1           ;
                BMU_IObuffer_WEAN_11_w          =        1'b1           ;
                BMU_IObuffer_WEAN_12_w          =        1'b1           ;
                BMU_IObuffer_WEAN_13_w          =        1'b1           ;
                BMU_IObuffer_WEAN_14_w          =        1'b1           ;
                BMU_IObuffer_WEAN_15_w          =        1'b1           ;
                BMU_IObuffer_OEA_08_w           =        1'b0           ;
                BMU_IObuffer_OEA_09_w           =        1'b0           ;
                BMU_IObuffer_OEA_10_w           =        1'b0           ;
                BMU_IObuffer_OEA_11_w           =        1'b0           ;
                BMU_IObuffer_OEA_12_w           =        1'b0           ;
                BMU_IObuffer_OEA_13_w           =        1'b0           ;
                BMU_IObuffer_OEA_14_w           =        1'b0           ;
                BMU_IObuffer_OEA_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_A_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_15_w  =        1'b0           ;
                                                
                                                
                BMU_IObuffer_B08_w              =        4'd0           ;
                BMU_IObuffer_B09_w              =        4'd0           ;
                BMU_IObuffer_B10_w              =        4'd0           ;
                BMU_IObuffer_B11_w              =        4'd0           ;
                BMU_IObuffer_B12_w              =        4'd0           ;
                BMU_IObuffer_B13_w              =        4'd0           ;
                BMU_IObuffer_B14_w              =        4'd0           ;
                BMU_IObuffer_B15_w              =        4'd0           ;
                BMU_IObuffer_DIB08_w            =        64'd0          ;
                BMU_IObuffer_DIB09_w            =        64'd0          ;
                BMU_IObuffer_DIB10_w            =        64'd0          ;
                BMU_IObuffer_DIB11_w            =        64'd0          ;
                BMU_IObuffer_DIB12_w            =        64'd0          ;
                BMU_IObuffer_DIB13_w            =        64'd0          ;
                BMU_IObuffer_DIB14_w            =        64'd0          ;
                BMU_IObuffer_DIB15_w            =        64'd0          ;
                BMU_IObuffer_WEBN_08_w          =        1'b1           ;
                BMU_IObuffer_WEBN_09_w          =        1'b1           ;
                BMU_IObuffer_WEBN_10_w          =        1'b1           ;
                BMU_IObuffer_WEBN_11_w          =        1'b1           ;
                BMU_IObuffer_WEBN_12_w          =        1'b1           ;
                BMU_IObuffer_WEBN_13_w          =        1'b1           ;
                BMU_IObuffer_WEBN_14_w          =        1'b1           ;
                BMU_IObuffer_WEBN_15_w          =        1'b1           ;
                BMU_IObuffer_OEB_08_w           =        1'b0           ;
                BMU_IObuffer_OEB_09_w           =        1'b0           ;
                BMU_IObuffer_OEB_10_w           =        1'b0           ;
                BMU_IObuffer_OEB_11_w           =        1'b0           ;
                BMU_IObuffer_OEB_12_w           =        1'b0           ;
                BMU_IObuffer_OEB_13_w           =        1'b0           ;
                BMU_IObuffer_OEB_14_w           =        1'b0           ;
                BMU_IObuffer_OEB_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_B_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_15_w  =        1'b0           ;
                                             
                
                
                //Buffer for Background Model V
                BMV_IObuffer_A16_w              =        4'd0           ;
                BMV_IObuffer_A17_w              =        4'd0           ;
                BMV_IObuffer_A18_w              =        4'd0           ;
                BMV_IObuffer_A19_w              =        4'd0           ;
                BMV_IObuffer_A20_w              =        4'd0           ;
                BMV_IObuffer_A21_w              =        4'd0           ;
                BMV_IObuffer_A22_w              =        4'd0           ;
                BMV_IObuffer_A23_w              =        4'd0           ;
                BMV_IObuffer_DIA16_w            =        64'd0          ;
                BMV_IObuffer_DIA17_w            =        64'd0          ;
                BMV_IObuffer_DIA18_w            =        64'd0          ;
                BMV_IObuffer_DIA19_w            =        64'd0          ;
                BMV_IObuffer_DIA20_w            =        64'd0          ;
                BMV_IObuffer_DIA21_w            =        64'd0          ;
                BMV_IObuffer_DIA22_w            =        64'd0          ;
                BMV_IObuffer_DIA23_w            =        64'd0          ;
                BMV_IObuffer_WEAN_16_w          =        1'b1           ;
                BMV_IObuffer_WEAN_17_w          =        1'b1           ;
                BMV_IObuffer_WEAN_18_w          =        1'b1           ;
                BMV_IObuffer_WEAN_19_w          =        1'b1           ;
                BMV_IObuffer_WEAN_20_w          =        1'b1           ;
                BMV_IObuffer_WEAN_21_w          =        1'b1           ;
                BMV_IObuffer_WEAN_22_w          =        1'b1           ;
                BMV_IObuffer_WEAN_23_w          =        1'b1           ;
                BMV_IObuffer_OEA_16_w           =        1'b0           ;
                BMV_IObuffer_OEA_17_w           =        1'b0           ;
                BMV_IObuffer_OEA_18_w           =        1'b0           ;
                BMV_IObuffer_OEA_19_w           =        1'b0           ;
                BMV_IObuffer_OEA_20_w           =        1'b0           ;
                BMV_IObuffer_OEA_21_w           =        1'b0           ;
                BMV_IObuffer_OEA_22_w           =        1'b0           ;
                BMV_IObuffer_OEA_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_A_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_23_w  =        1'b0           ;
                              
                BMV_IObuffer_B16_w              =        4'd0           ;
                BMV_IObuffer_B17_w              =        4'd0           ;
                BMV_IObuffer_B18_w              =        4'd0           ;
                BMV_IObuffer_B19_w              =        4'd0           ;
                BMV_IObuffer_B20_w              =        4'd0           ;
                BMV_IObuffer_B21_w              =        4'd0           ;
                BMV_IObuffer_B22_w              =        4'd0           ;
                BMV_IObuffer_B23_w              =        4'd0           ;
                BMV_IObuffer_DIB16_w            =        64'd0          ;
                BMV_IObuffer_DIB17_w            =        64'd0          ;
                BMV_IObuffer_DIB18_w            =        64'd0          ;
                BMV_IObuffer_DIB19_w            =        64'd0          ;
                BMV_IObuffer_DIB20_w            =        64'd0          ;
                BMV_IObuffer_DIB21_w            =        64'd0          ;
                BMV_IObuffer_DIB22_w            =        64'd0          ;
                BMV_IObuffer_DIB23_w            =        64'd0          ;
                BMV_IObuffer_WEBN_16_w          =        1'b1           ;
                BMV_IObuffer_WEBN_17_w          =        1'b1           ;
                BMV_IObuffer_WEBN_18_w          =        1'b1           ;
                BMV_IObuffer_WEBN_19_w          =        1'b1           ;
                BMV_IObuffer_WEBN_20_w          =        1'b1           ;
                BMV_IObuffer_WEBN_21_w          =        1'b1           ;
                BMV_IObuffer_WEBN_22_w          =        1'b1           ;
                BMV_IObuffer_WEBN_23_w          =        1'b1           ;
                BMV_IObuffer_OEB_16_w           =        1'b0           ;
                BMV_IObuffer_OEB_17_w           =        1'b0           ;
                BMV_IObuffer_OEB_18_w           =        1'b0           ;
                BMV_IObuffer_OEB_19_w           =        1'b0           ;
                BMV_IObuffer_OEB_20_w           =        1'b0           ;
                BMV_IObuffer_OEB_21_w           =        1'b0           ;
                BMV_IObuffer_OEB_22_w           =        1'b0           ;
                BMV_IObuffer_OEB_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_B_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_23_w  =        1'b0           ;
                                               
                
                
                
                //Buffer for Background Model W
                BMW_IObuffer_A24_w              =        4'd0           ;
                BMW_IObuffer_A25_w              =        4'd0           ;
                BMW_IObuffer_A26_w              =        4'd0           ;
                BMW_IObuffer_A27_w              =        4'd0           ;
                BMW_IObuffer_A28_w              =        4'd0           ;
                BMW_IObuffer_A29_w              =        4'd0           ;
                BMW_IObuffer_A30_w              =        4'd0           ;
                BMW_IObuffer_A31_w              =        4'd0           ;
                BMW_IObuffer_DIA24_w            =        64'd0          ;                                        
                BMW_IObuffer_DIA25_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA26_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA27_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA28_w            =        64'd0          ;                           
                BMW_IObuffer_DIA29_w            =        64'd0          ;                               
                BMW_IObuffer_DIA30_w            =        64'd0          ;                               
                BMW_IObuffer_DIA31_w            =        64'd0          ;
                BMW_IObuffer_WEAN_24_w          =        1'b1           ;
                BMW_IObuffer_WEAN_25_w          =        1'b1           ;
                BMW_IObuffer_WEAN_26_w          =        1'b1           ;
                BMW_IObuffer_WEAN_27_w          =        1'b1           ;
                BMW_IObuffer_WEAN_28_w          =        1'b1           ;
                BMW_IObuffer_WEAN_29_w          =        1'b1           ;
                BMW_IObuffer_WEAN_30_w          =        1'b1           ;
                BMW_IObuffer_WEAN_31_w          =        1'b1           ;
                BMW_IObuffer_OEA_24_w           =        1'b0           ;
                BMW_IObuffer_OEA_25_w           =        1'b0           ;
                BMW_IObuffer_OEA_26_w           =        1'b0           ;
                BMW_IObuffer_OEA_27_w           =        1'b0           ;
                BMW_IObuffer_OEA_28_w           =        1'b0           ;
                BMW_IObuffer_OEA_29_w           =        1'b0           ;
                BMW_IObuffer_OEA_30_w           =        1'b0           ;
                BMW_IObuffer_OEA_31_w           =        1'b0           ;
                BMW_IObuffer_choose_reg_A_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_31_w  =        1'b0           ;
                
                BMW_IObuffer_B24_w              =        4'd0           ;
                BMW_IObuffer_B25_w              =        4'd0           ;
                BMW_IObuffer_B26_w              =        4'd0           ;
                BMW_IObuffer_B27_w              =        4'd0           ;
                BMW_IObuffer_B28_w              =        4'd0           ;       
                BMW_IObuffer_B29_w              =        4'd0           ;                 
                BMW_IObuffer_B30_w              =        4'd0           ;                 
                BMW_IObuffer_B31_w              =        4'd0           ;
                BMW_IObuffer_DIB24_w            =        64'd0          ;
                BMW_IObuffer_DIB25_w            =        64'd0          ;
                BMW_IObuffer_DIB26_w            =        64'd0          ;                                                                    
                BMW_IObuffer_DIB27_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB28_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB29_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB30_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB31_w            =        64'd0          ;  
                BMW_IObuffer_WEBN_24_w          =        1'b1           ;
                BMW_IObuffer_WEBN_25_w          =        1'b1           ;
                BMW_IObuffer_WEBN_26_w          =        1'b1           ;
                BMW_IObuffer_WEBN_27_w          =        1'b1           ;
                BMW_IObuffer_WEBN_28_w          =        1'b1           ;
                BMW_IObuffer_WEBN_29_w          =        1'b1           ;
                BMW_IObuffer_WEBN_30_w          =        1'b1           ;
                BMW_IObuffer_WEBN_31_w          =        1'b1           ;
                BMW_IObuffer_OEB_24_w           =        1'b0           ;
                BMW_IObuffer_OEB_25_w           =        1'b0           ;
                BMW_IObuffer_OEB_26_w           =        1'b0           ;
                BMW_IObuffer_OEB_27_w           =        1'b0           ;
                BMW_IObuffer_OEB_28_w           =        1'b0           ;
                BMW_IObuffer_OEB_29_w           =        1'b0           ;
                BMW_IObuffer_OEB_30_w           =        1'b0           ;
                BMW_IObuffer_OEB_31_w           =        1'b0           ;  
                BMW_IObuffer_choose_reg_B_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_31_w  =        1'b0           ;
                                                 
                
                
                
                //Buffer for Curent frame Y                        
                CurY_Ibuffer_A32_w              =        4'd0           ;                       
                CurY_Ibuffer_A33_w              =        4'd0           ; 
                CurY_Ibuffer_DIA32_w            =        64'd0          ;                                                             
                CurY_Ibuffer_DIA33_w            =        64'd0          ;  
                CurY_Ibuffer_WEAN_32_w          =        1'b1           ;          
                CurY_Ibuffer_WEAN_33_w          =        1'b1           ;          
                CurY_Ibuffer_OEA_32_w           =        1'b0           ;           
                CurY_Ibuffer_OEA_33_w           =        1'b0           ;           
                CurY_Ibuffer_choose_reg_A_32_w  =        1'b0           ;  
                CurY_Ibuffer_choose_reg_A_33_w  =        1'b0           ;  
                
                CurY_Ibuffer_B32_w              =        4'd0           ;                                                  
                CurY_Ibuffer_B33_w              =        4'd0           ;                                                                                                             
                CurY_Ibuffer_DIB32_w            =        64'd0          ;                                                                                                            
                CurY_Ibuffer_DIB33_w            =        64'd0          ;                                    
                CurY_Ibuffer_WEBN_32_w          =        1'b1           ;            
                CurY_Ibuffer_WEBN_33_w          =        1'b1           ;                                  
                CurY_Ibuffer_OEB_32_w           =        1'b0           ;             
                CurY_Ibuffer_OEB_33_w           =        1'b0           ;                                     
                CurY_Ibuffer_choose_reg_B_32_w  =        1'b0           ;    
                CurY_Ibuffer_choose_reg_B_33_w  =        1'b0           ;    

                
                
                //Buffer for Curent frame U                      
                CurU_Ibuffer_A34_w              =        4'd0           ;                         
                CurU_Ibuffer_A35_w              =        4'd0           ;  
                CurU_Ibuffer_DIA34_w            =        64'd0          ;                                                               
                CurU_Ibuffer_DIA35_w            =        64'd0          ;  
                CurU_Ibuffer_WEAN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEAN_35_w          =        1'b1           ;            
                CurU_Ibuffer_OEA_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEA_35_w           =        1'b0           ;             
                CurU_Ibuffer_choose_reg_A_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_A_35_w  =        1'b0           ;    
                
                CurU_Ibuffer_B34_w              =        4'd0           ;                                                  
                CurU_Ibuffer_B35_w              =        4'd0           ;                                                                                                                                 
                CurU_Ibuffer_DIB34_w            =        64'd0          ;                                                                                                            
                CurU_Ibuffer_DIB35_w            =        64'd0          ;                                     
                CurU_Ibuffer_WEBN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEBN_35_w          =        1'b1           ;                                
                CurU_Ibuffer_OEB_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEB_35_w           =        1'b0           ;                                    
                CurU_Ibuffer_choose_reg_B_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_B_35_w  =        1'b0           ;    
 
 
                
                //Buffer for Curent frame V                       
                CurV_Ibuffer_A36_w              =        4'd0           ;                        
                CurV_Ibuffer_A37_w              =        4'd0           ;                        
                CurV_Ibuffer_DIA36_w            =        64'd0          ;                                                               
                CurV_Ibuffer_DIA37_w            =        64'd0          ;    
                CurV_Ibuffer_WEAN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEAN_37_w          =        1'b1           ;            
                CurV_Ibuffer_OEA_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEA_37_w           =        1'b0           ;             
                CurV_Ibuffer_choose_reg_A_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_A_37_w  =        1'b0           ;    
                 
                CurV_Ibuffer_B36_w              =        4'd0           ;                                                                
                CurV_Ibuffer_B37_w              =        4'd0           ;  
                CurV_Ibuffer_DIB36_w            =        64'd0          ;                                                                                                             
                CurV_Ibuffer_DIB37_w            =        64'd0          ;    
                CurV_Ibuffer_WEBN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEBN_37_w          =        1'b1           ;                                    
                CurV_Ibuffer_OEB_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEB_37_w           =        1'b0           ;                                  
                CurV_Ibuffer_choose_reg_B_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_B_37_w  =        1'b0           ;    
 
                
                
                //Buffer for Mask
                Mask_Obuffer_A38_w              =        4'd0           ;                       
                Mask_Obuffer_DIA38_w            =        64'd0          ;  
                Mask_Obuffer_WEAN_38_w          =        1'b1           ;                  
                Mask_Obuffer_OEA_38_w           =        1'b0           ;                   
                Mask_Obuffer_choose_reg_A_38_w  =        1'b0           ;
                                                 
                Mask_Obuffer_B38_w              =        4'd0           ;                                                               
                Mask_Obuffer_DIB38_w            =        64'd0          ;                            
                Mask_Obuffer_WEBN_38_w          =        1'b1           ;                                            
                Mask_Obuffer_OEB_38_w           =        1'b0           ;                                  
                Mask_Obuffer_choose_reg_B_38_w  =        1'b0           ;           
                                                         
                  
            end 
            
            `SEGSTATE_INPUT_BM_U:
            begin                
                
                                                
                //Buffer for Background Model Y
                BMY_IObuffer_A00_w              =        4'd0           ;
                BMY_IObuffer_A01_w              =        4'd0           ; 
                BMY_IObuffer_A02_w              =        4'd0           ; 
                BMY_IObuffer_A03_w              =        4'd0           ; 
                BMY_IObuffer_A04_w              =        4'd0           ; 
                BMY_IObuffer_A05_w              =        4'd0           ; 
                BMY_IObuffer_A06_w              =        4'd0           ;           
                BMY_IObuffer_A07_w              =        4'd0           ; 
                BMY_IObuffer_DIA00_w            =        64'd0          ; 
                BMY_IObuffer_DIA01_w            =        64'd0          ; 
                BMY_IObuffer_DIA02_w            =        64'd0          ; 
                BMY_IObuffer_DIA03_w            =        64'd0          ; 
                BMY_IObuffer_DIA04_w            =        64'd0          ; 
                BMY_IObuffer_DIA05_w            =        64'd0          ; 
                BMY_IObuffer_DIA06_w            =        64'd0          ; 
                BMY_IObuffer_DIA07_w            =        64'd0          ; 
                BMY_IObuffer_WEAN_00_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_01_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_02_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_03_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_04_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_05_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_06_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_07_w          =        1'b1           ;     
                BMY_IObuffer_OEA_00_w           =        1'b0           ;              
                BMY_IObuffer_OEA_01_w           =        1'b0           ;              
                BMY_IObuffer_OEA_02_w           =        1'b0           ;              
                BMY_IObuffer_OEA_03_w           =        1'b0           ;              
                BMY_IObuffer_OEA_04_w           =        1'b0           ;              
                BMY_IObuffer_OEA_05_w           =        1'b0           ;              
                BMY_IObuffer_OEA_06_w           =        1'b0           ;              
                BMY_IObuffer_OEA_07_w           =        1'b0           ;  
                BMY_IObuffer_choose_reg_A_00_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_01_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_02_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_03_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_04_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_05_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_06_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_07_w  =        1'b0           ;  
                
                BMY_IObuffer_B00_w              =        4'd0           ;
                BMY_IObuffer_B01_w              =        4'd0           ;
                BMY_IObuffer_B02_w              =        4'd0           ;
                BMY_IObuffer_B03_w              =        4'd0           ;
                BMY_IObuffer_B04_w              =        4'd0           ;
                BMY_IObuffer_B05_w              =        4'd0           ;
                BMY_IObuffer_B06_w              =        4'd0           ;
                BMY_IObuffer_B07_w              =        4'd0           ;
                BMY_IObuffer_DIB00_w            =        64'd0          ;
                BMY_IObuffer_DIB01_w            =        64'd0          ;
                BMY_IObuffer_DIB02_w            =        64'd0          ;
                BMY_IObuffer_DIB03_w            =        64'd0          ;
                BMY_IObuffer_DIB04_w            =        64'd0          ;
                BMY_IObuffer_DIB05_w            =        64'd0          ;
                BMY_IObuffer_DIB06_w            =        64'd0          ;
                BMY_IObuffer_DIB07_w            =        64'd0          ;
                BMY_IObuffer_WEBN_00_w          =        1'b1           ;
                BMY_IObuffer_WEBN_01_w          =        1'b1           ;
                BMY_IObuffer_WEBN_02_w          =        1'b1           ;
                BMY_IObuffer_WEBN_03_w          =        1'b1           ;
                BMY_IObuffer_WEBN_04_w          =        1'b1           ;
                BMY_IObuffer_WEBN_05_w          =        1'b1           ;
                BMY_IObuffer_WEBN_06_w          =        1'b1           ;
                BMY_IObuffer_WEBN_07_w          =        1'b1           ;
                BMY_IObuffer_OEB_00_w           =        1'b0           ;
                BMY_IObuffer_OEB_01_w           =        1'b0           ;
                BMY_IObuffer_OEB_02_w           =        1'b0           ;
                BMY_IObuffer_OEB_03_w           =        1'b0           ;
                BMY_IObuffer_OEB_04_w           =        1'b0           ;
                BMY_IObuffer_OEB_05_w           =        1'b0           ;
                BMY_IObuffer_OEB_06_w           =        1'b0           ;
                BMY_IObuffer_OEB_07_w           =        1'b0           ;
                BMY_IObuffer_choose_reg_B_00_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_01_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_02_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_03_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_04_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_05_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_06_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_07_w  =        1'b0           ;
                                                
                
                
                         
                //Buffer for Background Model U                         
                 if( (Count_BMYUVW_ADDR_r >= 7'd0) && (Count_BMYUVW_ADDR_r < `ADDRNUMin1ELEMENT))
                 begin 
                        BMU_IObuffer_A08_w              =        Count_BMYUVW_ADDR_r[3:0];
                        BMU_IObuffer_WEAN_08_w          =        1'b0           ;
                        BMU_IObuffer_OEA_08_w           =        1'b0           ;
                        BMU_IObuffer_choose_reg_A_08_w  =        1'b1           ;       
                 end             
                 else
                 begin
                        BMU_IObuffer_A08_w              =        4'd0           ;
                        BMU_IObuffer_WEAN_08_w          =        1'b1           ;  
                        BMU_IObuffer_OEA_08_w           =        1'b0           ; 
                        BMU_IObuffer_choose_reg_A_08_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin1ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin2ELEMENT))
                 begin 
                        BMU_IObuffer_A09_w              =        CountBMYUVWSubAddrNumIn1Elem[3:0]               ;
                        BMU_IObuffer_WEAN_09_w          =        1'b0           ;
                        BMU_IObuffer_OEA_09_w           =        1'b0           ;
                        BMU_IObuffer_choose_reg_A_09_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMU_IObuffer_A09_w              =        4'd0           ; 
                        BMU_IObuffer_WEAN_09_w          =        1'b1           ;  
                        BMU_IObuffer_OEA_09_w           =        1'b0           ;    
                        BMU_IObuffer_choose_reg_A_09_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin2ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin3ELEMENT) )
                 begin 
                        BMU_IObuffer_A10_w              =        CountBMYUVWSubAddrNumIn2Elem[3:0]               ;
                        BMU_IObuffer_WEAN_10_w          =        1'b0           ;
                        BMU_IObuffer_OEA_10_w           =        1'b0           ;
                        BMU_IObuffer_choose_reg_A_10_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMU_IObuffer_A10_w              =        4'd0           ; 
                        BMU_IObuffer_WEAN_10_w          =        1'b1           ;    
                        BMU_IObuffer_OEA_10_w           =        1'b0           ;   
                        BMU_IObuffer_choose_reg_A_10_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin3ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin4ELEMENT) )
                 begin 
                        BMU_IObuffer_A11_w              =        CountBMYUVWSubAddrNumIn3Elem[3:0]               ;
                        BMU_IObuffer_WEAN_11_w          =        1'b0           ;
                        BMU_IObuffer_OEA_11_w           =        1'b0           ;
                        BMU_IObuffer_choose_reg_A_11_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMU_IObuffer_A11_w              =        4'd0           ; 
                        BMU_IObuffer_WEAN_11_w          =        1'b1           ;  
                        BMU_IObuffer_OEA_11_w           =        1'b0           ;    
                        BMU_IObuffer_choose_reg_A_11_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin4ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin5ELEMENT) )
                 begin 
                        BMU_IObuffer_A12_w              =        CountBMYUVWSubAddrNumIn4Elem[3:0]               ;
                        BMU_IObuffer_WEAN_12_w          =        1'b0           ;
                        BMU_IObuffer_OEA_12_w           =        1'b0           ;
                        BMU_IObuffer_choose_reg_A_12_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMU_IObuffer_A12_w              =        4'd0           ;
                        BMU_IObuffer_WEAN_12_w          =        1'b1           ; 
                        BMU_IObuffer_OEA_12_w           =        1'b0           ; 
                        BMU_IObuffer_choose_reg_A_12_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin5ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin6ELEMENT) )
                 begin 
                        BMU_IObuffer_A13_w              =        CountBMYUVWSubAddrNumIn5Elem[3:0]               ;
                        BMU_IObuffer_WEAN_13_w          =        1'b0           ;
                        BMU_IObuffer_OEA_13_w           =        1'b0           ;
                        BMU_IObuffer_choose_reg_A_13_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMU_IObuffer_A13_w              =        4'd0           ; 
                        BMU_IObuffer_WEAN_13_w          =        1'b1           ;
                        BMU_IObuffer_OEA_13_w           =        1'b0           ;  
                        BMU_IObuffer_choose_reg_A_13_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin6ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin7ELEMENT) )
                 begin 
                        BMU_IObuffer_A14_w              =        CountBMYUVWSubAddrNumIn6Elem[3:0]               ;
                        BMU_IObuffer_WEAN_14_w          =       1'b0            ;
                        BMU_IObuffer_OEA_14_w           =       1'b0            ;
                        BMU_IObuffer_choose_reg_A_14_w  =       1'b1            ;
                 end             
                 else
                 begin
                        BMU_IObuffer_A14_w              =        4'd0           ; 
                        BMU_IObuffer_WEAN_14_w          =        1'b1           ;
                        BMU_IObuffer_OEA_14_w           =        1'b0           ;              
                        BMU_IObuffer_choose_reg_A_14_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin7ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin8ELEMENT) )
                 begin 
                        BMU_IObuffer_A15_w              =        CountBMYUVWSubAddrNumIn7Elem[3:0]               ;
                        BMU_IObuffer_WEAN_15_w          =        1'b0           ;
                        BMU_IObuffer_OEA_15_w           =        1'b0           ;
                        BMU_IObuffer_choose_reg_A_15_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMU_IObuffer_A15_w              =        4'd0           ;                                    
                        BMU_IObuffer_WEAN_15_w          =        1'b1           ; 
                        BMU_IObuffer_OEA_15_w           =        1'b0           ;              
                        BMU_IObuffer_choose_reg_A_15_w  =        1'b0           ;  
                 end 
                
                                
                BMU_IObuffer_DIA08_w            =        Seg_DataIn_r       ; 
                BMU_IObuffer_DIA09_w            =        Seg_DataIn_r       ; 
                BMU_IObuffer_DIA10_w            =        Seg_DataIn_r       ; 
                BMU_IObuffer_DIA11_w            =        Seg_DataIn_r       ; 
                BMU_IObuffer_DIA12_w            =        Seg_DataIn_r       ; 
                BMU_IObuffer_DIA13_w            =        Seg_DataIn_r       ; 
                BMU_IObuffer_DIA14_w            =        Seg_DataIn_r       ; 
                BMU_IObuffer_DIA15_w            =        Seg_DataIn_r       ; 
            
                                                
                BMU_IObuffer_B08_w              =        4'd0           ;
                BMU_IObuffer_B09_w              =        4'd0           ;
                BMU_IObuffer_B10_w              =        4'd0           ;
                BMU_IObuffer_B11_w              =        4'd0           ;
                BMU_IObuffer_B12_w              =        4'd0           ;
                BMU_IObuffer_B13_w              =        4'd0           ;
                BMU_IObuffer_B14_w              =        4'd0           ;
                BMU_IObuffer_B15_w              =        4'd0           ;
                BMU_IObuffer_DIB08_w            =        64'd0          ;
                BMU_IObuffer_DIB09_w            =        64'd0          ;
                BMU_IObuffer_DIB10_w            =        64'd0          ;
                BMU_IObuffer_DIB11_w            =        64'd0          ;
                BMU_IObuffer_DIB12_w            =        64'd0          ;
                BMU_IObuffer_DIB13_w            =        64'd0          ;
                BMU_IObuffer_DIB14_w            =        64'd0          ;
                BMU_IObuffer_DIB15_w            =        64'd0          ;
                BMU_IObuffer_WEBN_08_w          =        1'b1           ;
                BMU_IObuffer_WEBN_09_w          =        1'b1           ;
                BMU_IObuffer_WEBN_10_w          =        1'b1           ;
                BMU_IObuffer_WEBN_11_w          =        1'b1           ;
                BMU_IObuffer_WEBN_12_w          =        1'b1           ;
                BMU_IObuffer_WEBN_13_w          =        1'b1           ;
                BMU_IObuffer_WEBN_14_w          =        1'b1           ;
                BMU_IObuffer_WEBN_15_w          =        1'b1           ;
                BMU_IObuffer_OEB_08_w           =        1'b0           ;
                BMU_IObuffer_OEB_09_w           =        1'b0           ;
                BMU_IObuffer_OEB_10_w           =        1'b0           ;
                BMU_IObuffer_OEB_11_w           =        1'b0           ;
                BMU_IObuffer_OEB_12_w           =        1'b0           ;
                BMU_IObuffer_OEB_13_w           =        1'b0           ;
                BMU_IObuffer_OEB_14_w           =        1'b0           ;
                BMU_IObuffer_OEB_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_B_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_15_w  =        1'b0           ;
                                             
                
                
                //Buffer for Background Model V
                BMV_IObuffer_A16_w              =        4'd0           ;
                BMV_IObuffer_A17_w              =        4'd0           ;
                BMV_IObuffer_A18_w              =        4'd0           ;
                BMV_IObuffer_A19_w              =        4'd0           ;
                BMV_IObuffer_A20_w              =        4'd0           ;
                BMV_IObuffer_A21_w              =        4'd0           ;
                BMV_IObuffer_A22_w              =        4'd0           ;
                BMV_IObuffer_A23_w              =        4'd0           ;
                BMV_IObuffer_DIA16_w            =        64'd0          ;
                BMV_IObuffer_DIA17_w            =        64'd0          ;
                BMV_IObuffer_DIA18_w            =        64'd0          ;
                BMV_IObuffer_DIA19_w            =        64'd0          ;
                BMV_IObuffer_DIA20_w            =        64'd0          ;
                BMV_IObuffer_DIA21_w            =        64'd0          ;
                BMV_IObuffer_DIA22_w            =        64'd0          ;
                BMV_IObuffer_DIA23_w            =        64'd0          ;
                BMV_IObuffer_WEAN_16_w          =        1'b1           ;
                BMV_IObuffer_WEAN_17_w          =        1'b1           ;
                BMV_IObuffer_WEAN_18_w          =        1'b1           ;
                BMV_IObuffer_WEAN_19_w          =        1'b1           ;
                BMV_IObuffer_WEAN_20_w          =        1'b1           ;
                BMV_IObuffer_WEAN_21_w          =        1'b1           ;
                BMV_IObuffer_WEAN_22_w          =        1'b1           ;
                BMV_IObuffer_WEAN_23_w          =        1'b1           ;
                BMV_IObuffer_OEA_16_w           =        1'b0           ;
                BMV_IObuffer_OEA_17_w           =        1'b0           ;
                BMV_IObuffer_OEA_18_w           =        1'b0           ;
                BMV_IObuffer_OEA_19_w           =        1'b0           ;
                BMV_IObuffer_OEA_20_w           =        1'b0           ;
                BMV_IObuffer_OEA_21_w           =        1'b0           ;
                BMV_IObuffer_OEA_22_w           =        1'b0           ;
                BMV_IObuffer_OEA_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_A_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_23_w  =        1'b0           ;
                              
                BMV_IObuffer_B16_w              =        4'd0           ;
                BMV_IObuffer_B17_w              =        4'd0           ;
                BMV_IObuffer_B18_w              =        4'd0           ;
                BMV_IObuffer_B19_w              =        4'd0           ;
                BMV_IObuffer_B20_w              =        4'd0           ;
                BMV_IObuffer_B21_w              =        4'd0           ;
                BMV_IObuffer_B22_w              =        4'd0           ;
                BMV_IObuffer_B23_w              =        4'd0           ;
                BMV_IObuffer_DIB16_w            =        64'd0          ;
                BMV_IObuffer_DIB17_w            =        64'd0          ;
                BMV_IObuffer_DIB18_w            =        64'd0          ;
                BMV_IObuffer_DIB19_w            =        64'd0          ;
                BMV_IObuffer_DIB20_w            =        64'd0          ;
                BMV_IObuffer_DIB21_w            =        64'd0          ;
                BMV_IObuffer_DIB22_w            =        64'd0          ;
                BMV_IObuffer_DIB23_w            =        64'd0          ;
                BMV_IObuffer_WEBN_16_w          =        1'b1           ;
                BMV_IObuffer_WEBN_17_w          =        1'b1           ;
                BMV_IObuffer_WEBN_18_w          =        1'b1           ;
                BMV_IObuffer_WEBN_19_w          =        1'b1           ;
                BMV_IObuffer_WEBN_20_w          =        1'b1           ;
                BMV_IObuffer_WEBN_21_w          =        1'b1           ;
                BMV_IObuffer_WEBN_22_w          =        1'b1           ;
                BMV_IObuffer_WEBN_23_w          =        1'b1           ;
                BMV_IObuffer_OEB_16_w           =        1'b0           ;
                BMV_IObuffer_OEB_17_w           =        1'b0           ;
                BMV_IObuffer_OEB_18_w           =        1'b0           ;
                BMV_IObuffer_OEB_19_w           =        1'b0           ;
                BMV_IObuffer_OEB_20_w           =        1'b0           ;
                BMV_IObuffer_OEB_21_w           =        1'b0           ;
                BMV_IObuffer_OEB_22_w           =        1'b0           ;
                BMV_IObuffer_OEB_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_B_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_23_w  =        1'b0           ;
                                               
                
                
                
                //Buffer for Background Model W
                BMW_IObuffer_A24_w              =        4'd0           ;
                BMW_IObuffer_A25_w              =        4'd0           ;
                BMW_IObuffer_A26_w              =        4'd0           ;
                BMW_IObuffer_A27_w              =        4'd0           ;
                BMW_IObuffer_A28_w              =        4'd0           ;
                BMW_IObuffer_A29_w              =        4'd0           ;
                BMW_IObuffer_A30_w              =        4'd0           ;
                BMW_IObuffer_A31_w              =        4'd0           ;
                BMW_IObuffer_DIA24_w            =        64'd0          ;                                        
                BMW_IObuffer_DIA25_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA26_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA27_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA28_w            =        64'd0          ;                           
                BMW_IObuffer_DIA29_w            =        64'd0          ;                               
                BMW_IObuffer_DIA30_w            =        64'd0          ;                               
                BMW_IObuffer_DIA31_w            =        64'd0          ;
                BMW_IObuffer_WEAN_24_w          =        1'b1           ;
                BMW_IObuffer_WEAN_25_w          =        1'b1           ;
                BMW_IObuffer_WEAN_26_w          =        1'b1           ;
                BMW_IObuffer_WEAN_27_w          =        1'b1           ;
                BMW_IObuffer_WEAN_28_w          =        1'b1           ;
                BMW_IObuffer_WEAN_29_w          =        1'b1           ;
                BMW_IObuffer_WEAN_30_w          =        1'b1           ;
                BMW_IObuffer_WEAN_31_w          =        1'b1           ;
                BMW_IObuffer_OEA_24_w           =        1'b0           ;
                BMW_IObuffer_OEA_25_w           =        1'b0           ;
                BMW_IObuffer_OEA_26_w           =        1'b0           ;
                BMW_IObuffer_OEA_27_w           =        1'b0           ;
                BMW_IObuffer_OEA_28_w           =        1'b0           ;
                BMW_IObuffer_OEA_29_w           =        1'b0           ;
                BMW_IObuffer_OEA_30_w           =        1'b0           ;
                BMW_IObuffer_OEA_31_w           =        1'b0           ;
                BMW_IObuffer_choose_reg_A_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_31_w  =        1'b0           ;
                
                BMW_IObuffer_B24_w              =        4'd0           ;
                BMW_IObuffer_B25_w              =        4'd0           ;
                BMW_IObuffer_B26_w              =        4'd0           ;
                BMW_IObuffer_B27_w              =        4'd0           ;
                BMW_IObuffer_B28_w              =        4'd0           ;       
                BMW_IObuffer_B29_w              =        4'd0           ;                 
                BMW_IObuffer_B30_w              =        4'd0           ;                 
                BMW_IObuffer_B31_w              =        4'd0           ;
                BMW_IObuffer_DIB24_w            =        64'd0          ;
                BMW_IObuffer_DIB25_w            =        64'd0          ;
                BMW_IObuffer_DIB26_w            =        64'd0          ;                                                                    
                BMW_IObuffer_DIB27_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB28_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB29_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB30_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB31_w            =        64'd0          ;  
                BMW_IObuffer_WEBN_24_w          =        1'b1           ;
                BMW_IObuffer_WEBN_25_w          =        1'b1           ;
                BMW_IObuffer_WEBN_26_w          =        1'b1           ;
                BMW_IObuffer_WEBN_27_w          =        1'b1           ;
                BMW_IObuffer_WEBN_28_w          =        1'b1           ;
                BMW_IObuffer_WEBN_29_w          =        1'b1           ;
                BMW_IObuffer_WEBN_30_w          =        1'b1           ;
                BMW_IObuffer_WEBN_31_w          =        1'b1           ;
                BMW_IObuffer_OEB_24_w           =        1'b0           ;
                BMW_IObuffer_OEB_25_w           =        1'b0           ;
                BMW_IObuffer_OEB_26_w           =        1'b0           ;
                BMW_IObuffer_OEB_27_w           =        1'b0           ;
                BMW_IObuffer_OEB_28_w           =        1'b0           ;
                BMW_IObuffer_OEB_29_w           =        1'b0           ;
                BMW_IObuffer_OEB_30_w           =        1'b0           ;
                BMW_IObuffer_OEB_31_w           =        1'b0           ;  
                BMW_IObuffer_choose_reg_B_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_31_w  =        1'b0           ;
                                                 
                
                
                
                //Buffer for Curent frame Y                        
                CurY_Ibuffer_A32_w              =        4'd0           ;                       
                CurY_Ibuffer_A33_w              =        4'd0           ; 
                CurY_Ibuffer_DIA32_w            =        64'd0          ;                                                             
                CurY_Ibuffer_DIA33_w            =        64'd0          ;  
                CurY_Ibuffer_WEAN_32_w          =        1'b1           ;          
                CurY_Ibuffer_WEAN_33_w          =        1'b1           ;          
                CurY_Ibuffer_OEA_32_w           =        1'b0           ;           
                CurY_Ibuffer_OEA_33_w           =        1'b0           ;           
                CurY_Ibuffer_choose_reg_A_32_w  =        1'b0           ;  
                CurY_Ibuffer_choose_reg_A_33_w  =        1'b0           ;  
                
                CurY_Ibuffer_B32_w              =        4'd0           ;                                                  
                CurY_Ibuffer_B33_w              =        4'd0           ;                                                                                                             
                CurY_Ibuffer_DIB32_w            =        64'd0          ;                                                                                                            
                CurY_Ibuffer_DIB33_w            =        64'd0          ;                                    
                CurY_Ibuffer_WEBN_32_w          =        1'b1           ;            
                CurY_Ibuffer_WEBN_33_w          =        1'b1           ;                                  
                CurY_Ibuffer_OEB_32_w           =        1'b0           ;             
                CurY_Ibuffer_OEB_33_w           =        1'b0           ;                                     
                CurY_Ibuffer_choose_reg_B_32_w  =        1'b0           ;    
                CurY_Ibuffer_choose_reg_B_33_w  =        1'b0           ;    

                
                
                //Buffer for Curent frame U                      
                CurU_Ibuffer_A34_w              =        4'd0           ;                         
                CurU_Ibuffer_A35_w              =        4'd0           ;  
                CurU_Ibuffer_DIA34_w            =        64'd0          ;                                                               
                CurU_Ibuffer_DIA35_w            =        64'd0          ;  
                CurU_Ibuffer_WEAN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEAN_35_w          =        1'b1           ;            
                CurU_Ibuffer_OEA_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEA_35_w           =        1'b0           ;             
                CurU_Ibuffer_choose_reg_A_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_A_35_w  =        1'b0           ;    
                
                CurU_Ibuffer_B34_w              =        4'd0           ;                                                  
                CurU_Ibuffer_B35_w              =        4'd0           ;                                                                                                                                 
                CurU_Ibuffer_DIB34_w            =        64'd0          ;                                                                                                            
                CurU_Ibuffer_DIB35_w            =        64'd0          ;                                     
                CurU_Ibuffer_WEBN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEBN_35_w          =        1'b1           ;                                
                CurU_Ibuffer_OEB_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEB_35_w           =        1'b0           ;                                    
                CurU_Ibuffer_choose_reg_B_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_B_35_w  =        1'b0           ;    
 
 
                
                //Buffer for Curent frame V                       
                CurV_Ibuffer_A36_w              =        4'd0           ;                        
                CurV_Ibuffer_A37_w              =        4'd0           ;                        
                CurV_Ibuffer_DIA36_w            =        64'd0          ;                                                               
                CurV_Ibuffer_DIA37_w            =        64'd0          ;    
                CurV_Ibuffer_WEAN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEAN_37_w          =        1'b1           ;            
                CurV_Ibuffer_OEA_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEA_37_w           =        1'b0           ;             
                CurV_Ibuffer_choose_reg_A_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_A_37_w  =        1'b0           ;    
                 
                CurV_Ibuffer_B36_w              =        4'd0           ;                                                                
                CurV_Ibuffer_B37_w              =        4'd0           ;  
                CurV_Ibuffer_DIB36_w            =        64'd0          ;                                                                                                             
                CurV_Ibuffer_DIB37_w            =        64'd0          ;    
                CurV_Ibuffer_WEBN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEBN_37_w          =        1'b1           ;                                    
                CurV_Ibuffer_OEB_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEB_37_w           =        1'b0           ;                                  
                CurV_Ibuffer_choose_reg_B_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_B_37_w  =        1'b0           ;    
 
                
                
                //Buffer for Mask
                Mask_Obuffer_A38_w              =        4'd0           ;                       
                Mask_Obuffer_DIA38_w            =        64'd0          ;  
                Mask_Obuffer_WEAN_38_w          =        1'b1           ;                  
                Mask_Obuffer_OEA_38_w           =        1'b0           ;                   
                Mask_Obuffer_choose_reg_A_38_w  =        1'b0           ;
                                                 
                Mask_Obuffer_B38_w              =        4'd0           ;                                                               
                Mask_Obuffer_DIB38_w            =        64'd0          ;                            
                Mask_Obuffer_WEBN_38_w          =        1'b1           ;                                            
                Mask_Obuffer_OEB_38_w           =        1'b0           ;                                  
                Mask_Obuffer_choose_reg_B_38_w  =        1'b0           ;           
                                                         

            end                  
            
            `SEGSTATE_INPUT_BM_V:
            begin 
                                                
                //Buffer for Background Model Y
                BMY_IObuffer_A00_w              =        4'd0           ;
                BMY_IObuffer_A01_w              =        4'd0           ; 
                BMY_IObuffer_A02_w              =        4'd0           ; 
                BMY_IObuffer_A03_w              =        4'd0           ; 
                BMY_IObuffer_A04_w              =        4'd0           ; 
                BMY_IObuffer_A05_w              =        4'd0           ; 
                BMY_IObuffer_A06_w              =        4'd0           ;           
                BMY_IObuffer_A07_w              =        4'd0           ; 
                BMY_IObuffer_DIA00_w            =        64'd0          ; 
                BMY_IObuffer_DIA01_w            =        64'd0          ; 
                BMY_IObuffer_DIA02_w            =        64'd0          ; 
                BMY_IObuffer_DIA03_w            =        64'd0          ; 
                BMY_IObuffer_DIA04_w            =        64'd0          ; 
                BMY_IObuffer_DIA05_w            =        64'd0          ; 
                BMY_IObuffer_DIA06_w            =        64'd0          ; 
                BMY_IObuffer_DIA07_w            =        64'd0          ; 
                BMY_IObuffer_WEAN_00_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_01_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_02_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_03_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_04_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_05_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_06_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_07_w          =        1'b1           ;     
                BMY_IObuffer_OEA_00_w           =        1'b0           ;              
                BMY_IObuffer_OEA_01_w           =        1'b0           ;              
                BMY_IObuffer_OEA_02_w           =        1'b0           ;              
                BMY_IObuffer_OEA_03_w           =        1'b0           ;              
                BMY_IObuffer_OEA_04_w           =        1'b0           ;              
                BMY_IObuffer_OEA_05_w           =        1'b0           ;              
                BMY_IObuffer_OEA_06_w           =        1'b0           ;              
                BMY_IObuffer_OEA_07_w           =        1'b0           ;  
                BMY_IObuffer_choose_reg_A_00_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_01_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_02_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_03_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_04_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_05_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_06_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_07_w  =        1'b0           ;  
                
                BMY_IObuffer_B00_w              =        4'd0           ;
                BMY_IObuffer_B01_w              =        4'd0           ;
                BMY_IObuffer_B02_w              =        4'd0           ;
                BMY_IObuffer_B03_w              =        4'd0           ;
                BMY_IObuffer_B04_w              =        4'd0           ;
                BMY_IObuffer_B05_w              =        4'd0           ;
                BMY_IObuffer_B06_w              =        4'd0           ;
                BMY_IObuffer_B07_w              =        4'd0           ;
                BMY_IObuffer_DIB00_w            =        64'd0          ;
                BMY_IObuffer_DIB01_w            =        64'd0          ;
                BMY_IObuffer_DIB02_w            =        64'd0          ;
                BMY_IObuffer_DIB03_w            =        64'd0          ;
                BMY_IObuffer_DIB04_w            =        64'd0          ;
                BMY_IObuffer_DIB05_w            =        64'd0          ;
                BMY_IObuffer_DIB06_w            =        64'd0          ;
                BMY_IObuffer_DIB07_w            =        64'd0          ;
                BMY_IObuffer_WEBN_00_w          =        1'b1           ;
                BMY_IObuffer_WEBN_01_w          =        1'b1           ;
                BMY_IObuffer_WEBN_02_w          =        1'b1           ;
                BMY_IObuffer_WEBN_03_w          =        1'b1           ;
                BMY_IObuffer_WEBN_04_w          =        1'b1           ;
                BMY_IObuffer_WEBN_05_w          =        1'b1           ;
                BMY_IObuffer_WEBN_06_w          =        1'b1           ;
                BMY_IObuffer_WEBN_07_w          =        1'b1           ;
                BMY_IObuffer_OEB_00_w           =        1'b0           ;
                BMY_IObuffer_OEB_01_w           =        1'b0           ;
                BMY_IObuffer_OEB_02_w           =        1'b0           ;
                BMY_IObuffer_OEB_03_w           =        1'b0           ;
                BMY_IObuffer_OEB_04_w           =        1'b0           ;
                BMY_IObuffer_OEB_05_w           =        1'b0           ;
                BMY_IObuffer_OEB_06_w           =        1'b0           ;
                BMY_IObuffer_OEB_07_w           =        1'b0           ;
                BMY_IObuffer_choose_reg_B_00_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_01_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_02_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_03_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_04_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_05_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_06_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_07_w  =        1'b0           ;
                                                
                
                
                         
                //Buffer for Background Model U                         
                BMU_IObuffer_A08_w              =        4'd0           ;
                BMU_IObuffer_A09_w              =        4'd0           ;
                BMU_IObuffer_A10_w              =        4'd0           ;
                BMU_IObuffer_A11_w              =        4'd0           ;
                BMU_IObuffer_A12_w              =        4'd0           ;
                BMU_IObuffer_A13_w              =        4'd0           ;
                BMU_IObuffer_A14_w              =        4'd0           ;
                BMU_IObuffer_A15_w              =        4'd0           ;
                BMU_IObuffer_DIA08_w            =        64'd0          ;
                BMU_IObuffer_DIA09_w            =        64'd0          ;
                BMU_IObuffer_DIA10_w            =        64'd0          ;
                BMU_IObuffer_DIA11_w            =        64'd0          ;
                BMU_IObuffer_DIA12_w            =        64'd0          ;
                BMU_IObuffer_DIA13_w            =        64'd0          ;
                BMU_IObuffer_DIA14_w            =        64'd0          ;
                BMU_IObuffer_DIA15_w            =        64'd0          ;
                BMU_IObuffer_WEAN_08_w          =        1'b1           ;
                BMU_IObuffer_WEAN_09_w          =        1'b1           ;
                BMU_IObuffer_WEAN_10_w          =        1'b1           ;
                BMU_IObuffer_WEAN_11_w          =        1'b1           ;
                BMU_IObuffer_WEAN_12_w          =        1'b1           ;
                BMU_IObuffer_WEAN_13_w          =        1'b1           ;
                BMU_IObuffer_WEAN_14_w          =        1'b1           ;
                BMU_IObuffer_WEAN_15_w          =        1'b1           ;
                BMU_IObuffer_OEA_08_w           =        1'b0           ;
                BMU_IObuffer_OEA_09_w           =        1'b0           ;
                BMU_IObuffer_OEA_10_w           =        1'b0           ;
                BMU_IObuffer_OEA_11_w           =        1'b0           ;
                BMU_IObuffer_OEA_12_w           =        1'b0           ;
                BMU_IObuffer_OEA_13_w           =        1'b0           ;
                BMU_IObuffer_OEA_14_w           =        1'b0           ;
                BMU_IObuffer_OEA_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_A_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_15_w  =        1'b0           ;
                                                
                                                
                BMU_IObuffer_B08_w              =        4'd0           ;
                BMU_IObuffer_B09_w              =        4'd0           ;
                BMU_IObuffer_B10_w              =        4'd0           ;
                BMU_IObuffer_B11_w              =        4'd0           ;
                BMU_IObuffer_B12_w              =        4'd0           ;
                BMU_IObuffer_B13_w              =        4'd0           ;
                BMU_IObuffer_B14_w              =        4'd0           ;
                BMU_IObuffer_B15_w              =        4'd0           ;
                BMU_IObuffer_DIB08_w            =        64'd0          ;
                BMU_IObuffer_DIB09_w            =        64'd0          ;
                BMU_IObuffer_DIB10_w            =        64'd0          ;
                BMU_IObuffer_DIB11_w            =        64'd0          ;
                BMU_IObuffer_DIB12_w            =        64'd0          ;
                BMU_IObuffer_DIB13_w            =        64'd0          ;
                BMU_IObuffer_DIB14_w            =        64'd0          ;
                BMU_IObuffer_DIB15_w            =        64'd0          ;
                BMU_IObuffer_WEBN_08_w          =        1'b1           ;
                BMU_IObuffer_WEBN_09_w          =        1'b1           ;
                BMU_IObuffer_WEBN_10_w          =        1'b1           ;
                BMU_IObuffer_WEBN_11_w          =        1'b1           ;
                BMU_IObuffer_WEBN_12_w          =        1'b1           ;
                BMU_IObuffer_WEBN_13_w          =        1'b1           ;
                BMU_IObuffer_WEBN_14_w          =        1'b1           ;
                BMU_IObuffer_WEBN_15_w          =        1'b1           ;
                BMU_IObuffer_OEB_08_w           =        1'b0           ;
                BMU_IObuffer_OEB_09_w           =        1'b0           ;
                BMU_IObuffer_OEB_10_w           =        1'b0           ;
                BMU_IObuffer_OEB_11_w           =        1'b0           ;
                BMU_IObuffer_OEB_12_w           =        1'b0           ;
                BMU_IObuffer_OEB_13_w           =        1'b0           ;
                BMU_IObuffer_OEB_14_w           =        1'b0           ;
                BMU_IObuffer_OEB_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_B_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_15_w  =        1'b0           ;
                                             
                
                
                //Buffer for Background Model V
                 if( (Count_BMYUVW_ADDR_r >= 7'd0) && (Count_BMYUVW_ADDR_r < `ADDRNUMin1ELEMENT) )
                 begin 
                        BMV_IObuffer_A16_w              =        Count_BMYUVW_ADDR_r[3:0];
                        BMV_IObuffer_WEAN_16_w          =        1'b0           ;
                        BMV_IObuffer_OEA_16_w           =        1'b0           ;
                        BMV_IObuffer_choose_reg_A_16_w  =        1'b1           ;       
                 end             
                 else
                 begin
                        BMV_IObuffer_A16_w              =        4'd0           ;
                        BMV_IObuffer_WEAN_16_w          =        1'b1           ;  
                        BMV_IObuffer_OEA_16_w           =        1'b0           ; 
                        BMV_IObuffer_choose_reg_A_16_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin1ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin2ELEMENT) )
                 begin 
                        BMV_IObuffer_A17_w              =        CountBMYUVWSubAddrNumIn1Elem[3:0]               ;
                        BMV_IObuffer_WEAN_17_w          =        1'b0           ;
                        BMV_IObuffer_OEA_17_w           =        1'b0           ;
                        BMV_IObuffer_choose_reg_A_17_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMV_IObuffer_A17_w              =        4'd0           ; 
                        BMV_IObuffer_WEAN_17_w          =        1'b1           ;  
                        BMV_IObuffer_OEA_17_w           =        1'b0           ;    
                        BMV_IObuffer_choose_reg_A_17_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin2ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin3ELEMENT) )
                 begin 
                        BMV_IObuffer_A18_w              =        CountBMYUVWSubAddrNumIn2Elem[3:0]               ;
                        BMV_IObuffer_WEAN_18_w          =        1'b0           ;
                        BMV_IObuffer_OEA_18_w           =        1'b0           ;
                        BMV_IObuffer_choose_reg_A_18_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMV_IObuffer_A18_w              =        4'd0           ; 
                        BMV_IObuffer_WEAN_18_w          =        1'b1           ;    
                        BMV_IObuffer_OEA_18_w           =        1'b0           ;   
                        BMV_IObuffer_choose_reg_A_18_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin3ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin4ELEMENT) )
                 begin 
                        BMV_IObuffer_A19_w              =        CountBMYUVWSubAddrNumIn3Elem[3:0]               ;
                        BMV_IObuffer_WEAN_19_w          =        1'b0           ;
                        BMV_IObuffer_OEA_19_w           =        1'b0           ;
                        BMV_IObuffer_choose_reg_A_19_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMV_IObuffer_A19_w              =        4'd0           ; 
                        BMV_IObuffer_WEAN_19_w          =        1'b1           ;  
                        BMV_IObuffer_OEA_19_w           =        1'b0           ;    
                        BMV_IObuffer_choose_reg_A_19_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin4ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin5ELEMENT) )
                 begin 
                        BMV_IObuffer_A20_w              =        CountBMYUVWSubAddrNumIn4Elem[3:0]               ;
                        BMV_IObuffer_WEAN_20_w          =        1'b0           ;
                        BMV_IObuffer_OEA_20_w           =        1'b0           ;
                        BMV_IObuffer_choose_reg_A_20_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMV_IObuffer_A20_w              =        4'd0           ;
                        BMV_IObuffer_WEAN_20_w          =        1'b1           ; 
                        BMV_IObuffer_OEA_20_w           =        1'b0           ; 
                        BMV_IObuffer_choose_reg_A_20_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin5ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin6ELEMENT) )
                 begin 
                        BMV_IObuffer_A21_w              =        CountBMYUVWSubAddrNumIn5Elem[3:0]               ;
                        BMV_IObuffer_WEAN_21_w          =        1'b0           ;
                        BMV_IObuffer_OEA_21_w           =        1'b0           ;
                        BMV_IObuffer_choose_reg_A_21_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMV_IObuffer_A21_w              =        4'd0           ; 
                        BMV_IObuffer_WEAN_21_w          =        1'b1           ;
                        BMV_IObuffer_OEA_21_w           =        1'b0           ;  
                        BMV_IObuffer_choose_reg_A_21_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin6ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin7ELEMENT) )
                 begin 
                        BMV_IObuffer_A22_w              =        CountBMYUVWSubAddrNumIn6Elem[3:0]               ;
                        BMV_IObuffer_WEAN_22_w          =       1'b0            ;
                        BMV_IObuffer_OEA_22_w           =       1'b0            ;
                        BMV_IObuffer_choose_reg_A_22_w  =       1'b1            ;
                 end             
                 else
                 begin
                        BMV_IObuffer_A22_w              =        4'd0           ; 
                        BMV_IObuffer_WEAN_22_w          =        1'b1           ;
                        BMV_IObuffer_OEA_22_w           =        1'b0           ;              
                        BMV_IObuffer_choose_reg_A_22_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin7ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin8ELEMENT) )
                 begin 
                        BMV_IObuffer_A23_w              =        CountBMYUVWSubAddrNumIn7Elem[3:0]               ;
                        BMV_IObuffer_WEAN_23_w          =        1'b0           ;
                        BMV_IObuffer_OEA_23_w           =        1'b0           ;
                        BMV_IObuffer_choose_reg_A_23_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMV_IObuffer_A23_w              =        4'd0           ;                                    
                        BMV_IObuffer_WEAN_23_w          =        1'b1           ; 
                        BMV_IObuffer_OEA_23_w           =        1'b0           ;              
                        BMV_IObuffer_choose_reg_A_23_w  =        1'b0           ;  
                 end 
                
                                
                BMV_IObuffer_DIA16_w            =        Seg_DataIn_r       ; 
                BMV_IObuffer_DIA17_w            =        Seg_DataIn_r       ; 
                BMV_IObuffer_DIA18_w            =        Seg_DataIn_r       ; 
                BMV_IObuffer_DIA19_w            =        Seg_DataIn_r       ; 
                BMV_IObuffer_DIA20_w            =        Seg_DataIn_r       ; 
                BMV_IObuffer_DIA21_w            =        Seg_DataIn_r       ; 
                BMV_IObuffer_DIA22_w            =        Seg_DataIn_r       ; 
                BMV_IObuffer_DIA23_w            =        Seg_DataIn_r       ; 

                BMV_IObuffer_B16_w              =        4'd0           ;
                BMV_IObuffer_B17_w              =        4'd0           ;
                BMV_IObuffer_B18_w              =        4'd0           ;
                BMV_IObuffer_B19_w              =        4'd0           ;
                BMV_IObuffer_B20_w              =        4'd0           ;
                BMV_IObuffer_B21_w              =        4'd0           ;
                BMV_IObuffer_B22_w              =        4'd0           ;
                BMV_IObuffer_B23_w              =        4'd0           ;
                BMV_IObuffer_DIB16_w            =        64'd0          ;
                BMV_IObuffer_DIB17_w            =        64'd0          ;
                BMV_IObuffer_DIB18_w            =        64'd0          ;
                BMV_IObuffer_DIB19_w            =        64'd0          ;
                BMV_IObuffer_DIB20_w            =        64'd0          ;
                BMV_IObuffer_DIB21_w            =        64'd0          ;
                BMV_IObuffer_DIB22_w            =        64'd0          ;
                BMV_IObuffer_DIB23_w            =        64'd0          ;
                BMV_IObuffer_WEBN_16_w          =        1'b1           ;
                BMV_IObuffer_WEBN_17_w          =        1'b1           ;
                BMV_IObuffer_WEBN_18_w          =        1'b1           ;
                BMV_IObuffer_WEBN_19_w          =        1'b1           ;
                BMV_IObuffer_WEBN_20_w          =        1'b1           ;
                BMV_IObuffer_WEBN_21_w          =        1'b1           ;
                BMV_IObuffer_WEBN_22_w          =        1'b1           ;
                BMV_IObuffer_WEBN_23_w          =        1'b1           ;
                BMV_IObuffer_OEB_16_w           =        1'b0           ;
                BMV_IObuffer_OEB_17_w           =        1'b0           ;
                BMV_IObuffer_OEB_18_w           =        1'b0           ;
                BMV_IObuffer_OEB_19_w           =        1'b0           ;
                BMV_IObuffer_OEB_20_w           =        1'b0           ;
                BMV_IObuffer_OEB_21_w           =        1'b0           ;
                BMV_IObuffer_OEB_22_w           =        1'b0           ;
                BMV_IObuffer_OEB_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_B_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_23_w  =        1'b0           ;
                                               
                
                
                
                //Buffer for Background Model W
                BMW_IObuffer_A24_w              =        4'd0           ;
                BMW_IObuffer_A25_w              =        4'd0           ;
                BMW_IObuffer_A26_w              =        4'd0           ;
                BMW_IObuffer_A27_w              =        4'd0           ;
                BMW_IObuffer_A28_w              =        4'd0           ;
                BMW_IObuffer_A29_w              =        4'd0           ;
                BMW_IObuffer_A30_w              =        4'd0           ;
                BMW_IObuffer_A31_w              =        4'd0           ;
                BMW_IObuffer_DIA24_w            =        64'd0          ;                                        
                BMW_IObuffer_DIA25_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA26_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA27_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA28_w            =        64'd0          ;                           
                BMW_IObuffer_DIA29_w            =        64'd0          ;                               
                BMW_IObuffer_DIA30_w            =        64'd0          ;                               
                BMW_IObuffer_DIA31_w            =        64'd0          ;
                BMW_IObuffer_WEAN_24_w          =        1'b1           ;
                BMW_IObuffer_WEAN_25_w          =        1'b1           ;
                BMW_IObuffer_WEAN_26_w          =        1'b1           ;
                BMW_IObuffer_WEAN_27_w          =        1'b1           ;
                BMW_IObuffer_WEAN_28_w          =        1'b1           ;
                BMW_IObuffer_WEAN_29_w          =        1'b1           ;
                BMW_IObuffer_WEAN_30_w          =        1'b1           ;
                BMW_IObuffer_WEAN_31_w          =        1'b1           ;
                BMW_IObuffer_OEA_24_w           =        1'b0           ;
                BMW_IObuffer_OEA_25_w           =        1'b0           ;
                BMW_IObuffer_OEA_26_w           =        1'b0           ;
                BMW_IObuffer_OEA_27_w           =        1'b0           ;
                BMW_IObuffer_OEA_28_w           =        1'b0           ;
                BMW_IObuffer_OEA_29_w           =        1'b0           ;
                BMW_IObuffer_OEA_30_w           =        1'b0           ;
                BMW_IObuffer_OEA_31_w           =        1'b0           ;
                BMW_IObuffer_choose_reg_A_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_31_w  =        1'b0           ;
                
                BMW_IObuffer_B24_w              =        4'd0           ;
                BMW_IObuffer_B25_w              =        4'd0           ;
                BMW_IObuffer_B26_w              =        4'd0           ;
                BMW_IObuffer_B27_w              =        4'd0           ;
                BMW_IObuffer_B28_w              =        4'd0           ;       
                BMW_IObuffer_B29_w              =        4'd0           ;                 
                BMW_IObuffer_B30_w              =        4'd0           ;                 
                BMW_IObuffer_B31_w              =        4'd0           ;
                BMW_IObuffer_DIB24_w            =        64'd0          ;
                BMW_IObuffer_DIB25_w            =        64'd0          ;
                BMW_IObuffer_DIB26_w            =        64'd0          ;                                                                    
                BMW_IObuffer_DIB27_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB28_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB29_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB30_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB31_w            =        64'd0          ;  
                BMW_IObuffer_WEBN_24_w          =        1'b1           ;
                BMW_IObuffer_WEBN_25_w          =        1'b1           ;
                BMW_IObuffer_WEBN_26_w          =        1'b1           ;
                BMW_IObuffer_WEBN_27_w          =        1'b1           ;
                BMW_IObuffer_WEBN_28_w          =        1'b1           ;
                BMW_IObuffer_WEBN_29_w          =        1'b1           ;
                BMW_IObuffer_WEBN_30_w          =        1'b1           ;
                BMW_IObuffer_WEBN_31_w          =        1'b1           ;
                BMW_IObuffer_OEB_24_w           =        1'b0           ;
                BMW_IObuffer_OEB_25_w           =        1'b0           ;
                BMW_IObuffer_OEB_26_w           =        1'b0           ;
                BMW_IObuffer_OEB_27_w           =        1'b0           ;
                BMW_IObuffer_OEB_28_w           =        1'b0           ;
                BMW_IObuffer_OEB_29_w           =        1'b0           ;
                BMW_IObuffer_OEB_30_w           =        1'b0           ;
                BMW_IObuffer_OEB_31_w           =        1'b0           ;  
                BMW_IObuffer_choose_reg_B_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_31_w  =        1'b0           ;
                                                 
                
                
                
                //Buffer for Curent frame Y                        
                CurY_Ibuffer_A32_w              =        4'd0           ;                       
                CurY_Ibuffer_A33_w              =        4'd0           ; 
                CurY_Ibuffer_DIA32_w            =        64'd0          ;                                                             
                CurY_Ibuffer_DIA33_w            =        64'd0          ;  
                CurY_Ibuffer_WEAN_32_w          =        1'b1           ;          
                CurY_Ibuffer_WEAN_33_w          =        1'b1           ;          
                CurY_Ibuffer_OEA_32_w           =        1'b0           ;           
                CurY_Ibuffer_OEA_33_w           =        1'b0           ;           
                CurY_Ibuffer_choose_reg_A_32_w  =        1'b0           ;  
                CurY_Ibuffer_choose_reg_A_33_w  =        1'b0           ;  
                
                CurY_Ibuffer_B32_w              =        4'd0           ;                                                  
                CurY_Ibuffer_B33_w              =        4'd0           ;                                                                                                             
                CurY_Ibuffer_DIB32_w            =        64'd0          ;                                                                                                            
                CurY_Ibuffer_DIB33_w            =        64'd0          ;                                    
                CurY_Ibuffer_WEBN_32_w          =        1'b1           ;            
                CurY_Ibuffer_WEBN_33_w          =        1'b1           ;                                  
                CurY_Ibuffer_OEB_32_w           =        1'b0           ;             
                CurY_Ibuffer_OEB_33_w           =        1'b0           ;                                     
                CurY_Ibuffer_choose_reg_B_32_w  =        1'b0           ;    
                CurY_Ibuffer_choose_reg_B_33_w  =        1'b0           ;    

                
                
                //Buffer for Curent frame U                      
                CurU_Ibuffer_A34_w              =        4'd0           ;                         
                CurU_Ibuffer_A35_w              =        4'd0           ;  
                CurU_Ibuffer_DIA34_w            =        64'd0          ;                                                               
                CurU_Ibuffer_DIA35_w            =        64'd0          ;  
                CurU_Ibuffer_WEAN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEAN_35_w          =        1'b1           ;            
                CurU_Ibuffer_OEA_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEA_35_w           =        1'b0           ;             
                CurU_Ibuffer_choose_reg_A_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_A_35_w  =        1'b0           ;    
                
                CurU_Ibuffer_B34_w              =        4'd0           ;                                                  
                CurU_Ibuffer_B35_w              =        4'd0           ;                                                                                                                                 
                CurU_Ibuffer_DIB34_w            =        64'd0          ;                                                                                                            
                CurU_Ibuffer_DIB35_w            =        64'd0          ;                                     
                CurU_Ibuffer_WEBN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEBN_35_w          =        1'b1           ;                                
                CurU_Ibuffer_OEB_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEB_35_w           =        1'b0           ;                                    
                CurU_Ibuffer_choose_reg_B_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_B_35_w  =        1'b0           ;    
 
 
                
                //Buffer for Curent frame V                       
                CurV_Ibuffer_A36_w              =        4'd0           ;                        
                CurV_Ibuffer_A37_w              =        4'd0           ;                        
                CurV_Ibuffer_DIA36_w            =        64'd0          ;                                                               
                CurV_Ibuffer_DIA37_w            =        64'd0          ;    
                CurV_Ibuffer_WEAN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEAN_37_w          =        1'b1           ;            
                CurV_Ibuffer_OEA_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEA_37_w           =        1'b0           ;             
                CurV_Ibuffer_choose_reg_A_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_A_37_w  =        1'b0           ;    
                 
                CurV_Ibuffer_B36_w              =        4'd0           ;                                                                
                CurV_Ibuffer_B37_w              =        4'd0           ;  
                CurV_Ibuffer_DIB36_w            =        64'd0          ;                                                                                                             
                CurV_Ibuffer_DIB37_w            =        64'd0          ;    
                CurV_Ibuffer_WEBN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEBN_37_w          =        1'b1           ;                                    
                CurV_Ibuffer_OEB_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEB_37_w           =        1'b0           ;                                  
                CurV_Ibuffer_choose_reg_B_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_B_37_w  =        1'b0           ;    
 
                
                
                //Buffer for Mask
                Mask_Obuffer_A38_w              =        4'd0           ;                       
                Mask_Obuffer_DIA38_w            =        64'd0          ;  
                Mask_Obuffer_WEAN_38_w          =        1'b1           ;                  
                Mask_Obuffer_OEA_38_w           =        1'b0           ;                   
                Mask_Obuffer_choose_reg_A_38_w  =        1'b0           ;
                                                 
                Mask_Obuffer_B38_w              =        4'd0           ;                                                               
                Mask_Obuffer_DIB38_w            =        64'd0          ;                            
                Mask_Obuffer_WEBN_38_w          =        1'b1           ;                                            
                Mask_Obuffer_OEB_38_w           =        1'b0           ;                                  
                Mask_Obuffer_choose_reg_B_38_w  =        1'b0           ;           
                                                         

                
                               
            end                  
            
            `SEGSTATE_INPUT_BM_W:
            begin                
                
                
                                                
                //Buffer for Background Model Y
                BMY_IObuffer_A00_w              =        4'd0           ;
                BMY_IObuffer_A01_w              =        4'd0           ; 
                BMY_IObuffer_A02_w              =        4'd0           ; 
                BMY_IObuffer_A03_w              =        4'd0           ; 
                BMY_IObuffer_A04_w              =        4'd0           ; 
                BMY_IObuffer_A05_w              =        4'd0           ; 
                BMY_IObuffer_A06_w              =        4'd0           ;           
                BMY_IObuffer_A07_w              =        4'd0           ; 
                BMY_IObuffer_DIA00_w            =        64'd0          ; 
                BMY_IObuffer_DIA01_w            =        64'd0          ; 
                BMY_IObuffer_DIA02_w            =        64'd0          ; 
                BMY_IObuffer_DIA03_w            =        64'd0          ; 
                BMY_IObuffer_DIA04_w            =        64'd0          ; 
                BMY_IObuffer_DIA05_w            =        64'd0          ; 
                BMY_IObuffer_DIA06_w            =        64'd0          ; 
                BMY_IObuffer_DIA07_w            =        64'd0          ; 
                BMY_IObuffer_WEAN_00_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_01_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_02_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_03_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_04_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_05_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_06_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_07_w          =        1'b1           ;     
                BMY_IObuffer_OEA_00_w           =        1'b0           ;              
                BMY_IObuffer_OEA_01_w           =        1'b0           ;              
                BMY_IObuffer_OEA_02_w           =        1'b0           ;              
                BMY_IObuffer_OEA_03_w           =        1'b0           ;              
                BMY_IObuffer_OEA_04_w           =        1'b0           ;              
                BMY_IObuffer_OEA_05_w           =        1'b0           ;              
                BMY_IObuffer_OEA_06_w           =        1'b0           ;              
                BMY_IObuffer_OEA_07_w           =        1'b0           ;  
                BMY_IObuffer_choose_reg_A_00_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_01_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_02_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_03_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_04_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_05_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_06_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_07_w  =        1'b0           ;  
                
                BMY_IObuffer_B00_w              =        4'd0           ;
                BMY_IObuffer_B01_w              =        4'd0           ;
                BMY_IObuffer_B02_w              =        4'd0           ;
                BMY_IObuffer_B03_w              =        4'd0           ;
                BMY_IObuffer_B04_w              =        4'd0           ;
                BMY_IObuffer_B05_w              =        4'd0           ;
                BMY_IObuffer_B06_w              =        4'd0           ;
                BMY_IObuffer_B07_w              =        4'd0           ;
                BMY_IObuffer_DIB00_w            =        64'd0          ;
                BMY_IObuffer_DIB01_w            =        64'd0          ;
                BMY_IObuffer_DIB02_w            =        64'd0          ;
                BMY_IObuffer_DIB03_w            =        64'd0          ;
                BMY_IObuffer_DIB04_w            =        64'd0          ;
                BMY_IObuffer_DIB05_w            =        64'd0          ;
                BMY_IObuffer_DIB06_w            =        64'd0          ;
                BMY_IObuffer_DIB07_w            =        64'd0          ;
                BMY_IObuffer_WEBN_00_w          =        1'b1           ;
                BMY_IObuffer_WEBN_01_w          =        1'b1           ;
                BMY_IObuffer_WEBN_02_w          =        1'b1           ;
                BMY_IObuffer_WEBN_03_w          =        1'b1           ;
                BMY_IObuffer_WEBN_04_w          =        1'b1           ;
                BMY_IObuffer_WEBN_05_w          =        1'b1           ;
                BMY_IObuffer_WEBN_06_w          =        1'b1           ;
                BMY_IObuffer_WEBN_07_w          =        1'b1           ;
                BMY_IObuffer_OEB_00_w           =        1'b0           ;
                BMY_IObuffer_OEB_01_w           =        1'b0           ;
                BMY_IObuffer_OEB_02_w           =        1'b0           ;
                BMY_IObuffer_OEB_03_w           =        1'b0           ;
                BMY_IObuffer_OEB_04_w           =        1'b0           ;
                BMY_IObuffer_OEB_05_w           =        1'b0           ;
                BMY_IObuffer_OEB_06_w           =        1'b0           ;
                BMY_IObuffer_OEB_07_w           =        1'b0           ;
                BMY_IObuffer_choose_reg_B_00_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_01_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_02_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_03_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_04_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_05_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_06_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_07_w  =        1'b0           ;
                                                
                
                
                         
                //Buffer for Background Model U                         
                BMU_IObuffer_A08_w              =        4'd0           ;
                BMU_IObuffer_A09_w              =        4'd0           ;
                BMU_IObuffer_A10_w              =        4'd0           ;
                BMU_IObuffer_A11_w              =        4'd0           ;
                BMU_IObuffer_A12_w              =        4'd0           ;
                BMU_IObuffer_A13_w              =        4'd0           ;
                BMU_IObuffer_A14_w              =        4'd0           ;
                BMU_IObuffer_A15_w              =        4'd0           ;
                BMU_IObuffer_DIA08_w            =        64'd0          ;
                BMU_IObuffer_DIA09_w            =        64'd0          ;
                BMU_IObuffer_DIA10_w            =        64'd0          ;
                BMU_IObuffer_DIA11_w            =        64'd0          ;
                BMU_IObuffer_DIA12_w            =        64'd0          ;
                BMU_IObuffer_DIA13_w            =        64'd0          ;
                BMU_IObuffer_DIA14_w            =        64'd0          ;
                BMU_IObuffer_DIA15_w            =        64'd0          ;
                BMU_IObuffer_WEAN_08_w          =        1'b1           ;
                BMU_IObuffer_WEAN_09_w          =        1'b1           ;
                BMU_IObuffer_WEAN_10_w          =        1'b1           ;
                BMU_IObuffer_WEAN_11_w          =        1'b1           ;
                BMU_IObuffer_WEAN_12_w          =        1'b1           ;
                BMU_IObuffer_WEAN_13_w          =        1'b1           ;
                BMU_IObuffer_WEAN_14_w          =        1'b1           ;
                BMU_IObuffer_WEAN_15_w          =        1'b1           ;
                BMU_IObuffer_OEA_08_w           =        1'b0           ;
                BMU_IObuffer_OEA_09_w           =        1'b0           ;
                BMU_IObuffer_OEA_10_w           =        1'b0           ;
                BMU_IObuffer_OEA_11_w           =        1'b0           ;
                BMU_IObuffer_OEA_12_w           =        1'b0           ;
                BMU_IObuffer_OEA_13_w           =        1'b0           ;
                BMU_IObuffer_OEA_14_w           =        1'b0           ;
                BMU_IObuffer_OEA_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_A_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_15_w  =        1'b0           ;
                                                
                                                
                BMU_IObuffer_B08_w              =        4'd0           ;
                BMU_IObuffer_B09_w              =        4'd0           ;
                BMU_IObuffer_B10_w              =        4'd0           ;
                BMU_IObuffer_B11_w              =        4'd0           ;
                BMU_IObuffer_B12_w              =        4'd0           ;
                BMU_IObuffer_B13_w              =        4'd0           ;
                BMU_IObuffer_B14_w              =        4'd0           ;
                BMU_IObuffer_B15_w              =        4'd0           ;
                BMU_IObuffer_DIB08_w            =        64'd0          ;
                BMU_IObuffer_DIB09_w            =        64'd0          ;
                BMU_IObuffer_DIB10_w            =        64'd0          ;
                BMU_IObuffer_DIB11_w            =        64'd0          ;
                BMU_IObuffer_DIB12_w            =        64'd0          ;
                BMU_IObuffer_DIB13_w            =        64'd0          ;
                BMU_IObuffer_DIB14_w            =        64'd0          ;
                BMU_IObuffer_DIB15_w            =        64'd0          ;
                BMU_IObuffer_WEBN_08_w          =        1'b1           ;
                BMU_IObuffer_WEBN_09_w          =        1'b1           ;
                BMU_IObuffer_WEBN_10_w          =        1'b1           ;
                BMU_IObuffer_WEBN_11_w          =        1'b1           ;
                BMU_IObuffer_WEBN_12_w          =        1'b1           ;
                BMU_IObuffer_WEBN_13_w          =        1'b1           ;
                BMU_IObuffer_WEBN_14_w          =        1'b1           ;
                BMU_IObuffer_WEBN_15_w          =        1'b1           ;
                BMU_IObuffer_OEB_08_w           =        1'b0           ;
                BMU_IObuffer_OEB_09_w           =        1'b0           ;
                BMU_IObuffer_OEB_10_w           =        1'b0           ;
                BMU_IObuffer_OEB_11_w           =        1'b0           ;
                BMU_IObuffer_OEB_12_w           =        1'b0           ;
                BMU_IObuffer_OEB_13_w           =        1'b0           ;
                BMU_IObuffer_OEB_14_w           =        1'b0           ;
                BMU_IObuffer_OEB_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_B_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_15_w  =        1'b0           ;
                                             
                
                
                //Buffer for Background Model V
                BMV_IObuffer_A16_w              =        4'd0           ;
                BMV_IObuffer_A17_w              =        4'd0           ;
                BMV_IObuffer_A18_w              =        4'd0           ;
                BMV_IObuffer_A19_w              =        4'd0           ;
                BMV_IObuffer_A20_w              =        4'd0           ;
                BMV_IObuffer_A21_w              =        4'd0           ;
                BMV_IObuffer_A22_w              =        4'd0           ;
                BMV_IObuffer_A23_w              =        4'd0           ;
                BMV_IObuffer_DIA16_w            =        64'd0          ;
                BMV_IObuffer_DIA17_w            =        64'd0          ;
                BMV_IObuffer_DIA18_w            =        64'd0          ;
                BMV_IObuffer_DIA19_w            =        64'd0          ;
                BMV_IObuffer_DIA20_w            =        64'd0          ;
                BMV_IObuffer_DIA21_w            =        64'd0          ;
                BMV_IObuffer_DIA22_w            =        64'd0          ;
                BMV_IObuffer_DIA23_w            =        64'd0          ;
                BMV_IObuffer_WEAN_16_w          =        1'b1           ;
                BMV_IObuffer_WEAN_17_w          =        1'b1           ;
                BMV_IObuffer_WEAN_18_w          =        1'b1           ;
                BMV_IObuffer_WEAN_19_w          =        1'b1           ;
                BMV_IObuffer_WEAN_20_w          =        1'b1           ;
                BMV_IObuffer_WEAN_21_w          =        1'b1           ;
                BMV_IObuffer_WEAN_22_w          =        1'b1           ;
                BMV_IObuffer_WEAN_23_w          =        1'b1           ;
                BMV_IObuffer_OEA_16_w           =        1'b0           ;
                BMV_IObuffer_OEA_17_w           =        1'b0           ;
                BMV_IObuffer_OEA_18_w           =        1'b0           ;
                BMV_IObuffer_OEA_19_w           =        1'b0           ;
                BMV_IObuffer_OEA_20_w           =        1'b0           ;
                BMV_IObuffer_OEA_21_w           =        1'b0           ;
                BMV_IObuffer_OEA_22_w           =        1'b0           ;
                BMV_IObuffer_OEA_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_A_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_23_w  =        1'b0           ;
                              
                BMV_IObuffer_B16_w              =        4'd0           ;
                BMV_IObuffer_B17_w              =        4'd0           ;
                BMV_IObuffer_B18_w              =        4'd0           ;
                BMV_IObuffer_B19_w              =        4'd0           ;
                BMV_IObuffer_B20_w              =        4'd0           ;
                BMV_IObuffer_B21_w              =        4'd0           ;
                BMV_IObuffer_B22_w              =        4'd0           ;
                BMV_IObuffer_B23_w              =        4'd0           ;
                BMV_IObuffer_DIB16_w            =        64'd0          ;
                BMV_IObuffer_DIB17_w            =        64'd0          ;
                BMV_IObuffer_DIB18_w            =        64'd0          ;
                BMV_IObuffer_DIB19_w            =        64'd0          ;
                BMV_IObuffer_DIB20_w            =        64'd0          ;
                BMV_IObuffer_DIB21_w            =        64'd0          ;
                BMV_IObuffer_DIB22_w            =        64'd0          ;
                BMV_IObuffer_DIB23_w            =        64'd0          ;
                BMV_IObuffer_WEBN_16_w          =        1'b1           ;
                BMV_IObuffer_WEBN_17_w          =        1'b1           ;
                BMV_IObuffer_WEBN_18_w          =        1'b1           ;
                BMV_IObuffer_WEBN_19_w          =        1'b1           ;
                BMV_IObuffer_WEBN_20_w          =        1'b1           ;
                BMV_IObuffer_WEBN_21_w          =        1'b1           ;
                BMV_IObuffer_WEBN_22_w          =        1'b1           ;
                BMV_IObuffer_WEBN_23_w          =        1'b1           ;
                BMV_IObuffer_OEB_16_w           =        1'b0           ;
                BMV_IObuffer_OEB_17_w           =        1'b0           ;
                BMV_IObuffer_OEB_18_w           =        1'b0           ;
                BMV_IObuffer_OEB_19_w           =        1'b0           ;
                BMV_IObuffer_OEB_20_w           =        1'b0           ;
                BMV_IObuffer_OEB_21_w           =        1'b0           ;
                BMV_IObuffer_OEB_22_w           =        1'b0           ;
                BMV_IObuffer_OEB_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_B_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_23_w  =        1'b0           ;
                                               
                
                
                
                //Buffer for Background Model W
                 if( (Count_BMYUVW_ADDR_r >= 7'd0) && (Count_BMYUVW_ADDR_r < `ADDRNUMin1ELEMENT) )
                 begin 
                        BMW_IObuffer_A24_w              =        Count_BMYUVW_ADDR_r[3:0];
                        BMW_IObuffer_WEAN_24_w          =        1'b0           ;
                        BMW_IObuffer_OEA_24_w           =        1'b0           ;
                        BMW_IObuffer_choose_reg_A_24_w  =        1'b1           ;       
                 end             
                 else
                 begin
                        BMW_IObuffer_A24_w              =        4'd0           ;
                        BMW_IObuffer_WEAN_24_w          =        1'b1           ;  
                        BMW_IObuffer_OEA_24_w           =        1'b0           ; 
                        BMW_IObuffer_choose_reg_A_24_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin1ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin2ELEMENT) )
                 begin 
                        BMW_IObuffer_A25_w              =        CountBMYUVWSubAddrNumIn1Elem[3:0]               ;
                        BMW_IObuffer_WEAN_25_w          =        1'b0           ;
                        BMW_IObuffer_OEA_25_w           =        1'b0           ;
                        BMW_IObuffer_choose_reg_A_25_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMW_IObuffer_A25_w              =        4'd0           ; 
                        BMW_IObuffer_WEAN_25_w          =        1'b1           ;  
                        BMW_IObuffer_OEA_25_w           =        1'b0           ;    
                        BMW_IObuffer_choose_reg_A_25_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin2ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin3ELEMENT) )
                 begin  
                        BMW_IObuffer_A26_w              =        CountBMYUVWSubAddrNumIn2Elem[3:0]               ;
                        BMW_IObuffer_WEAN_26_w          =        1'b0           ;
                        BMW_IObuffer_OEA_26_w           =        1'b0           ;
                        BMW_IObuffer_choose_reg_A_26_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMW_IObuffer_A26_w              =        4'd0           ; 
                        BMW_IObuffer_WEAN_26_w          =        1'b1           ;    
                        BMW_IObuffer_OEA_26_w           =        1'b0           ;   
                        BMW_IObuffer_choose_reg_A_26_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin3ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin4ELEMENT) )
                 begin 
                        BMW_IObuffer_A27_w              =        CountBMYUVWSubAddrNumIn3Elem[3:0]               ;
                        BMW_IObuffer_WEAN_27_w          =        1'b0           ;
                        BMW_IObuffer_OEA_27_w           =        1'b0           ;
                        BMW_IObuffer_choose_reg_A_27_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMW_IObuffer_A27_w              =        4'd0           ; 
                        BMW_IObuffer_WEAN_27_w          =        1'b1           ;  
                        BMW_IObuffer_OEA_27_w           =        1'b0           ;    
                        BMW_IObuffer_choose_reg_A_27_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin4ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin5ELEMENT) )
                 begin 
                        BMW_IObuffer_A28_w              =        CountBMYUVWSubAddrNumIn4Elem[3:0]               ;
                        BMW_IObuffer_WEAN_28_w          =        1'b0           ;
                        BMW_IObuffer_OEA_28_w           =        1'b0           ;
                        BMW_IObuffer_choose_reg_A_28_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMW_IObuffer_A28_w              =        4'd0           ;
                        BMW_IObuffer_WEAN_28_w          =        1'b1           ; 
                        BMW_IObuffer_OEA_28_w           =        1'b0           ; 
                        BMW_IObuffer_choose_reg_A_28_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin5ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin6ELEMENT) )
                 begin 
                        BMW_IObuffer_A29_w              =        CountBMYUVWSubAddrNumIn5Elem[3:0]               ;
                        BMW_IObuffer_WEAN_29_w          =        1'b0           ;
                        BMW_IObuffer_OEA_29_w           =        1'b0           ;
                        BMW_IObuffer_choose_reg_A_29_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMW_IObuffer_A29_w              =        4'd0           ; 
                        BMW_IObuffer_WEAN_29_w          =        1'b1           ;
                        BMW_IObuffer_OEA_29_w           =        1'b0           ;  
                        BMW_IObuffer_choose_reg_A_29_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin6ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin7ELEMENT) )
                 begin 
                        BMW_IObuffer_A30_w              =        CountBMYUVWSubAddrNumIn6Elem[3:0]               ;
                        BMW_IObuffer_WEAN_30_w          =       1'b0            ;
                        BMW_IObuffer_OEA_30_w           =       1'b0            ;
                        BMW_IObuffer_choose_reg_A_30_w  =       1'b1            ;
                 end             
                 else
                 begin
                        BMW_IObuffer_A30_w              =        4'd0           ; 
                        BMW_IObuffer_WEAN_30_w          =        1'b1           ;
                        BMW_IObuffer_OEA_30_w           =        1'b0           ;              
                        BMW_IObuffer_choose_reg_A_30_w  =        1'b0           ;     
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin7ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin8ELEMENT) )
                 begin 
                        BMW_IObuffer_A31_w              =        CountBMYUVWSubAddrNumIn7Elem[3:0]               ;
                        BMW_IObuffer_WEAN_31_w          =        1'b0           ;
                        BMW_IObuffer_OEA_31_w           =        1'b0           ;
                        BMW_IObuffer_choose_reg_A_31_w  =        1'b1           ;
                 end             
                 else
                 begin
                        BMW_IObuffer_A31_w              =        4'd0           ;                                    
                        BMW_IObuffer_WEAN_31_w          =        1'b1           ; 
                        BMW_IObuffer_OEA_31_w           =        1'b0           ;              
                        BMW_IObuffer_choose_reg_A_31_w  =        1'b0           ;  
                 end 
                
                                
                BMW_IObuffer_DIA24_w            =        Seg_DataIn_r       ; 
                BMW_IObuffer_DIA25_w            =        Seg_DataIn_r       ; 
                BMW_IObuffer_DIA26_w            =        Seg_DataIn_r       ; 
                BMW_IObuffer_DIA27_w            =        Seg_DataIn_r       ; 
                BMW_IObuffer_DIA28_w            =        Seg_DataIn_r       ; 
                BMW_IObuffer_DIA29_w            =        Seg_DataIn_r       ; 
                BMW_IObuffer_DIA30_w            =        Seg_DataIn_r       ; 
                BMW_IObuffer_DIA31_w            =        Seg_DataIn_r       ; 

                BMW_IObuffer_B24_w              =        4'd0           ;
                BMW_IObuffer_B25_w              =        4'd0           ;
                BMW_IObuffer_B26_w              =        4'd0           ;
                BMW_IObuffer_B27_w              =        4'd0           ;
                BMW_IObuffer_B28_w              =        4'd0           ;       
                BMW_IObuffer_B29_w              =        4'd0           ;                 
                BMW_IObuffer_B30_w              =        4'd0           ;                 
                BMW_IObuffer_B31_w              =        4'd0           ;
                BMW_IObuffer_DIB24_w            =        64'd0          ;
                BMW_IObuffer_DIB25_w            =        64'd0          ;
                BMW_IObuffer_DIB26_w            =        64'd0          ;                                                                    
                BMW_IObuffer_DIB27_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB28_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB29_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB30_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB31_w            =        64'd0          ;  
                BMW_IObuffer_WEBN_24_w          =        1'b1           ;
                BMW_IObuffer_WEBN_25_w          =        1'b1           ;
                BMW_IObuffer_WEBN_26_w          =        1'b1           ;
                BMW_IObuffer_WEBN_27_w          =        1'b1           ;
                BMW_IObuffer_WEBN_28_w          =        1'b1           ;
                BMW_IObuffer_WEBN_29_w          =        1'b1           ;
                BMW_IObuffer_WEBN_30_w          =        1'b1           ;
                BMW_IObuffer_WEBN_31_w          =        1'b1           ;
                BMW_IObuffer_OEB_24_w           =        1'b0           ;
                BMW_IObuffer_OEB_25_w           =        1'b0           ;
                BMW_IObuffer_OEB_26_w           =        1'b0           ;
                BMW_IObuffer_OEB_27_w           =        1'b0           ;
                BMW_IObuffer_OEB_28_w           =        1'b0           ;
                BMW_IObuffer_OEB_29_w           =        1'b0           ;
                BMW_IObuffer_OEB_30_w           =        1'b0           ;
                BMW_IObuffer_OEB_31_w           =        1'b0           ;  
                BMW_IObuffer_choose_reg_B_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_31_w  =        1'b0           ;
                                                 
                
                
                
                //Buffer for Curent frame Y                        
                CurY_Ibuffer_A32_w              =        4'd0           ;                       
                CurY_Ibuffer_A33_w              =        4'd0           ; 
                CurY_Ibuffer_DIA32_w            =        64'd0          ;                                                             
                CurY_Ibuffer_DIA33_w            =        64'd0          ;  
                CurY_Ibuffer_WEAN_32_w          =        1'b1           ;          
                CurY_Ibuffer_WEAN_33_w          =        1'b1           ;          
                CurY_Ibuffer_OEA_32_w           =        1'b0           ;           
                CurY_Ibuffer_OEA_33_w           =        1'b0           ;           
                CurY_Ibuffer_choose_reg_A_32_w  =        1'b0           ;  
                CurY_Ibuffer_choose_reg_A_33_w  =        1'b0           ;  
                
                CurY_Ibuffer_B32_w              =        4'd0           ;                                                  
                CurY_Ibuffer_B33_w              =        4'd0           ;                                                                                                             
                CurY_Ibuffer_DIB32_w            =        64'd0          ;                                                                                                            
                CurY_Ibuffer_DIB33_w            =        64'd0          ;                                    
                CurY_Ibuffer_WEBN_32_w          =        1'b1           ;            
                CurY_Ibuffer_WEBN_33_w          =        1'b1           ;                                  
                CurY_Ibuffer_OEB_32_w           =        1'b0           ;             
                CurY_Ibuffer_OEB_33_w           =        1'b0           ;                                     
                CurY_Ibuffer_choose_reg_B_32_w  =        1'b0           ;    
                CurY_Ibuffer_choose_reg_B_33_w  =        1'b0           ;    

                
                
                //Buffer for Curent frame U                      
                CurU_Ibuffer_A34_w              =        4'd0           ;                         
                CurU_Ibuffer_A35_w              =        4'd0           ;  
                CurU_Ibuffer_DIA34_w            =        64'd0          ;                                                               
                CurU_Ibuffer_DIA35_w            =        64'd0          ;  
                CurU_Ibuffer_WEAN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEAN_35_w          =        1'b1           ;            
                CurU_Ibuffer_OEA_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEA_35_w           =        1'b0           ;             
                CurU_Ibuffer_choose_reg_A_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_A_35_w  =        1'b0           ;    
                
                CurU_Ibuffer_B34_w              =        4'd0           ;                                                  
                CurU_Ibuffer_B35_w              =        4'd0           ;                                                                                                                                 
                CurU_Ibuffer_DIB34_w            =        64'd0          ;                                                                                                            
                CurU_Ibuffer_DIB35_w            =        64'd0          ;                                     
                CurU_Ibuffer_WEBN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEBN_35_w          =        1'b1           ;                                
                CurU_Ibuffer_OEB_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEB_35_w           =        1'b0           ;                                    
                CurU_Ibuffer_choose_reg_B_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_B_35_w  =        1'b0           ;    
 
 
                
                //Buffer for Curent frame V                       
                CurV_Ibuffer_A36_w              =        4'd0           ;                        
                CurV_Ibuffer_A37_w              =        4'd0           ;                        
                CurV_Ibuffer_DIA36_w            =        64'd0          ;                                                               
                CurV_Ibuffer_DIA37_w            =        64'd0          ;    
                CurV_Ibuffer_WEAN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEAN_37_w          =        1'b1           ;            
                CurV_Ibuffer_OEA_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEA_37_w           =        1'b0           ;             
                CurV_Ibuffer_choose_reg_A_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_A_37_w  =        1'b0           ;    
                 
                CurV_Ibuffer_B36_w              =        4'd0           ;                                                                
                CurV_Ibuffer_B37_w              =        4'd0           ;  
                CurV_Ibuffer_DIB36_w            =        64'd0          ;                                                                                                             
                CurV_Ibuffer_DIB37_w            =        64'd0          ;    
                CurV_Ibuffer_WEBN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEBN_37_w          =        1'b1           ;                                    
                CurV_Ibuffer_OEB_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEB_37_w           =        1'b0           ;                                  
                CurV_Ibuffer_choose_reg_B_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_B_37_w  =        1'b0           ;    
 
                
                
                //Buffer for Mask
                Mask_Obuffer_A38_w              =        4'd0           ;                       
                Mask_Obuffer_DIA38_w            =        64'd0          ;  
                Mask_Obuffer_WEAN_38_w          =        1'b1           ;                  
                Mask_Obuffer_OEA_38_w           =        1'b0           ;                   
                Mask_Obuffer_choose_reg_A_38_w  =        1'b0           ;
                                                 
                Mask_Obuffer_B38_w              =        4'd0           ;                                                               
                Mask_Obuffer_DIB38_w            =        64'd0          ;                            
                Mask_Obuffer_WEBN_38_w          =        1'b1           ;                                            
                Mask_Obuffer_OEB_38_w           =        1'b0           ;                                  
                Mask_Obuffer_choose_reg_B_38_w  =        1'b0           ;           
                                                         

            end  
            
            `SEGSTATE_INPUT_CUR_Y:
            begin                
                
                
                                                
                //Buffer for Background Model Y
                BMY_IObuffer_A00_w              =        4'd0           ;
                BMY_IObuffer_A01_w              =        4'd0           ; 
                BMY_IObuffer_A02_w              =        4'd0           ; 
                BMY_IObuffer_A03_w              =        4'd0           ; 
                BMY_IObuffer_A04_w              =        4'd0           ; 
                BMY_IObuffer_A05_w              =        4'd0           ; 
                BMY_IObuffer_A06_w              =        4'd0           ;           
                BMY_IObuffer_A07_w              =        4'd0           ; 
                BMY_IObuffer_DIA00_w            =        64'd0          ; 
                BMY_IObuffer_DIA01_w            =        64'd0          ; 
                BMY_IObuffer_DIA02_w            =        64'd0          ; 
                BMY_IObuffer_DIA03_w            =        64'd0          ; 
                BMY_IObuffer_DIA04_w            =        64'd0          ; 
                BMY_IObuffer_DIA05_w            =        64'd0          ; 
                BMY_IObuffer_DIA06_w            =        64'd0          ; 
                BMY_IObuffer_DIA07_w            =        64'd0          ; 
                BMY_IObuffer_WEAN_00_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_01_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_02_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_03_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_04_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_05_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_06_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_07_w          =        1'b1           ;     
                BMY_IObuffer_OEA_00_w           =        1'b0           ;              
                BMY_IObuffer_OEA_01_w           =        1'b0           ;              
                BMY_IObuffer_OEA_02_w           =        1'b0           ;              
                BMY_IObuffer_OEA_03_w           =        1'b0           ;              
                BMY_IObuffer_OEA_04_w           =        1'b0           ;              
                BMY_IObuffer_OEA_05_w           =        1'b0           ;              
                BMY_IObuffer_OEA_06_w           =        1'b0           ;              
                BMY_IObuffer_OEA_07_w           =        1'b0           ;  
                BMY_IObuffer_choose_reg_A_00_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_01_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_02_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_03_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_04_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_05_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_06_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_07_w  =        1'b0           ;  
                
                BMY_IObuffer_B00_w              =        4'd0           ;
                BMY_IObuffer_B01_w              =        4'd0           ;
                BMY_IObuffer_B02_w              =        4'd0           ;
                BMY_IObuffer_B03_w              =        4'd0           ;
                BMY_IObuffer_B04_w              =        4'd0           ;
                BMY_IObuffer_B05_w              =        4'd0           ;
                BMY_IObuffer_B06_w              =        4'd0           ;
                BMY_IObuffer_B07_w              =        4'd0           ;
                BMY_IObuffer_DIB00_w            =        64'd0          ;
                BMY_IObuffer_DIB01_w            =        64'd0          ;
                BMY_IObuffer_DIB02_w            =        64'd0          ;
                BMY_IObuffer_DIB03_w            =        64'd0          ;
                BMY_IObuffer_DIB04_w            =        64'd0          ;
                BMY_IObuffer_DIB05_w            =        64'd0          ;
                BMY_IObuffer_DIB06_w            =        64'd0          ;
                BMY_IObuffer_DIB07_w            =        64'd0          ;
                BMY_IObuffer_WEBN_00_w          =        1'b1           ;
                BMY_IObuffer_WEBN_01_w          =        1'b1           ;
                BMY_IObuffer_WEBN_02_w          =        1'b1           ;
                BMY_IObuffer_WEBN_03_w          =        1'b1           ;
                BMY_IObuffer_WEBN_04_w          =        1'b1           ;
                BMY_IObuffer_WEBN_05_w          =        1'b1           ;
                BMY_IObuffer_WEBN_06_w          =        1'b1           ;
                BMY_IObuffer_WEBN_07_w          =        1'b1           ;
                BMY_IObuffer_OEB_00_w           =        1'b0           ;
                BMY_IObuffer_OEB_01_w           =        1'b0           ;
                BMY_IObuffer_OEB_02_w           =        1'b0           ;
                BMY_IObuffer_OEB_03_w           =        1'b0           ;
                BMY_IObuffer_OEB_04_w           =        1'b0           ;
                BMY_IObuffer_OEB_05_w           =        1'b0           ;
                BMY_IObuffer_OEB_06_w           =        1'b0           ;
                BMY_IObuffer_OEB_07_w           =        1'b0           ;
                BMY_IObuffer_choose_reg_B_00_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_01_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_02_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_03_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_04_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_05_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_06_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_07_w  =        1'b0           ;
                                                
                
                
                         
                //Buffer for Background Model U                         
                BMU_IObuffer_A08_w              =        4'd0           ;
                BMU_IObuffer_A09_w              =        4'd0           ;
                BMU_IObuffer_A10_w              =        4'd0           ;
                BMU_IObuffer_A11_w              =        4'd0           ;
                BMU_IObuffer_A12_w              =        4'd0           ;
                BMU_IObuffer_A13_w              =        4'd0           ;
                BMU_IObuffer_A14_w              =        4'd0           ;
                BMU_IObuffer_A15_w              =        4'd0           ;
                BMU_IObuffer_DIA08_w            =        64'd0          ;
                BMU_IObuffer_DIA09_w            =        64'd0          ;
                BMU_IObuffer_DIA10_w            =        64'd0          ;
                BMU_IObuffer_DIA11_w            =        64'd0          ;
                BMU_IObuffer_DIA12_w            =        64'd0          ;
                BMU_IObuffer_DIA13_w            =        64'd0          ;
                BMU_IObuffer_DIA14_w            =        64'd0          ;
                BMU_IObuffer_DIA15_w            =        64'd0          ;
                BMU_IObuffer_WEAN_08_w          =        1'b1           ;
                BMU_IObuffer_WEAN_09_w          =        1'b1           ;
                BMU_IObuffer_WEAN_10_w          =        1'b1           ;
                BMU_IObuffer_WEAN_11_w          =        1'b1           ;
                BMU_IObuffer_WEAN_12_w          =        1'b1           ;
                BMU_IObuffer_WEAN_13_w          =        1'b1           ;
                BMU_IObuffer_WEAN_14_w          =        1'b1           ;
                BMU_IObuffer_WEAN_15_w          =        1'b1           ;
                BMU_IObuffer_OEA_08_w           =        1'b0           ;
                BMU_IObuffer_OEA_09_w           =        1'b0           ;
                BMU_IObuffer_OEA_10_w           =        1'b0           ;
                BMU_IObuffer_OEA_11_w           =        1'b0           ;
                BMU_IObuffer_OEA_12_w           =        1'b0           ;
                BMU_IObuffer_OEA_13_w           =        1'b0           ;
                BMU_IObuffer_OEA_14_w           =        1'b0           ;
                BMU_IObuffer_OEA_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_A_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_15_w  =        1'b0           ;
                                                
                                                
                BMU_IObuffer_B08_w              =        4'd0           ;
                BMU_IObuffer_B09_w              =        4'd0           ;
                BMU_IObuffer_B10_w              =        4'd0           ;
                BMU_IObuffer_B11_w              =        4'd0           ;
                BMU_IObuffer_B12_w              =        4'd0           ;
                BMU_IObuffer_B13_w              =        4'd0           ;
                BMU_IObuffer_B14_w              =        4'd0           ;
                BMU_IObuffer_B15_w              =        4'd0           ;
                BMU_IObuffer_DIB08_w            =        64'd0          ;
                BMU_IObuffer_DIB09_w            =        64'd0          ;
                BMU_IObuffer_DIB10_w            =        64'd0          ;
                BMU_IObuffer_DIB11_w            =        64'd0          ;
                BMU_IObuffer_DIB12_w            =        64'd0          ;
                BMU_IObuffer_DIB13_w            =        64'd0          ;
                BMU_IObuffer_DIB14_w            =        64'd0          ;
                BMU_IObuffer_DIB15_w            =        64'd0          ;
                BMU_IObuffer_WEBN_08_w          =        1'b1           ;
                BMU_IObuffer_WEBN_09_w          =        1'b1           ;
                BMU_IObuffer_WEBN_10_w          =        1'b1           ;
                BMU_IObuffer_WEBN_11_w          =        1'b1           ;
                BMU_IObuffer_WEBN_12_w          =        1'b1           ;
                BMU_IObuffer_WEBN_13_w          =        1'b1           ;
                BMU_IObuffer_WEBN_14_w          =        1'b1           ;
                BMU_IObuffer_WEBN_15_w          =        1'b1           ;
                BMU_IObuffer_OEB_08_w           =        1'b0           ;
                BMU_IObuffer_OEB_09_w           =        1'b0           ;
                BMU_IObuffer_OEB_10_w           =        1'b0           ;
                BMU_IObuffer_OEB_11_w           =        1'b0           ;
                BMU_IObuffer_OEB_12_w           =        1'b0           ;
                BMU_IObuffer_OEB_13_w           =        1'b0           ;
                BMU_IObuffer_OEB_14_w           =        1'b0           ;
                BMU_IObuffer_OEB_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_B_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_15_w  =        1'b0           ;
                                             
                
                
                //Buffer for Background Model V
                BMV_IObuffer_A16_w              =        4'd0           ;
                BMV_IObuffer_A17_w              =        4'd0           ;
                BMV_IObuffer_A18_w              =        4'd0           ;
                BMV_IObuffer_A19_w              =        4'd0           ;
                BMV_IObuffer_A20_w              =        4'd0           ;
                BMV_IObuffer_A21_w              =        4'd0           ;
                BMV_IObuffer_A22_w              =        4'd0           ;
                BMV_IObuffer_A23_w              =        4'd0           ;
                BMV_IObuffer_DIA16_w            =        64'd0          ;
                BMV_IObuffer_DIA17_w            =        64'd0          ;
                BMV_IObuffer_DIA18_w            =        64'd0          ;
                BMV_IObuffer_DIA19_w            =        64'd0          ;
                BMV_IObuffer_DIA20_w            =        64'd0          ;
                BMV_IObuffer_DIA21_w            =        64'd0          ;
                BMV_IObuffer_DIA22_w            =        64'd0          ;
                BMV_IObuffer_DIA23_w            =        64'd0          ;
                BMV_IObuffer_WEAN_16_w          =        1'b1           ;
                BMV_IObuffer_WEAN_17_w          =        1'b1           ;
                BMV_IObuffer_WEAN_18_w          =        1'b1           ;
                BMV_IObuffer_WEAN_19_w          =        1'b1           ;
                BMV_IObuffer_WEAN_20_w          =        1'b1           ;
                BMV_IObuffer_WEAN_21_w          =        1'b1           ;
                BMV_IObuffer_WEAN_22_w          =        1'b1           ;
                BMV_IObuffer_WEAN_23_w          =        1'b1           ;
                BMV_IObuffer_OEA_16_w           =        1'b0           ;
                BMV_IObuffer_OEA_17_w           =        1'b0           ;
                BMV_IObuffer_OEA_18_w           =        1'b0           ;
                BMV_IObuffer_OEA_19_w           =        1'b0           ;
                BMV_IObuffer_OEA_20_w           =        1'b0           ;
                BMV_IObuffer_OEA_21_w           =        1'b0           ;
                BMV_IObuffer_OEA_22_w           =        1'b0           ;
                BMV_IObuffer_OEA_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_A_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_23_w  =        1'b0           ;
                              
                BMV_IObuffer_B16_w              =        4'd0           ;
                BMV_IObuffer_B17_w              =        4'd0           ;
                BMV_IObuffer_B18_w              =        4'd0           ;
                BMV_IObuffer_B19_w              =        4'd0           ;
                BMV_IObuffer_B20_w              =        4'd0           ;
                BMV_IObuffer_B21_w              =        4'd0           ;
                BMV_IObuffer_B22_w              =        4'd0           ;
                BMV_IObuffer_B23_w              =        4'd0           ;
                BMV_IObuffer_DIB16_w            =        64'd0          ;
                BMV_IObuffer_DIB17_w            =        64'd0          ;
                BMV_IObuffer_DIB18_w            =        64'd0          ;
                BMV_IObuffer_DIB19_w            =        64'd0          ;
                BMV_IObuffer_DIB20_w            =        64'd0          ;
                BMV_IObuffer_DIB21_w            =        64'd0          ;
                BMV_IObuffer_DIB22_w            =        64'd0          ;
                BMV_IObuffer_DIB23_w            =        64'd0          ;
                BMV_IObuffer_WEBN_16_w          =        1'b1           ;
                BMV_IObuffer_WEBN_17_w          =        1'b1           ;
                BMV_IObuffer_WEBN_18_w          =        1'b1           ;
                BMV_IObuffer_WEBN_19_w          =        1'b1           ;
                BMV_IObuffer_WEBN_20_w          =        1'b1           ;
                BMV_IObuffer_WEBN_21_w          =        1'b1           ;
                BMV_IObuffer_WEBN_22_w          =        1'b1           ;
                BMV_IObuffer_WEBN_23_w          =        1'b1           ;
                BMV_IObuffer_OEB_16_w           =        1'b0           ;
                BMV_IObuffer_OEB_17_w           =        1'b0           ;
                BMV_IObuffer_OEB_18_w           =        1'b0           ;
                BMV_IObuffer_OEB_19_w           =        1'b0           ;
                BMV_IObuffer_OEB_20_w           =        1'b0           ;
                BMV_IObuffer_OEB_21_w           =        1'b0           ;
                BMV_IObuffer_OEB_22_w           =        1'b0           ;
                BMV_IObuffer_OEB_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_B_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_23_w  =        1'b0           ;
                                               
                
                
                
                //Buffer for Background Model W
                BMW_IObuffer_A24_w              =        4'd0           ;
                BMW_IObuffer_A25_w              =        4'd0           ;
                BMW_IObuffer_A26_w              =        4'd0           ;
                BMW_IObuffer_A27_w              =        4'd0           ;
                BMW_IObuffer_A28_w              =        4'd0           ;
                BMW_IObuffer_A29_w              =        4'd0           ;
                BMW_IObuffer_A30_w              =        4'd0           ;
                BMW_IObuffer_A31_w              =        4'd0           ;
                BMW_IObuffer_DIA24_w            =        64'd0          ;                                        
                BMW_IObuffer_DIA25_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA26_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA27_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA28_w            =        64'd0          ;                           
                BMW_IObuffer_DIA29_w            =        64'd0          ;                               
                BMW_IObuffer_DIA30_w            =        64'd0          ;                               
                BMW_IObuffer_DIA31_w            =        64'd0          ;
                BMW_IObuffer_WEAN_24_w          =        1'b1           ;
                BMW_IObuffer_WEAN_25_w          =        1'b1           ;
                BMW_IObuffer_WEAN_26_w          =        1'b1           ;
                BMW_IObuffer_WEAN_27_w          =        1'b1           ;
                BMW_IObuffer_WEAN_28_w          =        1'b1           ;
                BMW_IObuffer_WEAN_29_w          =        1'b1           ;
                BMW_IObuffer_WEAN_30_w          =        1'b1           ;
                BMW_IObuffer_WEAN_31_w          =        1'b1           ;
                BMW_IObuffer_OEA_24_w           =        1'b0           ;
                BMW_IObuffer_OEA_25_w           =        1'b0           ;
                BMW_IObuffer_OEA_26_w           =        1'b0           ;
                BMW_IObuffer_OEA_27_w           =        1'b0           ;
                BMW_IObuffer_OEA_28_w           =        1'b0           ;
                BMW_IObuffer_OEA_29_w           =        1'b0           ;
                BMW_IObuffer_OEA_30_w           =        1'b0           ;
                BMW_IObuffer_OEA_31_w           =        1'b0           ;
                BMW_IObuffer_choose_reg_A_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_31_w  =        1'b0           ;
                
                BMW_IObuffer_B24_w              =        4'd0           ;
                BMW_IObuffer_B25_w              =        4'd0           ;
                BMW_IObuffer_B26_w              =        4'd0           ;
                BMW_IObuffer_B27_w              =        4'd0           ;
                BMW_IObuffer_B28_w              =        4'd0           ;       
                BMW_IObuffer_B29_w              =        4'd0           ;                 
                BMW_IObuffer_B30_w              =        4'd0           ;                 
                BMW_IObuffer_B31_w              =        4'd0           ;
                BMW_IObuffer_DIB24_w            =        64'd0          ;
                BMW_IObuffer_DIB25_w            =        64'd0          ;
                BMW_IObuffer_DIB26_w            =        64'd0          ;                                                                    
                BMW_IObuffer_DIB27_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB28_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB29_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB30_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB31_w            =        64'd0          ;  
                BMW_IObuffer_WEBN_24_w          =        1'b1           ;
                BMW_IObuffer_WEBN_25_w          =        1'b1           ;
                BMW_IObuffer_WEBN_26_w          =        1'b1           ;
                BMW_IObuffer_WEBN_27_w          =        1'b1           ;
                BMW_IObuffer_WEBN_28_w          =        1'b1           ;
                BMW_IObuffer_WEBN_29_w          =        1'b1           ;
                BMW_IObuffer_WEBN_30_w          =        1'b1           ;
                BMW_IObuffer_WEBN_31_w          =        1'b1           ;
                BMW_IObuffer_OEB_24_w           =        1'b0           ;
                BMW_IObuffer_OEB_25_w           =        1'b0           ;
                BMW_IObuffer_OEB_26_w           =        1'b0           ;
                BMW_IObuffer_OEB_27_w           =        1'b0           ;
                BMW_IObuffer_OEB_28_w           =        1'b0           ;
                BMW_IObuffer_OEB_29_w           =        1'b0           ;
                BMW_IObuffer_OEB_30_w           =        1'b0           ;
                BMW_IObuffer_OEB_31_w           =        1'b0           ;  
                BMW_IObuffer_choose_reg_B_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_31_w  =        1'b0           ;
                                                 
                
                
                
                //Buffer for Curent frame Y
                
                if( (Count_CURYUV_ADDR_r >= 5'd0) && (Count_CURYUV_ADDR_r < `ADDRNUMin1ELEMENT) )
                 begin 
                        CurY_Ibuffer_A32_w              =        Count_CURYUV_ADDR_r[3:0];
                        CurY_Ibuffer_WEAN_32_w          =        1'b0           ;
                        CurY_Ibuffer_OEA_32_w           =        1'b0           ;
                        CurY_Ibuffer_choose_reg_A_32_w  =        1'b1           ;       
                 end             
                 else
                 begin
                        CurY_Ibuffer_A32_w              =        4'd0           ;
                        CurY_Ibuffer_WEAN_32_w          =        1'b1           ;  
                        CurY_Ibuffer_OEA_32_w           =        1'b0           ; 
                        CurY_Ibuffer_choose_reg_A_32_w  =        1'b0           ;     
                 end
                 
                 if( (Count_CURYUV_ADDR_r >= `ADDRNUMin1ELEMENT) && (Count_CURYUV_ADDR_r < `ADDRNUMin2ELEMENT) )
                 begin 
                        CurY_Ibuffer_A33_w              =        CountCURYUVSubAddrNumIn1Elem[3:0];
                        CurY_Ibuffer_WEAN_33_w          =        1'b0           ;
                        CurY_Ibuffer_OEA_33_w           =        1'b0           ;
                        CurY_Ibuffer_choose_reg_A_33_w  =        1'b1           ;       
                 end             
                 else
                 begin
                        CurY_Ibuffer_A33_w              =        4'd0           ;
                        CurY_Ibuffer_WEAN_33_w          =        1'b1           ;  
                        CurY_Ibuffer_OEA_33_w           =        1'b0           ; 
                        CurY_Ibuffer_choose_reg_A_33_w  =        1'b0           ;     
                 end
                                
                CurY_Ibuffer_DIA32_w            =        Seg_DataIn_r               ;                                                             
                CurY_Ibuffer_DIA33_w            =        Seg_DataIn_r               ; 
                



                
                
                CurY_Ibuffer_B32_w              =        4'd0           ;                                                  
                CurY_Ibuffer_B33_w              =        4'd0           ;                                                                                                             
                CurY_Ibuffer_DIB32_w            =        64'd0          ;                                                                                                            
                CurY_Ibuffer_DIB33_w            =        64'd0          ;                                    
                CurY_Ibuffer_WEBN_32_w          =        1'b1           ;            
                CurY_Ibuffer_WEBN_33_w          =        1'b1           ;                                  
                CurY_Ibuffer_OEB_32_w           =        1'b0           ;             
                CurY_Ibuffer_OEB_33_w           =        1'b0           ;                                     
                CurY_Ibuffer_choose_reg_B_32_w  =        1'b0           ;    
                CurY_Ibuffer_choose_reg_B_33_w  =        1'b0           ;    

                
                
                //Buffer for Curent frame U                      
                CurU_Ibuffer_A34_w              =        4'd0           ;                         
                CurU_Ibuffer_A35_w              =        4'd0           ;  
                CurU_Ibuffer_DIA34_w            =        64'd0          ;                                                               
                CurU_Ibuffer_DIA35_w            =        64'd0          ;  
                CurU_Ibuffer_WEAN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEAN_35_w          =        1'b1           ;            
                CurU_Ibuffer_OEA_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEA_35_w           =        1'b0           ;             
                CurU_Ibuffer_choose_reg_A_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_A_35_w  =        1'b0           ;    
                
                CurU_Ibuffer_B34_w              =        4'd0           ;                                                  
                CurU_Ibuffer_B35_w              =        4'd0           ;                                                                                                                                 
                CurU_Ibuffer_DIB34_w            =        64'd0          ;                                                                                                            
                CurU_Ibuffer_DIB35_w            =        64'd0          ;                                     
                CurU_Ibuffer_WEBN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEBN_35_w          =        1'b1           ;                                
                CurU_Ibuffer_OEB_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEB_35_w           =        1'b0           ;                                    
                CurU_Ibuffer_choose_reg_B_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_B_35_w  =        1'b0           ;    
 
 
                
                //Buffer for Curent frame V                       
                CurV_Ibuffer_A36_w              =        4'd0           ;                        
                CurV_Ibuffer_A37_w              =        4'd0           ;                        
                CurV_Ibuffer_DIA36_w            =        64'd0          ;                                                               
                CurV_Ibuffer_DIA37_w            =        64'd0          ;    
                CurV_Ibuffer_WEAN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEAN_37_w          =        1'b1           ;            
                CurV_Ibuffer_OEA_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEA_37_w           =        1'b0           ;             
                CurV_Ibuffer_choose_reg_A_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_A_37_w  =        1'b0           ;    
                 
                CurV_Ibuffer_B36_w              =        4'd0           ;                                                                
                CurV_Ibuffer_B37_w              =        4'd0           ;  
                CurV_Ibuffer_DIB36_w            =        64'd0          ;                                                                                                             
                CurV_Ibuffer_DIB37_w            =        64'd0          ;    
                CurV_Ibuffer_WEBN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEBN_37_w          =        1'b1           ;                                    
                CurV_Ibuffer_OEB_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEB_37_w           =        1'b0           ;                                  
                CurV_Ibuffer_choose_reg_B_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_B_37_w  =        1'b0           ;    
 
                
                
                //Buffer for Mask
                Mask_Obuffer_A38_w              =        4'd0           ;                       
                Mask_Obuffer_DIA38_w            =        64'd0          ;  
                Mask_Obuffer_WEAN_38_w          =        1'b1           ;                  
                Mask_Obuffer_OEA_38_w           =        1'b0           ;                   
                Mask_Obuffer_choose_reg_A_38_w  =        1'b0           ;
                                                 
                Mask_Obuffer_B38_w              =        4'd0           ;                                                               
                Mask_Obuffer_DIB38_w            =        64'd0          ;                            
                Mask_Obuffer_WEBN_38_w          =        1'b1           ;                                            
                Mask_Obuffer_OEB_38_w           =        1'b0           ;                                  
                Mask_Obuffer_choose_reg_B_38_w  =        1'b0           ;           
                                                         



            end                  
            
            `SEGSTATE_INPUT_CUR_U:
            begin               
                
                
                                                
                //Buffer for Background Model Y
                BMY_IObuffer_A00_w              =        4'd0           ;
                BMY_IObuffer_A01_w              =        4'd0           ; 
                BMY_IObuffer_A02_w              =        4'd0           ; 
                BMY_IObuffer_A03_w              =        4'd0           ; 
                BMY_IObuffer_A04_w              =        4'd0           ; 
                BMY_IObuffer_A05_w              =        4'd0           ; 
                BMY_IObuffer_A06_w              =        4'd0           ;           
                BMY_IObuffer_A07_w              =        4'd0           ; 
                BMY_IObuffer_DIA00_w            =        64'd0          ; 
                BMY_IObuffer_DIA01_w            =        64'd0          ; 
                BMY_IObuffer_DIA02_w            =        64'd0          ; 
                BMY_IObuffer_DIA03_w            =        64'd0          ; 
                BMY_IObuffer_DIA04_w            =        64'd0          ; 
                BMY_IObuffer_DIA05_w            =        64'd0          ; 
                BMY_IObuffer_DIA06_w            =        64'd0          ; 
                BMY_IObuffer_DIA07_w            =        64'd0          ; 
                BMY_IObuffer_WEAN_00_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_01_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_02_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_03_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_04_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_05_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_06_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_07_w          =        1'b1           ;     
                BMY_IObuffer_OEA_00_w           =        1'b0           ;              
                BMY_IObuffer_OEA_01_w           =        1'b0           ;              
                BMY_IObuffer_OEA_02_w           =        1'b0           ;              
                BMY_IObuffer_OEA_03_w           =        1'b0           ;              
                BMY_IObuffer_OEA_04_w           =        1'b0           ;              
                BMY_IObuffer_OEA_05_w           =        1'b0           ;              
                BMY_IObuffer_OEA_06_w           =        1'b0           ;              
                BMY_IObuffer_OEA_07_w           =        1'b0           ;  
                BMY_IObuffer_choose_reg_A_00_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_01_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_02_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_03_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_04_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_05_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_06_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_07_w  =        1'b0           ;  
                
                BMY_IObuffer_B00_w              =        4'd0           ;
                BMY_IObuffer_B01_w              =        4'd0           ;
                BMY_IObuffer_B02_w              =        4'd0           ;
                BMY_IObuffer_B03_w              =        4'd0           ;
                BMY_IObuffer_B04_w              =        4'd0           ;
                BMY_IObuffer_B05_w              =        4'd0           ;
                BMY_IObuffer_B06_w              =        4'd0           ;
                BMY_IObuffer_B07_w              =        4'd0           ;
                BMY_IObuffer_DIB00_w            =        64'd0          ;
                BMY_IObuffer_DIB01_w            =        64'd0          ;
                BMY_IObuffer_DIB02_w            =        64'd0          ;
                BMY_IObuffer_DIB03_w            =        64'd0          ;
                BMY_IObuffer_DIB04_w            =        64'd0          ;
                BMY_IObuffer_DIB05_w            =        64'd0          ;
                BMY_IObuffer_DIB06_w            =        64'd0          ;
                BMY_IObuffer_DIB07_w            =        64'd0          ;
                BMY_IObuffer_WEBN_00_w          =        1'b1           ;
                BMY_IObuffer_WEBN_01_w          =        1'b1           ;
                BMY_IObuffer_WEBN_02_w          =        1'b1           ;
                BMY_IObuffer_WEBN_03_w          =        1'b1           ;
                BMY_IObuffer_WEBN_04_w          =        1'b1           ;
                BMY_IObuffer_WEBN_05_w          =        1'b1           ;
                BMY_IObuffer_WEBN_06_w          =        1'b1           ;
                BMY_IObuffer_WEBN_07_w          =        1'b1           ;
                BMY_IObuffer_OEB_00_w           =        1'b0           ;
                BMY_IObuffer_OEB_01_w           =        1'b0           ;
                BMY_IObuffer_OEB_02_w           =        1'b0           ;
                BMY_IObuffer_OEB_03_w           =        1'b0           ;
                BMY_IObuffer_OEB_04_w           =        1'b0           ;
                BMY_IObuffer_OEB_05_w           =        1'b0           ;
                BMY_IObuffer_OEB_06_w           =        1'b0           ;
                BMY_IObuffer_OEB_07_w           =        1'b0           ;
                BMY_IObuffer_choose_reg_B_00_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_01_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_02_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_03_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_04_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_05_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_06_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_07_w  =        1'b0           ;
                                                
                
                
                         
                //Buffer for Background Model U                         
                BMU_IObuffer_A08_w              =        4'd0           ;
                BMU_IObuffer_A09_w              =        4'd0           ;
                BMU_IObuffer_A10_w              =        4'd0           ;
                BMU_IObuffer_A11_w              =        4'd0           ;
                BMU_IObuffer_A12_w              =        4'd0           ;
                BMU_IObuffer_A13_w              =        4'd0           ;
                BMU_IObuffer_A14_w              =        4'd0           ;
                BMU_IObuffer_A15_w              =        4'd0           ;
                BMU_IObuffer_DIA08_w            =        64'd0          ;
                BMU_IObuffer_DIA09_w            =        64'd0          ;
                BMU_IObuffer_DIA10_w            =        64'd0          ;
                BMU_IObuffer_DIA11_w            =        64'd0          ;
                BMU_IObuffer_DIA12_w            =        64'd0          ;
                BMU_IObuffer_DIA13_w            =        64'd0          ;
                BMU_IObuffer_DIA14_w            =        64'd0          ;
                BMU_IObuffer_DIA15_w            =        64'd0          ;
                BMU_IObuffer_WEAN_08_w          =        1'b1           ;
                BMU_IObuffer_WEAN_09_w          =        1'b1           ;
                BMU_IObuffer_WEAN_10_w          =        1'b1           ;
                BMU_IObuffer_WEAN_11_w          =        1'b1           ;
                BMU_IObuffer_WEAN_12_w          =        1'b1           ;
                BMU_IObuffer_WEAN_13_w          =        1'b1           ;
                BMU_IObuffer_WEAN_14_w          =        1'b1           ;
                BMU_IObuffer_WEAN_15_w          =        1'b1           ;
                BMU_IObuffer_OEA_08_w           =        1'b0           ;
                BMU_IObuffer_OEA_09_w           =        1'b0           ;
                BMU_IObuffer_OEA_10_w           =        1'b0           ;
                BMU_IObuffer_OEA_11_w           =        1'b0           ;
                BMU_IObuffer_OEA_12_w           =        1'b0           ;
                BMU_IObuffer_OEA_13_w           =        1'b0           ;
                BMU_IObuffer_OEA_14_w           =        1'b0           ;
                BMU_IObuffer_OEA_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_A_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_15_w  =        1'b0           ;
                                                
                                                
                BMU_IObuffer_B08_w              =        4'd0           ;
                BMU_IObuffer_B09_w              =        4'd0           ;
                BMU_IObuffer_B10_w              =        4'd0           ;
                BMU_IObuffer_B11_w              =        4'd0           ;
                BMU_IObuffer_B12_w              =        4'd0           ;
                BMU_IObuffer_B13_w              =        4'd0           ;
                BMU_IObuffer_B14_w              =        4'd0           ;
                BMU_IObuffer_B15_w              =        4'd0           ;
                BMU_IObuffer_DIB08_w            =        64'd0          ;
                BMU_IObuffer_DIB09_w            =        64'd0          ;
                BMU_IObuffer_DIB10_w            =        64'd0          ;
                BMU_IObuffer_DIB11_w            =        64'd0          ;
                BMU_IObuffer_DIB12_w            =        64'd0          ;
                BMU_IObuffer_DIB13_w            =        64'd0          ;
                BMU_IObuffer_DIB14_w            =        64'd0          ;
                BMU_IObuffer_DIB15_w            =        64'd0          ;
                BMU_IObuffer_WEBN_08_w          =        1'b1           ;
                BMU_IObuffer_WEBN_09_w          =        1'b1           ;
                BMU_IObuffer_WEBN_10_w          =        1'b1           ;
                BMU_IObuffer_WEBN_11_w          =        1'b1           ;
                BMU_IObuffer_WEBN_12_w          =        1'b1           ;
                BMU_IObuffer_WEBN_13_w          =        1'b1           ;
                BMU_IObuffer_WEBN_14_w          =        1'b1           ;
                BMU_IObuffer_WEBN_15_w          =        1'b1           ;
                BMU_IObuffer_OEB_08_w           =        1'b0           ;
                BMU_IObuffer_OEB_09_w           =        1'b0           ;
                BMU_IObuffer_OEB_10_w           =        1'b0           ;
                BMU_IObuffer_OEB_11_w           =        1'b0           ;
                BMU_IObuffer_OEB_12_w           =        1'b0           ;
                BMU_IObuffer_OEB_13_w           =        1'b0           ;
                BMU_IObuffer_OEB_14_w           =        1'b0           ;
                BMU_IObuffer_OEB_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_B_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_15_w  =        1'b0           ;
                                             
                
                
                //Buffer for Background Model V
                BMV_IObuffer_A16_w              =        4'd0           ;
                BMV_IObuffer_A17_w              =        4'd0           ;
                BMV_IObuffer_A18_w              =        4'd0           ;
                BMV_IObuffer_A19_w              =        4'd0           ;
                BMV_IObuffer_A20_w              =        4'd0           ;
                BMV_IObuffer_A21_w              =        4'd0           ;
                BMV_IObuffer_A22_w              =        4'd0           ;
                BMV_IObuffer_A23_w              =        4'd0           ;
                BMV_IObuffer_DIA16_w            =        64'd0          ;
                BMV_IObuffer_DIA17_w            =        64'd0          ;
                BMV_IObuffer_DIA18_w            =        64'd0          ;
                BMV_IObuffer_DIA19_w            =        64'd0          ;
                BMV_IObuffer_DIA20_w            =        64'd0          ;
                BMV_IObuffer_DIA21_w            =        64'd0          ;
                BMV_IObuffer_DIA22_w            =        64'd0          ;
                BMV_IObuffer_DIA23_w            =        64'd0          ;
                BMV_IObuffer_WEAN_16_w          =        1'b1           ;
                BMV_IObuffer_WEAN_17_w          =        1'b1           ;
                BMV_IObuffer_WEAN_18_w          =        1'b1           ;
                BMV_IObuffer_WEAN_19_w          =        1'b1           ;
                BMV_IObuffer_WEAN_20_w          =        1'b1           ;
                BMV_IObuffer_WEAN_21_w          =        1'b1           ;
                BMV_IObuffer_WEAN_22_w          =        1'b1           ;
                BMV_IObuffer_WEAN_23_w          =        1'b1           ;
                BMV_IObuffer_OEA_16_w           =        1'b0           ;
                BMV_IObuffer_OEA_17_w           =        1'b0           ;
                BMV_IObuffer_OEA_18_w           =        1'b0           ;
                BMV_IObuffer_OEA_19_w           =        1'b0           ;
                BMV_IObuffer_OEA_20_w           =        1'b0           ;
                BMV_IObuffer_OEA_21_w           =        1'b0           ;
                BMV_IObuffer_OEA_22_w           =        1'b0           ;
                BMV_IObuffer_OEA_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_A_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_23_w  =        1'b0           ;
                              
                BMV_IObuffer_B16_w              =        4'd0           ;
                BMV_IObuffer_B17_w              =        4'd0           ;
                BMV_IObuffer_B18_w              =        4'd0           ;
                BMV_IObuffer_B19_w              =        4'd0           ;
                BMV_IObuffer_B20_w              =        4'd0           ;
                BMV_IObuffer_B21_w              =        4'd0           ;
                BMV_IObuffer_B22_w              =        4'd0           ;
                BMV_IObuffer_B23_w              =        4'd0           ;
                BMV_IObuffer_DIB16_w            =        64'd0          ;
                BMV_IObuffer_DIB17_w            =        64'd0          ;
                BMV_IObuffer_DIB18_w            =        64'd0          ;
                BMV_IObuffer_DIB19_w            =        64'd0          ;
                BMV_IObuffer_DIB20_w            =        64'd0          ;
                BMV_IObuffer_DIB21_w            =        64'd0          ;
                BMV_IObuffer_DIB22_w            =        64'd0          ;
                BMV_IObuffer_DIB23_w            =        64'd0          ;
                BMV_IObuffer_WEBN_16_w          =        1'b1           ;
                BMV_IObuffer_WEBN_17_w          =        1'b1           ;
                BMV_IObuffer_WEBN_18_w          =        1'b1           ;
                BMV_IObuffer_WEBN_19_w          =        1'b1           ;
                BMV_IObuffer_WEBN_20_w          =        1'b1           ;
                BMV_IObuffer_WEBN_21_w          =        1'b1           ;
                BMV_IObuffer_WEBN_22_w          =        1'b1           ;
                BMV_IObuffer_WEBN_23_w          =        1'b1           ;
                BMV_IObuffer_OEB_16_w           =        1'b0           ;
                BMV_IObuffer_OEB_17_w           =        1'b0           ;
                BMV_IObuffer_OEB_18_w           =        1'b0           ;
                BMV_IObuffer_OEB_19_w           =        1'b0           ;
                BMV_IObuffer_OEB_20_w           =        1'b0           ;
                BMV_IObuffer_OEB_21_w           =        1'b0           ;
                BMV_IObuffer_OEB_22_w           =        1'b0           ;
                BMV_IObuffer_OEB_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_B_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_23_w  =        1'b0           ;
                                               
                
                
                
                //Buffer for Background Model W
                BMW_IObuffer_A24_w              =        4'd0           ;
                BMW_IObuffer_A25_w              =        4'd0           ;
                BMW_IObuffer_A26_w              =        4'd0           ;
                BMW_IObuffer_A27_w              =        4'd0           ;
                BMW_IObuffer_A28_w              =        4'd0           ;
                BMW_IObuffer_A29_w              =        4'd0           ;
                BMW_IObuffer_A30_w              =        4'd0           ;
                BMW_IObuffer_A31_w              =        4'd0           ;
                BMW_IObuffer_DIA24_w            =        64'd0          ;                                        
                BMW_IObuffer_DIA25_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA26_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA27_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA28_w            =        64'd0          ;                           
                BMW_IObuffer_DIA29_w            =        64'd0          ;                               
                BMW_IObuffer_DIA30_w            =        64'd0          ;                               
                BMW_IObuffer_DIA31_w            =        64'd0          ;
                BMW_IObuffer_WEAN_24_w          =        1'b1           ;
                BMW_IObuffer_WEAN_25_w          =        1'b1           ;
                BMW_IObuffer_WEAN_26_w          =        1'b1           ;
                BMW_IObuffer_WEAN_27_w          =        1'b1           ;
                BMW_IObuffer_WEAN_28_w          =        1'b1           ;
                BMW_IObuffer_WEAN_29_w          =        1'b1           ;
                BMW_IObuffer_WEAN_30_w          =        1'b1           ;
                BMW_IObuffer_WEAN_31_w          =        1'b1           ;
                BMW_IObuffer_OEA_24_w           =        1'b0           ;
                BMW_IObuffer_OEA_25_w           =        1'b0           ;
                BMW_IObuffer_OEA_26_w           =        1'b0           ;
                BMW_IObuffer_OEA_27_w           =        1'b0           ;
                BMW_IObuffer_OEA_28_w           =        1'b0           ;
                BMW_IObuffer_OEA_29_w           =        1'b0           ;
                BMW_IObuffer_OEA_30_w           =        1'b0           ;
                BMW_IObuffer_OEA_31_w           =        1'b0           ;
                BMW_IObuffer_choose_reg_A_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_31_w  =        1'b0           ;
                
                BMW_IObuffer_B24_w              =        4'd0           ;
                BMW_IObuffer_B25_w              =        4'd0           ;
                BMW_IObuffer_B26_w              =        4'd0           ;
                BMW_IObuffer_B27_w              =        4'd0           ;
                BMW_IObuffer_B28_w              =        4'd0           ;       
                BMW_IObuffer_B29_w              =        4'd0           ;                 
                BMW_IObuffer_B30_w              =        4'd0           ;                 
                BMW_IObuffer_B31_w              =        4'd0           ;
                BMW_IObuffer_DIB24_w            =        64'd0          ;
                BMW_IObuffer_DIB25_w            =        64'd0          ;
                BMW_IObuffer_DIB26_w            =        64'd0          ;                                                                    
                BMW_IObuffer_DIB27_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB28_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB29_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB30_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB31_w            =        64'd0          ;  
                BMW_IObuffer_WEBN_24_w          =        1'b1           ;
                BMW_IObuffer_WEBN_25_w          =        1'b1           ;
                BMW_IObuffer_WEBN_26_w          =        1'b1           ;
                BMW_IObuffer_WEBN_27_w          =        1'b1           ;
                BMW_IObuffer_WEBN_28_w          =        1'b1           ;
                BMW_IObuffer_WEBN_29_w          =        1'b1           ;
                BMW_IObuffer_WEBN_30_w          =        1'b1           ;
                BMW_IObuffer_WEBN_31_w          =        1'b1           ;
                BMW_IObuffer_OEB_24_w           =        1'b0           ;
                BMW_IObuffer_OEB_25_w           =        1'b0           ;
                BMW_IObuffer_OEB_26_w           =        1'b0           ;
                BMW_IObuffer_OEB_27_w           =        1'b0           ;
                BMW_IObuffer_OEB_28_w           =        1'b0           ;
                BMW_IObuffer_OEB_29_w           =        1'b0           ;
                BMW_IObuffer_OEB_30_w           =        1'b0           ;
                BMW_IObuffer_OEB_31_w           =        1'b0           ;  
                BMW_IObuffer_choose_reg_B_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_31_w  =        1'b0           ;
                                                 
                
                
                
                //Buffer for Curent frame Y                        
                CurY_Ibuffer_A32_w              =        4'd0           ;                       
                CurY_Ibuffer_A33_w              =        4'd0           ; 
                CurY_Ibuffer_DIA32_w            =        64'd0          ;                                                             
                CurY_Ibuffer_DIA33_w            =        64'd0          ;  
                CurY_Ibuffer_WEAN_32_w          =        1'b1           ;          
                CurY_Ibuffer_WEAN_33_w          =        1'b1           ;          
                CurY_Ibuffer_OEA_32_w           =        1'b0           ;           
                CurY_Ibuffer_OEA_33_w           =        1'b0           ;           
                CurY_Ibuffer_choose_reg_A_32_w  =        1'b0           ;  
                CurY_Ibuffer_choose_reg_A_33_w  =        1'b0           ;  
                
                CurY_Ibuffer_B32_w              =        4'd0           ;                                                  
                CurY_Ibuffer_B33_w              =        4'd0           ;                                                                                                             
                CurY_Ibuffer_DIB32_w            =        64'd0          ;                                                                                                            
                CurY_Ibuffer_DIB33_w            =        64'd0          ;                                    
                CurY_Ibuffer_WEBN_32_w          =        1'b1           ;            
                CurY_Ibuffer_WEBN_33_w          =        1'b1           ;                                  
                CurY_Ibuffer_OEB_32_w           =        1'b0           ;             
                CurY_Ibuffer_OEB_33_w           =        1'b0           ;                                     
                CurY_Ibuffer_choose_reg_B_32_w  =        1'b0           ;    
                CurY_Ibuffer_choose_reg_B_33_w  =        1'b0           ;    

                
                
                //Buffer for Curent frame U                      
                if( (Count_CURYUV_ADDR_r >= 5'd0) && (Count_CURYUV_ADDR_r < `ADDRNUMin1ELEMENT) )
                 begin 
                        CurU_Ibuffer_A34_w              =        Count_CURYUV_ADDR_r[3:0];
                        CurU_Ibuffer_WEAN_34_w          =        1'b0           ;
                        CurU_Ibuffer_OEA_34_w           =        1'b0           ;
                        CurU_Ibuffer_choose_reg_A_34_w  =        1'b1           ;       
                 end             
                 else
                 begin
                        CurU_Ibuffer_A34_w              =        4'd0           ;
                        CurU_Ibuffer_WEAN_34_w          =        1'b1           ;  
                        CurU_Ibuffer_OEA_34_w           =        1'b0           ; 
                        CurU_Ibuffer_choose_reg_A_34_w  =        1'b0           ;     
                 end
                 
                 if( (Count_CURYUV_ADDR_r >= `ADDRNUMin1ELEMENT) && (Count_CURYUV_ADDR_r < `ADDRNUMin2ELEMENT) )
                 begin 
                        CurU_Ibuffer_A35_w              =        CountCURYUVSubAddrNumIn1Elem[3:0];
                        CurU_Ibuffer_WEAN_35_w          =        1'b0           ;
                        CurU_Ibuffer_OEA_35_w           =        1'b0           ;
                        CurU_Ibuffer_choose_reg_A_35_w  =        1'b1           ;       
                 end             
                 else
                 begin
                        CurU_Ibuffer_A35_w              =        4'd0           ;
                        CurU_Ibuffer_WEAN_35_w          =        1'b1           ;  
                        CurU_Ibuffer_OEA_35_w           =        1'b0           ; 
                        CurU_Ibuffer_choose_reg_A_35_w  =        1'b0           ;     
                 end
                                
                CurU_Ibuffer_DIA34_w            =        Seg_DataIn_r               ;                                                             
                CurU_Ibuffer_DIA35_w            =        Seg_DataIn_r               ; 
                

  
                
                CurU_Ibuffer_B34_w              =        4'd0           ;                                                  
                CurU_Ibuffer_B35_w              =        4'd0           ;                                                                                                                                 
                CurU_Ibuffer_DIB34_w            =        64'd0          ;                                                                                                            
                CurU_Ibuffer_DIB35_w            =        64'd0          ;                                     
                CurU_Ibuffer_WEBN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEBN_35_w          =        1'b1           ;                                
                CurU_Ibuffer_OEB_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEB_35_w           =        1'b0           ;                                    
                CurU_Ibuffer_choose_reg_B_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_B_35_w  =        1'b0           ;    
 
 
                
                //Buffer for Curent frame V                       
                CurV_Ibuffer_A36_w              =        4'd0           ;                        
                CurV_Ibuffer_A37_w              =        4'd0           ;                        
                CurV_Ibuffer_DIA36_w            =        64'd0          ;                                                               
                CurV_Ibuffer_DIA37_w            =        64'd0          ;    
                CurV_Ibuffer_WEAN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEAN_37_w          =        1'b1           ;            
                CurV_Ibuffer_OEA_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEA_37_w           =        1'b0           ;             
                CurV_Ibuffer_choose_reg_A_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_A_37_w  =        1'b0           ;    
                 
                CurV_Ibuffer_B36_w              =        4'd0           ;                                                                
                CurV_Ibuffer_B37_w              =        4'd0           ;  
                CurV_Ibuffer_DIB36_w            =        64'd0          ;                                                                                                             
                CurV_Ibuffer_DIB37_w            =        64'd0          ;    
                CurV_Ibuffer_WEBN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEBN_37_w          =        1'b1           ;                                    
                CurV_Ibuffer_OEB_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEB_37_w           =        1'b0           ;                                  
                CurV_Ibuffer_choose_reg_B_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_B_37_w  =        1'b0           ;    
 
                
                
                //Buffer for Mask
                Mask_Obuffer_A38_w              =        4'd0           ;                       
                Mask_Obuffer_DIA38_w            =        64'd0          ;  
                Mask_Obuffer_WEAN_38_w          =        1'b1           ;                  
                Mask_Obuffer_OEA_38_w           =        1'b0           ;                   
                Mask_Obuffer_choose_reg_A_38_w  =        1'b0           ;
                                                 
                Mask_Obuffer_B38_w              =        4'd0           ;                                                               
                Mask_Obuffer_DIB38_w            =        64'd0          ;                            
                Mask_Obuffer_WEBN_38_w          =        1'b1           ;                                            
                Mask_Obuffer_OEB_38_w           =        1'b0           ;                                  
                Mask_Obuffer_choose_reg_B_38_w  =        1'b0           ;           
                                                         
 
            end                  
            
            `SEGSTATE_INPUT_CUR_V:
            begin                
                
                                                
                //Buffer for Background Model Y
                BMY_IObuffer_A00_w              =        4'd0           ;
                BMY_IObuffer_A01_w              =        4'd0           ; 
                BMY_IObuffer_A02_w              =        4'd0           ; 
                BMY_IObuffer_A03_w              =        4'd0           ; 
                BMY_IObuffer_A04_w              =        4'd0           ; 
                BMY_IObuffer_A05_w              =        4'd0           ; 
                BMY_IObuffer_A06_w              =        4'd0           ;           
                BMY_IObuffer_A07_w              =        4'd0           ; 
                BMY_IObuffer_DIA00_w            =        64'd0          ; 
                BMY_IObuffer_DIA01_w            =        64'd0          ; 
                BMY_IObuffer_DIA02_w            =        64'd0          ; 
                BMY_IObuffer_DIA03_w            =        64'd0          ; 
                BMY_IObuffer_DIA04_w            =        64'd0          ; 
                BMY_IObuffer_DIA05_w            =        64'd0          ; 
                BMY_IObuffer_DIA06_w            =        64'd0          ; 
                BMY_IObuffer_DIA07_w            =        64'd0          ; 
                BMY_IObuffer_WEAN_00_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_01_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_02_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_03_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_04_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_05_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_06_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_07_w          =        1'b1           ;     
                BMY_IObuffer_OEA_00_w           =        1'b0           ;              
                BMY_IObuffer_OEA_01_w           =        1'b0           ;              
                BMY_IObuffer_OEA_02_w           =        1'b0           ;              
                BMY_IObuffer_OEA_03_w           =        1'b0           ;              
                BMY_IObuffer_OEA_04_w           =        1'b0           ;              
                BMY_IObuffer_OEA_05_w           =        1'b0           ;              
                BMY_IObuffer_OEA_06_w           =        1'b0           ;              
                BMY_IObuffer_OEA_07_w           =        1'b0           ;  
                BMY_IObuffer_choose_reg_A_00_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_01_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_02_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_03_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_04_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_05_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_06_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_07_w  =        1'b0           ;  
                
                BMY_IObuffer_B00_w              =        4'd0           ;
                BMY_IObuffer_B01_w              =        4'd0           ;
                BMY_IObuffer_B02_w              =        4'd0           ;
                BMY_IObuffer_B03_w              =        4'd0           ;
                BMY_IObuffer_B04_w              =        4'd0           ;
                BMY_IObuffer_B05_w              =        4'd0           ;
                BMY_IObuffer_B06_w              =        4'd0           ;
                BMY_IObuffer_B07_w              =        4'd0           ;
                BMY_IObuffer_DIB00_w            =        64'd0          ;
                BMY_IObuffer_DIB01_w            =        64'd0          ;
                BMY_IObuffer_DIB02_w            =        64'd0          ;
                BMY_IObuffer_DIB03_w            =        64'd0          ;
                BMY_IObuffer_DIB04_w            =        64'd0          ;
                BMY_IObuffer_DIB05_w            =        64'd0          ;
                BMY_IObuffer_DIB06_w            =        64'd0          ;
                BMY_IObuffer_DIB07_w            =        64'd0          ;
                BMY_IObuffer_WEBN_00_w          =        1'b1           ;
                BMY_IObuffer_WEBN_01_w          =        1'b1           ;
                BMY_IObuffer_WEBN_02_w          =        1'b1           ;
                BMY_IObuffer_WEBN_03_w          =        1'b1           ;
                BMY_IObuffer_WEBN_04_w          =        1'b1           ;
                BMY_IObuffer_WEBN_05_w          =        1'b1           ;
                BMY_IObuffer_WEBN_06_w          =        1'b1           ;
                BMY_IObuffer_WEBN_07_w          =        1'b1           ;
                BMY_IObuffer_OEB_00_w           =        1'b0           ;
                BMY_IObuffer_OEB_01_w           =        1'b0           ;
                BMY_IObuffer_OEB_02_w           =        1'b0           ;
                BMY_IObuffer_OEB_03_w           =        1'b0           ;
                BMY_IObuffer_OEB_04_w           =        1'b0           ;
                BMY_IObuffer_OEB_05_w           =        1'b0           ;
                BMY_IObuffer_OEB_06_w           =        1'b0           ;
                BMY_IObuffer_OEB_07_w           =        1'b0           ;
                BMY_IObuffer_choose_reg_B_00_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_01_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_02_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_03_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_04_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_05_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_06_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_07_w  =        1'b0           ;
                                                
                
                
                         
                //Buffer for Background Model U                         
                BMU_IObuffer_A08_w              =        4'd0           ;
                BMU_IObuffer_A09_w              =        4'd0           ;
                BMU_IObuffer_A10_w              =        4'd0           ;
                BMU_IObuffer_A11_w              =        4'd0           ;
                BMU_IObuffer_A12_w              =        4'd0           ;
                BMU_IObuffer_A13_w              =        4'd0           ;
                BMU_IObuffer_A14_w              =        4'd0           ;
                BMU_IObuffer_A15_w              =        4'd0           ;
                BMU_IObuffer_DIA08_w            =        64'd0          ;
                BMU_IObuffer_DIA09_w            =        64'd0          ;
                BMU_IObuffer_DIA10_w            =        64'd0          ;
                BMU_IObuffer_DIA11_w            =        64'd0          ;
                BMU_IObuffer_DIA12_w            =        64'd0          ;
                BMU_IObuffer_DIA13_w            =        64'd0          ;
                BMU_IObuffer_DIA14_w            =        64'd0          ;
                BMU_IObuffer_DIA15_w            =        64'd0          ;
                BMU_IObuffer_WEAN_08_w          =        1'b1           ;
                BMU_IObuffer_WEAN_09_w          =        1'b1           ;
                BMU_IObuffer_WEAN_10_w          =        1'b1           ;
                BMU_IObuffer_WEAN_11_w          =        1'b1           ;
                BMU_IObuffer_WEAN_12_w          =        1'b1           ;
                BMU_IObuffer_WEAN_13_w          =        1'b1           ;
                BMU_IObuffer_WEAN_14_w          =        1'b1           ;
                BMU_IObuffer_WEAN_15_w          =        1'b1           ;
                BMU_IObuffer_OEA_08_w           =        1'b0           ;
                BMU_IObuffer_OEA_09_w           =        1'b0           ;
                BMU_IObuffer_OEA_10_w           =        1'b0           ;
                BMU_IObuffer_OEA_11_w           =        1'b0           ;
                BMU_IObuffer_OEA_12_w           =        1'b0           ;
                BMU_IObuffer_OEA_13_w           =        1'b0           ;
                BMU_IObuffer_OEA_14_w           =        1'b0           ;
                BMU_IObuffer_OEA_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_A_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_15_w  =        1'b0           ;
                                                
                                                
                BMU_IObuffer_B08_w              =        4'd0           ;
                BMU_IObuffer_B09_w              =        4'd0           ;
                BMU_IObuffer_B10_w              =        4'd0           ;
                BMU_IObuffer_B11_w              =        4'd0           ;
                BMU_IObuffer_B12_w              =        4'd0           ;
                BMU_IObuffer_B13_w              =        4'd0           ;
                BMU_IObuffer_B14_w              =        4'd0           ;
                BMU_IObuffer_B15_w              =        4'd0           ;
                BMU_IObuffer_DIB08_w            =        64'd0          ;
                BMU_IObuffer_DIB09_w            =        64'd0          ;
                BMU_IObuffer_DIB10_w            =        64'd0          ;
                BMU_IObuffer_DIB11_w            =        64'd0          ;
                BMU_IObuffer_DIB12_w            =        64'd0          ;
                BMU_IObuffer_DIB13_w            =        64'd0          ;
                BMU_IObuffer_DIB14_w            =        64'd0          ;
                BMU_IObuffer_DIB15_w            =        64'd0          ;
                BMU_IObuffer_WEBN_08_w          =        1'b1           ;
                BMU_IObuffer_WEBN_09_w          =        1'b1           ;
                BMU_IObuffer_WEBN_10_w          =        1'b1           ;
                BMU_IObuffer_WEBN_11_w          =        1'b1           ;
                BMU_IObuffer_WEBN_12_w          =        1'b1           ;
                BMU_IObuffer_WEBN_13_w          =        1'b1           ;
                BMU_IObuffer_WEBN_14_w          =        1'b1           ;
                BMU_IObuffer_WEBN_15_w          =        1'b1           ;
                BMU_IObuffer_OEB_08_w           =        1'b0           ;
                BMU_IObuffer_OEB_09_w           =        1'b0           ;
                BMU_IObuffer_OEB_10_w           =        1'b0           ;
                BMU_IObuffer_OEB_11_w           =        1'b0           ;
                BMU_IObuffer_OEB_12_w           =        1'b0           ;
                BMU_IObuffer_OEB_13_w           =        1'b0           ;
                BMU_IObuffer_OEB_14_w           =        1'b0           ;
                BMU_IObuffer_OEB_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_B_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_15_w  =        1'b0           ;
                                             
                
                
                //Buffer for Background Model V
                BMV_IObuffer_A16_w              =        4'd0           ;
                BMV_IObuffer_A17_w              =        4'd0           ;
                BMV_IObuffer_A18_w              =        4'd0           ;
                BMV_IObuffer_A19_w              =        4'd0           ;
                BMV_IObuffer_A20_w              =        4'd0           ;
                BMV_IObuffer_A21_w              =        4'd0           ;
                BMV_IObuffer_A22_w              =        4'd0           ;
                BMV_IObuffer_A23_w              =        4'd0           ;
                BMV_IObuffer_DIA16_w            =        64'd0          ;
                BMV_IObuffer_DIA17_w            =        64'd0          ;
                BMV_IObuffer_DIA18_w            =        64'd0          ;
                BMV_IObuffer_DIA19_w            =        64'd0          ;
                BMV_IObuffer_DIA20_w            =        64'd0          ;
                BMV_IObuffer_DIA21_w            =        64'd0          ;
                BMV_IObuffer_DIA22_w            =        64'd0          ;
                BMV_IObuffer_DIA23_w            =        64'd0          ;
                BMV_IObuffer_WEAN_16_w          =        1'b1           ;
                BMV_IObuffer_WEAN_17_w          =        1'b1           ;
                BMV_IObuffer_WEAN_18_w          =        1'b1           ;
                BMV_IObuffer_WEAN_19_w          =        1'b1           ;
                BMV_IObuffer_WEAN_20_w          =        1'b1           ;
                BMV_IObuffer_WEAN_21_w          =        1'b1           ;
                BMV_IObuffer_WEAN_22_w          =        1'b1           ;
                BMV_IObuffer_WEAN_23_w          =        1'b1           ;
                BMV_IObuffer_OEA_16_w           =        1'b0           ;
                BMV_IObuffer_OEA_17_w           =        1'b0           ;
                BMV_IObuffer_OEA_18_w           =        1'b0           ;
                BMV_IObuffer_OEA_19_w           =        1'b0           ;
                BMV_IObuffer_OEA_20_w           =        1'b0           ;
                BMV_IObuffer_OEA_21_w           =        1'b0           ;
                BMV_IObuffer_OEA_22_w           =        1'b0           ;
                BMV_IObuffer_OEA_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_A_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_23_w  =        1'b0           ;
                              
                BMV_IObuffer_B16_w              =        4'd0           ;
                BMV_IObuffer_B17_w              =        4'd0           ;
                BMV_IObuffer_B18_w              =        4'd0           ;
                BMV_IObuffer_B19_w              =        4'd0           ;
                BMV_IObuffer_B20_w              =        4'd0           ;
                BMV_IObuffer_B21_w              =        4'd0           ;
                BMV_IObuffer_B22_w              =        4'd0           ;
                BMV_IObuffer_B23_w              =        4'd0           ;
                BMV_IObuffer_DIB16_w            =        64'd0          ;
                BMV_IObuffer_DIB17_w            =        64'd0          ;
                BMV_IObuffer_DIB18_w            =        64'd0          ;
                BMV_IObuffer_DIB19_w            =        64'd0          ;
                BMV_IObuffer_DIB20_w            =        64'd0          ;
                BMV_IObuffer_DIB21_w            =        64'd0          ;
                BMV_IObuffer_DIB22_w            =        64'd0          ;
                BMV_IObuffer_DIB23_w            =        64'd0          ;
                BMV_IObuffer_WEBN_16_w          =        1'b1           ;
                BMV_IObuffer_WEBN_17_w          =        1'b1           ;
                BMV_IObuffer_WEBN_18_w          =        1'b1           ;
                BMV_IObuffer_WEBN_19_w          =        1'b1           ;
                BMV_IObuffer_WEBN_20_w          =        1'b1           ;
                BMV_IObuffer_WEBN_21_w          =        1'b1           ;
                BMV_IObuffer_WEBN_22_w          =        1'b1           ;
                BMV_IObuffer_WEBN_23_w          =        1'b1           ;
                BMV_IObuffer_OEB_16_w           =        1'b0           ;
                BMV_IObuffer_OEB_17_w           =        1'b0           ;
                BMV_IObuffer_OEB_18_w           =        1'b0           ;
                BMV_IObuffer_OEB_19_w           =        1'b0           ;
                BMV_IObuffer_OEB_20_w           =        1'b0           ;
                BMV_IObuffer_OEB_21_w           =        1'b0           ;
                BMV_IObuffer_OEB_22_w           =        1'b0           ;
                BMV_IObuffer_OEB_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_B_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_23_w  =        1'b0           ;
                                               
                
                
                
                //Buffer for Background Model W
                BMW_IObuffer_A24_w              =        4'd0           ;
                BMW_IObuffer_A25_w              =        4'd0           ;
                BMW_IObuffer_A26_w              =        4'd0           ;
                BMW_IObuffer_A27_w              =        4'd0           ;
                BMW_IObuffer_A28_w              =        4'd0           ;
                BMW_IObuffer_A29_w              =        4'd0           ;
                BMW_IObuffer_A30_w              =        4'd0           ;
                BMW_IObuffer_A31_w              =        4'd0           ;
                BMW_IObuffer_DIA24_w            =        64'd0          ;                                        
                BMW_IObuffer_DIA25_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA26_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA27_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA28_w            =        64'd0          ;                           
                BMW_IObuffer_DIA29_w            =        64'd0          ;                               
                BMW_IObuffer_DIA30_w            =        64'd0          ;                               
                BMW_IObuffer_DIA31_w            =        64'd0          ;
                BMW_IObuffer_WEAN_24_w          =        1'b1           ;
                BMW_IObuffer_WEAN_25_w          =        1'b1           ;
                BMW_IObuffer_WEAN_26_w          =        1'b1           ;
                BMW_IObuffer_WEAN_27_w          =        1'b1           ;
                BMW_IObuffer_WEAN_28_w          =        1'b1           ;
                BMW_IObuffer_WEAN_29_w          =        1'b1           ;
                BMW_IObuffer_WEAN_30_w          =        1'b1           ;
                BMW_IObuffer_WEAN_31_w          =        1'b1           ;
                BMW_IObuffer_OEA_24_w           =        1'b0           ;
                BMW_IObuffer_OEA_25_w           =        1'b0           ;
                BMW_IObuffer_OEA_26_w           =        1'b0           ;
                BMW_IObuffer_OEA_27_w           =        1'b0           ;
                BMW_IObuffer_OEA_28_w           =        1'b0           ;
                BMW_IObuffer_OEA_29_w           =        1'b0           ;
                BMW_IObuffer_OEA_30_w           =        1'b0           ;
                BMW_IObuffer_OEA_31_w           =        1'b0           ;
                BMW_IObuffer_choose_reg_A_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_31_w  =        1'b0           ;
                
                BMW_IObuffer_B24_w              =        4'd0           ;
                BMW_IObuffer_B25_w              =        4'd0           ;
                BMW_IObuffer_B26_w              =        4'd0           ;
                BMW_IObuffer_B27_w              =        4'd0           ;
                BMW_IObuffer_B28_w              =        4'd0           ;       
                BMW_IObuffer_B29_w              =        4'd0           ;                 
                BMW_IObuffer_B30_w              =        4'd0           ;                 
                BMW_IObuffer_B31_w              =        4'd0           ;
                BMW_IObuffer_DIB24_w            =        64'd0          ;
                BMW_IObuffer_DIB25_w            =        64'd0          ;
                BMW_IObuffer_DIB26_w            =        64'd0          ;                                                                    
                BMW_IObuffer_DIB27_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB28_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB29_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB30_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB31_w            =        64'd0          ;  
                BMW_IObuffer_WEBN_24_w          =        1'b1           ;
                BMW_IObuffer_WEBN_25_w          =        1'b1           ;
                BMW_IObuffer_WEBN_26_w          =        1'b1           ;
                BMW_IObuffer_WEBN_27_w          =        1'b1           ;
                BMW_IObuffer_WEBN_28_w          =        1'b1           ;
                BMW_IObuffer_WEBN_29_w          =        1'b1           ;
                BMW_IObuffer_WEBN_30_w          =        1'b1           ;
                BMW_IObuffer_WEBN_31_w          =        1'b1           ;
                BMW_IObuffer_OEB_24_w           =        1'b0           ;
                BMW_IObuffer_OEB_25_w           =        1'b0           ;
                BMW_IObuffer_OEB_26_w           =        1'b0           ;
                BMW_IObuffer_OEB_27_w           =        1'b0           ;
                BMW_IObuffer_OEB_28_w           =        1'b0           ;
                BMW_IObuffer_OEB_29_w           =        1'b0           ;
                BMW_IObuffer_OEB_30_w           =        1'b0           ;
                BMW_IObuffer_OEB_31_w           =        1'b0           ;  
                BMW_IObuffer_choose_reg_B_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_31_w  =        1'b0           ;
                                                 
                
                
                
                //Buffer for Curent frame Y                        
                CurY_Ibuffer_A32_w              =        4'd0           ;                       
                CurY_Ibuffer_A33_w              =        4'd0           ; 
                CurY_Ibuffer_DIA32_w            =        64'd0          ;                                                             
                CurY_Ibuffer_DIA33_w            =        64'd0          ;  
                CurY_Ibuffer_WEAN_32_w          =        1'b1           ;          
                CurY_Ibuffer_WEAN_33_w          =        1'b1           ;          
                CurY_Ibuffer_OEA_32_w           =        1'b0           ;           
                CurY_Ibuffer_OEA_33_w           =        1'b0           ;           
                CurY_Ibuffer_choose_reg_A_32_w  =        1'b0           ;  
                CurY_Ibuffer_choose_reg_A_33_w  =        1'b0           ;  
                
                CurY_Ibuffer_B32_w              =        4'd0           ;                                                  
                CurY_Ibuffer_B33_w              =        4'd0           ;                                                                                                             
                CurY_Ibuffer_DIB32_w            =        64'd0          ;                                                                                                            
                CurY_Ibuffer_DIB33_w            =        64'd0          ;                                    
                CurY_Ibuffer_WEBN_32_w          =        1'b1           ;            
                CurY_Ibuffer_WEBN_33_w          =        1'b1           ;                                  
                CurY_Ibuffer_OEB_32_w           =        1'b0           ;             
                CurY_Ibuffer_OEB_33_w           =        1'b0           ;                                     
                CurY_Ibuffer_choose_reg_B_32_w  =        1'b0           ;    
                CurY_Ibuffer_choose_reg_B_33_w  =        1'b0           ;    

                
                
                //Buffer for Curent frame U                      
                CurU_Ibuffer_A34_w              =        4'd0           ;                         
                CurU_Ibuffer_A35_w              =        4'd0           ;  
                CurU_Ibuffer_DIA34_w            =        64'd0          ;                                                               
                CurU_Ibuffer_DIA35_w            =        64'd0          ;  
                CurU_Ibuffer_WEAN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEAN_35_w          =        1'b1           ;            
                CurU_Ibuffer_OEA_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEA_35_w           =        1'b0           ;             
                CurU_Ibuffer_choose_reg_A_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_A_35_w  =        1'b0           ;    
                
                CurU_Ibuffer_B34_w              =        4'd0           ;                                                  
                CurU_Ibuffer_B35_w              =        4'd0           ;                                                                                                                                 
                CurU_Ibuffer_DIB34_w            =        64'd0          ;                                                                                                            
                CurU_Ibuffer_DIB35_w            =        64'd0          ;                                     
                CurU_Ibuffer_WEBN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEBN_35_w          =        1'b1           ;                                
                CurU_Ibuffer_OEB_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEB_35_w           =        1'b0           ;                                    
                CurU_Ibuffer_choose_reg_B_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_B_35_w  =        1'b0           ;    
 
 
                
                //Buffer for Curent frame V                       
                if( (Count_CURYUV_ADDR_r >= 5'd0) && (Count_CURYUV_ADDR_r < `ADDRNUMin1ELEMENT) )
                 begin 
                        CurV_Ibuffer_A36_w              =        Count_CURYUV_ADDR_r[3:0];
                        CurV_Ibuffer_WEAN_36_w          =        1'b0           ;
                        CurV_Ibuffer_OEA_36_w           =        1'b0           ;
                        CurV_Ibuffer_choose_reg_A_36_w  =        1'b1           ;       
                 end             
                 else
                 begin
                        CurV_Ibuffer_A36_w              =        4'd0           ;
                        CurV_Ibuffer_WEAN_36_w          =        1'b1           ;  
                        CurV_Ibuffer_OEA_36_w           =        1'b0           ; 
                        CurV_Ibuffer_choose_reg_A_36_w  =        1'b0           ;     
                 end
                 
                 if( (Count_CURYUV_ADDR_r >= `ADDRNUMin1ELEMENT) && (Count_CURYUV_ADDR_r < `ADDRNUMin2ELEMENT) )
                 begin 
                        CurV_Ibuffer_A37_w              =        CountCURYUVSubAddrNumIn1Elem[3:0];
                        CurV_Ibuffer_WEAN_37_w          =        1'b0           ;
                        CurV_Ibuffer_OEA_37_w           =        1'b0           ;
                        CurV_Ibuffer_choose_reg_A_37_w  =        1'b1           ;       
                 end             
                 else
                 begin
                        CurV_Ibuffer_A37_w              =        4'd0           ;
                        CurV_Ibuffer_WEAN_37_w          =        1'b1           ;  
                        CurV_Ibuffer_OEA_37_w           =        1'b0           ; 
                        CurV_Ibuffer_choose_reg_A_37_w  =        1'b0           ;     
                 end
                                
                CurV_Ibuffer_DIA36_w            =        Seg_DataIn_r               ;                                                             
                CurV_Ibuffer_DIA37_w            =        Seg_DataIn_r               ; 
                

 
                CurV_Ibuffer_B36_w              =        4'd0           ;                                                                
                CurV_Ibuffer_B37_w              =        4'd0           ;  
                CurV_Ibuffer_DIB36_w            =        64'd0          ;                                                                                                             
                CurV_Ibuffer_DIB37_w            =        64'd0          ;    
                CurV_Ibuffer_WEBN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEBN_37_w          =        1'b1           ;                                    
                CurV_Ibuffer_OEB_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEB_37_w           =        1'b0           ;                                  
                CurV_Ibuffer_choose_reg_B_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_B_37_w  =        1'b0           ;    
 
                
                
                //Buffer for Mask
                Mask_Obuffer_A38_w              =        4'd0           ;                       
                Mask_Obuffer_DIA38_w            =        64'd0          ;  
                Mask_Obuffer_WEAN_38_w          =        1'b1           ;                  
                Mask_Obuffer_OEA_38_w           =        1'b0           ;                   
                Mask_Obuffer_choose_reg_A_38_w  =        1'b0           ;
                                                 
                Mask_Obuffer_B38_w              =        4'd0           ;                                                               
                Mask_Obuffer_DIB38_w            =        64'd0          ;                            
                Mask_Obuffer_WEBN_38_w          =        1'b1           ;                                            
                Mask_Obuffer_OEB_38_w           =        1'b0           ;                                  
                Mask_Obuffer_choose_reg_B_38_w  =        1'b0           ;           
                                                         

            end                                                                                                                 
            
            
            `SEGSTATE_PROCESSING:                                                       
            begin                                                                       
                
                                                
                //Buffer for Background Model Y
                if ( (pixelidx_Quarter_5r >= 12'd0)                     && (pixelidx_Quarter_5r < `PIXELNUMin1ELEMENT_BM                ) )     
                begin
                        BMY_IObuffer_A00_w              =       pixelidxQuarter5r12b[3:0];
                        BMY_IObuffer_WEAN_00_w          =       1'b0;
                        BMY_IObuffer_choose_reg_A_00_w  =       1'b1;

                end
                
                else
                begin
                        BMY_IObuffer_A00_w              =        4'd0           ;
                        BMY_IObuffer_WEAN_00_w          =        1'b1           ;             
                        BMY_IObuffer_choose_reg_A_00_w  =        1'b0           ;     
                end
                
                
                
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin1ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin2ELEMENT_BM                ) )                      
                begin
                        BMY_IObuffer_A01_w              =       pixelidxQuarter5rSubPixelNumin1ElemBM[3:0];
                        BMY_IObuffer_WEAN_01_w          =        1'b0;
                        BMY_IObuffer_choose_reg_A_01_w  =        1'b1;

                end
                
                else
                begin
                        BMY_IObuffer_A01_w              =        4'd0           ; 
                        BMY_IObuffer_WEAN_01_w          =        1'b1           ;             
                        BMY_IObuffer_choose_reg_A_01_w  =        1'b0           ;     
                end
                
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin2ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin3ELEMENT_BM                ) )                      
                begin
                        BMY_IObuffer_A02_w              =       pixelidxQuarter5rSubPixelNumin2ElemBM[3:0];
                        BMY_IObuffer_WEAN_02_w          =        1'b0;
                        BMY_IObuffer_choose_reg_A_02_w  =        1'b1;

                end
               
                else
                begin
                        BMY_IObuffer_A02_w              =        4'd0           ; 
                        BMY_IObuffer_WEAN_02_w          =        1'b1           ;             
                        BMY_IObuffer_choose_reg_A_02_w  =        1'b0           ;     
                end
                
                
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin3ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin4ELEMENT_BM                ) )                      
                begin
                        BMY_IObuffer_A03_w              =       pixelidxQuarter5rSubPixelNumin3ElemBM[3:0];
                        BMY_IObuffer_WEAN_03_w          =        1'b0;
                        BMY_IObuffer_choose_reg_A_03_w  =        1'b1;

                end
                
                else
                begin
                        BMY_IObuffer_A03_w              =        4'd0           ; 
                        BMY_IObuffer_WEAN_03_w          =        1'b1           ;             
                        BMY_IObuffer_choose_reg_A_03_w  =        1'b0           ;     
                end
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin4ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin5ELEMENT_BM                ) )                      
                begin
                        BMY_IObuffer_A04_w              =       pixelidxQuarter5rSubPixelNumin4ElemBM[3:0];
                        BMY_IObuffer_WEAN_04_w          =        1'b0;
                        BMY_IObuffer_choose_reg_A_04_w  =        1'b1;

                end
                
                else
                begin
                        BMY_IObuffer_A04_w              =        4'd0           ; 
                        BMY_IObuffer_WEAN_04_w          =        1'b1           ;             
                        BMY_IObuffer_choose_reg_A_04_w  =        1'b0           ;     
                end
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin5ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin6ELEMENT_BM                ) )                      
                begin
                        BMY_IObuffer_A05_w              =       pixelidxQuarter5rSubPixelNumin5ElemBM[3:0];
                        BMY_IObuffer_WEAN_05_w          =        1'b0;
                        BMY_IObuffer_choose_reg_A_05_w  =        1'b1;

                end
                
                else
                begin
                        BMY_IObuffer_A05_w              =        4'd0           ; 
                        BMY_IObuffer_WEAN_05_w          =        1'b1           ;             
                        BMY_IObuffer_choose_reg_A_05_w  =        1'b0           ;     
                end
                
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin6ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin7ELEMENT_BM                ) )                      
                begin
                        BMY_IObuffer_A06_w              =       pixelidxQuarter5rSubPixelNumin6ElemBM[3:0];
                        BMY_IObuffer_WEAN_06_w          =        1'b0;
                        BMY_IObuffer_choose_reg_A_06_w  =        1'b1;

                end
                
                else
                begin
                        BMY_IObuffer_A06_w              =        4'd0           ;           
                        BMY_IObuffer_WEAN_06_w          =        1'b1           ;             
                        BMY_IObuffer_choose_reg_A_06_w  =        1'b0           ;     
                end
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin7ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin8ELEMENT_BM                ) )                      
                begin
                        BMY_IObuffer_A07_w              =       pixelidxQuarter5rSubPixelNumin7ElemBM[3:0];
                        BMY_IObuffer_WEAN_07_w          =        1'b0;
                        BMY_IObuffer_choose_reg_A_07_w  =        1'b1;
                end
                
                else
                begin
                        BMY_IObuffer_A07_w              =        4'd0           ;
                        BMY_IObuffer_WEAN_07_w          =        1'b1           ;     
                        BMY_IObuffer_choose_reg_A_07_w  =        1'b0           ;  
                end
                
                
                
                
                 
                BMY_IObuffer_DIA00_w            =        Updated_BMY_32to64_r   ; 
                BMY_IObuffer_DIA01_w            =        Updated_BMY_32to64_r   ; 
                BMY_IObuffer_DIA02_w            =        Updated_BMY_32to64_r   ; 
                BMY_IObuffer_DIA03_w            =        Updated_BMY_32to64_r   ; 
                BMY_IObuffer_DIA04_w            =        Updated_BMY_32to64_r   ; 
                BMY_IObuffer_DIA05_w            =        Updated_BMY_32to64_r   ; 
                BMY_IObuffer_DIA06_w            =        Updated_BMY_32to64_r   ; 
                BMY_IObuffer_DIA07_w            =        Updated_BMY_32to64_r   ; 
                
                BMY_IObuffer_OEA_00_w           =        1'b0           ;              
                BMY_IObuffer_OEA_01_w           =        1'b0           ;              
                BMY_IObuffer_OEA_02_w           =        1'b0           ;              
                BMY_IObuffer_OEA_03_w           =        1'b0           ;              
                BMY_IObuffer_OEA_04_w           =        1'b0           ;              
                BMY_IObuffer_OEA_05_w           =        1'b0           ;              
                BMY_IObuffer_OEA_06_w           =        1'b0           ;              
                BMY_IObuffer_OEA_07_w           =        1'b0           ;  
                
                
                
                
                
                if ( (pixelidx_Quarter_r >= 12'd0)                      && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_BM         ) )     
                begin
                        BMY_IObuffer_B00_w              =       pixelidxQuarterr12b[3:0];
                        BMY_IObuffer_OEB_00_w           =       1'b1;
                        BMY_IObuffer_choose_reg_B_00_w  =       1'b1;

                end
                
                else
                begin
                        BMY_IObuffer_B00_w              =        4'd0           ; 
                        BMY_IObuffer_OEB_00_w           =        1'b0           ; 
                        BMY_IObuffer_choose_reg_B_00_w  =        1'b0           ; 
                end
                
                
                
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_BM         ) )                      
                begin
                        BMY_IObuffer_B01_w              =       pixelidxQuarterrSubPixelNuminlElemBM[3:0];
                        BMY_IObuffer_OEB_01_w           =        1'b1;
                        BMY_IObuffer_choose_reg_B_01_w  =        1'b1;

                end
                
                else
                begin
                        BMY_IObuffer_B01_w              =        4'd0           ;
                        BMY_IObuffer_OEB_01_w           =        1'b0           ;
                        BMY_IObuffer_choose_reg_B_01_w  =        1'b0           ;
                
                end
                
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin2ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin3ELEMENT_BM         ) )                      
                begin
                        BMY_IObuffer_B02_w              =       pixelidxQuarterrSubPixelNumin2ElemBM[3:0];
                        BMY_IObuffer_OEB_02_w           =        1'b1;
                        BMY_IObuffer_choose_reg_B_02_w  =        1'b1;

                end
               
                else
                begin
                        BMY_IObuffer_B02_w              =        4'd0           ;
                        BMY_IObuffer_OEB_02_w           =        1'b0           ;
                        BMY_IObuffer_choose_reg_B_02_w  =        1'b0           ;
                
                end
                
                
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin3ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin4ELEMENT_BM         ) )                      
                begin
                        BMY_IObuffer_B03_w              =       pixelidxQuarterrSubPixelNumin3ElemBM[3:0];
                        BMY_IObuffer_OEB_03_w           =        1'b1;
                        BMY_IObuffer_choose_reg_B_03_w  =        1'b1;

                end
                
                else
                begin
                        BMY_IObuffer_B03_w              =        4'd0           ;
                        BMY_IObuffer_OEB_03_w           =        1'b0           ;
                        BMY_IObuffer_choose_reg_B_03_w  =        1'b0           ;
                
                end
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin4ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin5ELEMENT_BM         ) )                      
                begin
                        BMY_IObuffer_B04_w              =       pixelidxQuarterrSubPixelNumin4ElemBM[3:0];
                        BMY_IObuffer_OEB_04_w           =        1'b1;
                        BMY_IObuffer_choose_reg_B_04_w  =        1'b1;

                end
                
                else
                begin
                        BMY_IObuffer_B04_w              =        4'd0           ;
                        BMY_IObuffer_OEB_04_w           =        1'b0           ;
                        BMY_IObuffer_choose_reg_B_04_w  =        1'b0           ;
                
                end
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin5ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin6ELEMENT_BM         ) )                      
                begin
                        BMY_IObuffer_B05_w              =       pixelidxQuarterrSubPixelNumin5ElemBM[3:0];
                        BMY_IObuffer_OEB_05_w           =        1'b1;
                        BMY_IObuffer_choose_reg_B_05_w  =        1'b1;

                end
                
                else
                begin
                        BMY_IObuffer_B05_w              =        4'd0           ;
                        BMY_IObuffer_OEB_05_w           =        1'b0           ;
                        BMY_IObuffer_choose_reg_B_05_w  =        1'b0           ;
                
                end
                
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin6ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin7ELEMENT_BM         ) )                      
                begin
                        BMY_IObuffer_B06_w              =       pixelidxQuarterrSubPixelNumin6ElemBM[3:0];
                        BMY_IObuffer_OEB_06_w           =        1'b1;
                        BMY_IObuffer_choose_reg_B_06_w  =        1'b1;

                end
                
                else
                begin
                        BMY_IObuffer_B06_w              =        4'd0           ;
                        BMY_IObuffer_OEB_06_w           =        1'b0           ;
                        BMY_IObuffer_choose_reg_B_06_w  =        1'b0           ;
                
                end
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin7ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin8ELEMENT_BM         ) )                      
                begin
                        BMY_IObuffer_B07_w              =       pixelidxQuarterrSubPixelNumin7ElemBM[3:0];
                        BMY_IObuffer_OEB_07_w           =        1'b1;
                        BMY_IObuffer_choose_reg_B_07_w  =        1'b1;

                end
                
                else
                begin
                        BMY_IObuffer_B07_w              =        4'd0           ;
                        BMY_IObuffer_OEB_07_w           =        1'b0           ;
                        BMY_IObuffer_choose_reg_B_07_w  =        1'b0           ;
                
                end
                
                
                
                
                
                
                              
                
                BMY_IObuffer_DIB00_w            =        64'd0          ;
                BMY_IObuffer_DIB01_w            =        64'd0          ;
                BMY_IObuffer_DIB02_w            =        64'd0          ;
                BMY_IObuffer_DIB03_w            =        64'd0          ;
                BMY_IObuffer_DIB04_w            =        64'd0          ;
                BMY_IObuffer_DIB05_w            =        64'd0          ;
                BMY_IObuffer_DIB06_w            =        64'd0          ;
                BMY_IObuffer_DIB07_w            =        64'd0          ;
                
                BMY_IObuffer_WEBN_00_w          =        1'b1           ; 
                BMY_IObuffer_WEBN_01_w          =        1'b1           ;
                BMY_IObuffer_WEBN_02_w          =        1'b1           ;
                BMY_IObuffer_WEBN_03_w          =        1'b1           ;
                BMY_IObuffer_WEBN_04_w          =        1'b1           ;
                BMY_IObuffer_WEBN_05_w          =        1'b1           ;
                BMY_IObuffer_WEBN_06_w          =        1'b1           ;
                BMY_IObuffer_WEBN_07_w          =        1'b1           ;
                         
                //Buffer for Background Model U                         
                if ( (pixelidx_Quarter_5r >= 12'd0)                     && (pixelidx_Quarter_5r < `PIXELNUMin1ELEMENT_BM                ) )     
                begin
                        BMU_IObuffer_A08_w              =       pixelidxQuarter5r12b[3:0];
                        BMU_IObuffer_WEAN_08_w          =       1'b0;
                        BMU_IObuffer_choose_reg_A_08_w  =       1'b1;

                end
                
                else
                begin
                        BMU_IObuffer_A08_w              =        4'd0           ;
                        BMU_IObuffer_WEAN_08_w          =        1'b1           ;             
                        BMU_IObuffer_choose_reg_A_08_w  =        1'b0           ;     
                end
                
                
                
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin1ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin2ELEMENT_BM                ) )                      
                begin
                        BMU_IObuffer_A09_w              =       pixelidxQuarter5rSubPixelNumin1ElemBM[3:0];
                        BMU_IObuffer_WEAN_09_w          =        1'b0;
                        BMU_IObuffer_choose_reg_A_09_w  =        1'b1;

                end
                
                else
                begin
                        BMU_IObuffer_A09_w              =        4'd0           ; 
                        BMU_IObuffer_WEAN_09_w          =        1'b1           ;             
                        BMU_IObuffer_choose_reg_A_09_w  =        1'b0           ;     
                end
                
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin2ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin3ELEMENT_BM                ) )                      
                begin
                        BMU_IObuffer_A10_w              =       pixelidxQuarter5rSubPixelNumin2ElemBM[3:0];
                        BMU_IObuffer_WEAN_10_w          =        1'b0;
                        BMU_IObuffer_choose_reg_A_10_w  =        1'b1;

                end
               
                else
                begin
                        BMU_IObuffer_A10_w              =        4'd0           ; 
                        BMU_IObuffer_WEAN_10_w          =        1'b1           ;             
                        BMU_IObuffer_choose_reg_A_10_w  =        1'b0           ;     
                end
                
                
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin3ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin4ELEMENT_BM                ) )                      
                begin
                        BMU_IObuffer_A11_w              =       pixelidxQuarter5rSubPixelNumin3ElemBM[3:0];
                        BMU_IObuffer_WEAN_11_w          =        1'b0;
                        BMU_IObuffer_choose_reg_A_11_w  =        1'b1;

                end
                
                else
                begin
                        BMU_IObuffer_A11_w              =        4'd0           ; 
                        BMU_IObuffer_WEAN_11_w          =        1'b1           ;             
                        BMU_IObuffer_choose_reg_A_11_w  =        1'b0           ;     
                end
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin4ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin5ELEMENT_BM                ) )                      
                begin
                        BMU_IObuffer_A12_w              =       pixelidxQuarter5rSubPixelNumin4ElemBM[3:0];
                        BMU_IObuffer_WEAN_12_w          =        1'b0;
                        BMU_IObuffer_choose_reg_A_12_w  =        1'b1;

                end
                
                else
                begin
                        BMU_IObuffer_A12_w              =        4'd0           ; 
                        BMU_IObuffer_WEAN_12_w          =        1'b1           ;             
                        BMU_IObuffer_choose_reg_A_12_w  =        1'b0           ;     
                end
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin5ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin6ELEMENT_BM                ) )                      
                begin
                        BMU_IObuffer_A13_w              =       pixelidxQuarter5rSubPixelNumin5ElemBM[3:0];
                        BMU_IObuffer_WEAN_13_w          =        1'b0;
                        BMU_IObuffer_choose_reg_A_13_w  =        1'b1;

                end
                
                else
                begin
                        BMU_IObuffer_A13_w              =        4'd0           ; 
                        BMU_IObuffer_WEAN_13_w          =        1'b1           ;             
                        BMU_IObuffer_choose_reg_A_13_w  =        1'b0           ;     
                end
                
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin6ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin7ELEMENT_BM                ) )                      
                begin
                        BMU_IObuffer_A14_w              =       pixelidxQuarter5rSubPixelNumin6ElemBM[3:0];
                        BMU_IObuffer_WEAN_14_w          =        1'b0;
                        BMU_IObuffer_choose_reg_A_14_w  =        1'b1;

                end
                
                else
                begin
                        BMU_IObuffer_A14_w              =        4'd0           ;           
                        BMU_IObuffer_WEAN_14_w          =        1'b1           ;             
                        BMU_IObuffer_choose_reg_A_14_w  =        1'b0           ;     
                end
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin7ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin8ELEMENT_BM                ) )                      
                begin
                        BMU_IObuffer_A15_w              =       pixelidxQuarter5rSubPixelNumin7ElemBM[3:0];
                        BMU_IObuffer_WEAN_15_w          =        1'b0;
                        BMU_IObuffer_choose_reg_A_15_w  =        1'b1;
                end
                
                else
                begin
                        BMU_IObuffer_A15_w              =        4'd0           ;
                        BMU_IObuffer_WEAN_15_w          =        1'b1           ;     
                        BMU_IObuffer_choose_reg_A_15_w  =        1'b0           ;  
                end
                
                
                
                
                 
                BMU_IObuffer_DIA08_w            =        Updated_BMU_32to64_r   ; 
                BMU_IObuffer_DIA09_w            =        Updated_BMU_32to64_r   ; 
                BMU_IObuffer_DIA10_w            =        Updated_BMU_32to64_r   ; 
                BMU_IObuffer_DIA11_w            =        Updated_BMU_32to64_r   ; 
                BMU_IObuffer_DIA12_w            =        Updated_BMU_32to64_r   ; 
                BMU_IObuffer_DIA13_w            =        Updated_BMU_32to64_r   ; 
                BMU_IObuffer_DIA14_w            =        Updated_BMU_32to64_r   ; 
                BMU_IObuffer_DIA15_w            =        Updated_BMU_32to64_r   ; 
                
                BMU_IObuffer_OEA_08_w           =        1'b0           ;              
                BMU_IObuffer_OEA_09_w           =        1'b0           ;              
                BMU_IObuffer_OEA_10_w           =        1'b0           ;              
                BMU_IObuffer_OEA_11_w           =        1'b0           ;              
                BMU_IObuffer_OEA_12_w           =        1'b0           ;              
                BMU_IObuffer_OEA_13_w           =        1'b0           ;              
                BMU_IObuffer_OEA_14_w           =        1'b0           ;              
                BMU_IObuffer_OEA_15_w           =        1'b0           ;  
                
                  
                                                
                
                
                
                if ( (pixelidx_Quarter_r >= 12'd0)                      && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_BM         ) )     
                begin
                        BMU_IObuffer_B08_w              =       pixelidxQuarterr12b[3:0];
                        BMU_IObuffer_OEB_08_w           =       1'b1;
                        BMU_IObuffer_choose_reg_B_08_w  =       1'b1;

                end
                
                else
                begin
                        BMU_IObuffer_B08_w              =        4'd0           ; 
                        BMU_IObuffer_OEB_08_w           =        1'b0           ; 
                        BMU_IObuffer_choose_reg_B_08_w  =        1'b0           ; 
                end
                
                
                
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_BM         ) )                      
                begin
                        BMU_IObuffer_B09_w              =       pixelidxQuarterrSubPixelNuminlElemBM[3:0];
                        BMU_IObuffer_OEB_09_w           =        1'b1;
                        BMU_IObuffer_choose_reg_B_09_w  =        1'b1;

                end
                
                else
                begin
                        BMU_IObuffer_B09_w              =        4'd0           ;
                        BMU_IObuffer_OEB_09_w           =        1'b0           ;
                        BMU_IObuffer_choose_reg_B_09_w  =        1'b0           ;
                
                end
                
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin2ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin3ELEMENT_BM         ) )                      
                begin
                        BMU_IObuffer_B10_w              =       pixelidxQuarterrSubPixelNumin2ElemBM[3:0];
                        BMU_IObuffer_OEB_10_w           =        1'b1;
                        BMU_IObuffer_choose_reg_B_10_w  =        1'b1;

                end
                
                else
                begin
                        BMU_IObuffer_B10_w              =        4'd0           ;
                        BMU_IObuffer_OEB_10_w           =        1'b0           ;
                        BMU_IObuffer_choose_reg_B_10_w  =        1'b0           ;
                
                end
                
                
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin3ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin4ELEMENT_BM         ) )                      
                begin
                        BMU_IObuffer_B11_w              =       pixelidxQuarterrSubPixelNumin3ElemBM[3:0];
                        BMU_IObuffer_OEB_11_w           =        1'b1;
                        BMU_IObuffer_choose_reg_B_11_w  =        1'b1;

                end

                else
                begin
                        BMU_IObuffer_B11_w              =        4'd0           ;
                        BMU_IObuffer_OEB_11_w           =        1'b0           ;
                        BMU_IObuffer_choose_reg_B_11_w  =        1'b0           ;
                
                end
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin4ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin5ELEMENT_BM         ) )                      
                begin
                        BMU_IObuffer_B12_w              =       pixelidxQuarterrSubPixelNumin4ElemBM[3:0];
                        BMU_IObuffer_OEB_12_w           =        1'b1;
                        BMU_IObuffer_choose_reg_B_12_w  =        1'b1;

                end
                
                else
                begin
                        BMU_IObuffer_B12_w              =        4'd0           ;
                        BMU_IObuffer_OEB_12_w           =        1'b0           ;
                        BMU_IObuffer_choose_reg_B_12_w  =        1'b0           ;
                
                end
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin5ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin6ELEMENT_BM         ) )                      
                begin
                        BMU_IObuffer_B13_w              =       pixelidxQuarterrSubPixelNumin5ElemBM[3:0];
                        BMU_IObuffer_OEB_13_w           =        1'b1;
                        BMU_IObuffer_choose_reg_B_13_w  =        1'b1;

                end
               
                else
                begin
                        BMU_IObuffer_B13_w              =        4'd0           ;
                        BMU_IObuffer_OEB_13_w           =        1'b0           ;
                        BMU_IObuffer_choose_reg_B_13_w  =        1'b0           ;
                
                end
                
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin6ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin7ELEMENT_BM         ) )                      
                begin
                        BMU_IObuffer_B14_w              =       pixelidxQuarterrSubPixelNumin6ElemBM[3:0];
                        BMU_IObuffer_OEB_14_w           =        1'b1;
                        BMU_IObuffer_choose_reg_B_14_w  =        1'b1;

                end
               
                else
                begin
                        BMU_IObuffer_B14_w              =        4'd0           ;
                        BMU_IObuffer_OEB_14_w           =        1'b0           ;
                        BMU_IObuffer_choose_reg_B_14_w  =        1'b0           ;
                
                end
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin7ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin8ELEMENT_BM         ) )                      
                begin
                        BMU_IObuffer_B15_w              =       pixelidxQuarterrSubPixelNumin7ElemBM[3:0];
                        BMU_IObuffer_OEB_15_w           =        1'b1;
                        BMU_IObuffer_choose_reg_B_15_w  =        1'b1;

                end
                
                else
                begin
                        BMU_IObuffer_B15_w              =        4'd0           ;
                        BMU_IObuffer_OEB_15_w           =        1'b0           ;
                        BMU_IObuffer_choose_reg_B_15_w  =        1'b0           ;
                
                end
                
                
                
                
                
                
                              
                
                BMU_IObuffer_DIB08_w            =        64'd0          ;
                BMU_IObuffer_DIB09_w            =        64'd0          ;
                BMU_IObuffer_DIB10_w            =        64'd0          ;
                BMU_IObuffer_DIB11_w            =        64'd0          ;
                BMU_IObuffer_DIB12_w            =        64'd0          ;
                BMU_IObuffer_DIB13_w            =        64'd0          ;
                BMU_IObuffer_DIB14_w            =        64'd0          ;
                BMU_IObuffer_DIB15_w            =        64'd0          ;
                
                BMU_IObuffer_WEBN_08_w          =        1'b1           ; 
                BMU_IObuffer_WEBN_09_w          =        1'b1           ;
                BMU_IObuffer_WEBN_10_w          =        1'b1           ;
                BMU_IObuffer_WEBN_11_w          =        1'b1           ;
                BMU_IObuffer_WEBN_12_w          =        1'b1           ;
                BMU_IObuffer_WEBN_13_w          =        1'b1           ;
                BMU_IObuffer_WEBN_14_w          =        1'b1           ;
                BMU_IObuffer_WEBN_15_w          =        1'b1           ;
                         
                
                
                //Buffer for Background Model V
                if ( (pixelidx_Quarter_5r >= 12'd0)                     && (pixelidx_Quarter_5r < `PIXELNUMin1ELEMENT_BM                ) )     
                begin
                        BMV_IObuffer_A16_w              =       pixelidxQuarter5r12b[3:0];
                        BMV_IObuffer_WEAN_16_w          =       1'b0;
                        BMV_IObuffer_choose_reg_A_16_w  =       1'b1;

                end
                
                else
                begin
                        BMV_IObuffer_A16_w              =        4'd0           ;
                        BMV_IObuffer_WEAN_16_w          =        1'b1           ;             
                        BMV_IObuffer_choose_reg_A_16_w  =        1'b0           ;     
                end
                
                
                
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin1ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin2ELEMENT_BM                ) )                      
                begin
                        BMV_IObuffer_A17_w              =       pixelidxQuarter5rSubPixelNumin1ElemBM[3:0];
                        BMV_IObuffer_WEAN_17_w          =        1'b0;
                        BMV_IObuffer_choose_reg_A_17_w  =        1'b1;

                end
                
                else
                begin
                        BMV_IObuffer_A17_w              =        4'd0           ; 
                        BMV_IObuffer_WEAN_17_w          =        1'b1           ;             
                        BMV_IObuffer_choose_reg_A_17_w  =        1'b0           ;     
                end
                
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin2ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin3ELEMENT_BM                ) )                      
                begin
                        BMV_IObuffer_A18_w              =       pixelidxQuarter5rSubPixelNumin2ElemBM[3:0];
                        BMV_IObuffer_WEAN_18_w          =        1'b0;
                        BMV_IObuffer_choose_reg_A_18_w  =        1'b1;

                end
               
                else
                begin
                        BMV_IObuffer_A18_w              =        4'd0           ; 
                        BMV_IObuffer_WEAN_18_w          =        1'b1           ;             
                        BMV_IObuffer_choose_reg_A_18_w  =        1'b0           ;     
                end
                
                
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin3ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin4ELEMENT_BM                ) )                      
                begin
                        BMV_IObuffer_A19_w              =       pixelidxQuarter5rSubPixelNumin3ElemBM[3:0];
                        BMV_IObuffer_WEAN_19_w          =        1'b0;
                        BMV_IObuffer_choose_reg_A_19_w  =        1'b1;

                end
                
                else
                begin
                        BMV_IObuffer_A19_w              =        4'd0           ; 
                        BMV_IObuffer_WEAN_19_w          =        1'b1           ;             
                        BMV_IObuffer_choose_reg_A_19_w  =        1'b0           ;     
                end
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin4ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin5ELEMENT_BM                ) )                      
                begin
                        BMV_IObuffer_A20_w              =       pixelidxQuarter5rSubPixelNumin4ElemBM[3:0];
                        BMV_IObuffer_WEAN_20_w          =        1'b0;
                        BMV_IObuffer_choose_reg_A_20_w  =        1'b1;

                end
                
                else
                begin
                        BMV_IObuffer_A20_w              =        4'd0           ; 
                        BMV_IObuffer_WEAN_20_w          =        1'b1           ;             
                        BMV_IObuffer_choose_reg_A_20_w  =        1'b0           ;     
                end
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin5ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin6ELEMENT_BM                ) )                      
                begin
                        BMV_IObuffer_A21_w              =       pixelidxQuarter5rSubPixelNumin5ElemBM[3:0];
                        BMV_IObuffer_WEAN_21_w          =        1'b0;
                        BMV_IObuffer_choose_reg_A_21_w  =        1'b1;

                end
                
                else
                begin
                        BMV_IObuffer_A21_w              =        4'd0           ; 
                        BMV_IObuffer_WEAN_21_w          =        1'b1           ;             
                        BMV_IObuffer_choose_reg_A_21_w  =        1'b0           ;     
                end
                
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin6ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin7ELEMENT_BM                ) )                      
                begin
                        BMV_IObuffer_A22_w              =       pixelidxQuarter5rSubPixelNumin6ElemBM[3:0];
                        BMV_IObuffer_WEAN_22_w          =        1'b0;
                        BMV_IObuffer_choose_reg_A_22_w  =        1'b1;

                end
                
                else
                begin
                        BMV_IObuffer_A22_w              =        4'd0           ;           
                        BMV_IObuffer_WEAN_22_w          =        1'b1           ;             
                        BMV_IObuffer_choose_reg_A_22_w  =        1'b0           ;     
                end
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin7ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin8ELEMENT_BM                ) )                      
                begin
                        BMV_IObuffer_A23_w              =       pixelidxQuarter5rSubPixelNumin7ElemBM[3:0];
                        BMV_IObuffer_WEAN_23_w          =        1'b0;
                        BMV_IObuffer_choose_reg_A_23_w  =        1'b1;
                end
                
                else
                begin
                        BMV_IObuffer_A23_w              =        4'd0           ;
                        BMV_IObuffer_WEAN_23_w          =        1'b1           ;     
                        BMV_IObuffer_choose_reg_A_23_w  =        1'b0           ;  
                end
                
                
                
                
                 
                BMV_IObuffer_DIA16_w            =        Updated_BMV_32to64_r   ; 
                BMV_IObuffer_DIA17_w            =        Updated_BMV_32to64_r   ; 
                BMV_IObuffer_DIA18_w            =        Updated_BMV_32to64_r   ; 
                BMV_IObuffer_DIA19_w            =        Updated_BMV_32to64_r   ; 
                BMV_IObuffer_DIA20_w            =        Updated_BMV_32to64_r   ; 
                BMV_IObuffer_DIA21_w            =        Updated_BMV_32to64_r   ; 
                BMV_IObuffer_DIA22_w            =        Updated_BMV_32to64_r   ; 
                BMV_IObuffer_DIA23_w            =        Updated_BMV_32to64_r   ; 
                
                BMV_IObuffer_OEA_16_w           =        1'b0           ;              
                BMV_IObuffer_OEA_17_w           =        1'b0           ;              
                BMV_IObuffer_OEA_18_w           =        1'b0           ;              
                BMV_IObuffer_OEA_19_w           =        1'b0           ;              
                BMV_IObuffer_OEA_20_w           =        1'b0           ;              
                BMV_IObuffer_OEA_21_w           =        1'b0           ;              
                BMV_IObuffer_OEA_22_w           =        1'b0           ;              
                BMV_IObuffer_OEA_23_w           =        1'b0           ;  
                
                
                
                
                
                if ( (pixelidx_Quarter_r >= 12'd0)                      && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_BM         ) )     
                begin
                        BMV_IObuffer_B16_w              =       pixelidxQuarterr12b[3:0];
                        BMV_IObuffer_OEB_16_w           =       1'b1;
                        BMV_IObuffer_choose_reg_B_16_w  =       1'b1;

                end
                
                else
                begin
                        BMV_IObuffer_B16_w              =        4'd0           ; 
                        BMV_IObuffer_OEB_16_w           =        1'b0           ; 
                        BMV_IObuffer_choose_reg_B_16_w  =        1'b0           ; 
                end
                
                
                
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_BM         ) )                      
                begin
                        BMV_IObuffer_B17_w              =       pixelidxQuarterrSubPixelNuminlElemBM[3:0];
                        BMV_IObuffer_OEB_17_w           =        1'b1;
                        BMV_IObuffer_choose_reg_B_17_w  =        1'b1;

                end
               
                else
                begin
                        BMV_IObuffer_B17_w              =        4'd0           ;
                        BMV_IObuffer_OEB_17_w           =        1'b0           ;
                        BMV_IObuffer_choose_reg_B_17_w  =        1'b0           ;
                
                end
                
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin2ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin3ELEMENT_BM         ) )                      
                begin
                        BMV_IObuffer_B18_w              =       pixelidxQuarterrSubPixelNumin2ElemBM[3:0];
                        BMV_IObuffer_OEB_18_w           =        1'b1;
                        BMV_IObuffer_choose_reg_B_18_w  =        1'b1;

                end
                
                else
                begin
                        BMV_IObuffer_B18_w              =        4'd0           ;
                        BMV_IObuffer_OEB_18_w           =        1'b0           ;
                        BMV_IObuffer_choose_reg_B_18_w  =        1'b0           ;
                
                end
                
                
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin3ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin4ELEMENT_BM         ) )                      
                begin
                        BMV_IObuffer_B19_w              =       pixelidxQuarterrSubPixelNumin3ElemBM[3:0];
                        BMV_IObuffer_OEB_19_w           =        1'b1;
                        BMV_IObuffer_choose_reg_B_19_w  =        1'b1;

                end
                
                else
                begin
                        BMV_IObuffer_B19_w              =        4'd0           ;
                        BMV_IObuffer_OEB_19_w           =        1'b0           ;
                        BMV_IObuffer_choose_reg_B_19_w  =        1'b0           ;
                
                end
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin4ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin5ELEMENT_BM         ) )                      
                begin
                        BMV_IObuffer_B20_w              =       pixelidxQuarterrSubPixelNumin4ElemBM[3:0];
                        BMV_IObuffer_OEB_20_w           =        1'b1;
                        BMV_IObuffer_choose_reg_B_20_w  =        1'b1;

                end
                
                else
                begin
                        BMV_IObuffer_B20_w              =        4'd0           ;
                        BMV_IObuffer_OEB_20_w           =        1'b0           ;
                        BMV_IObuffer_choose_reg_B_20_w  =        1'b0           ;
                
                end
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin5ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin6ELEMENT_BM         ) )                      
                begin
                        BMV_IObuffer_B21_w              =       pixelidxQuarterrSubPixelNumin5ElemBM[3:0];
                        BMV_IObuffer_OEB_21_w           =        1'b1;
                        BMV_IObuffer_choose_reg_B_21_w  =        1'b1;

                end
                
                else
                begin
                        BMV_IObuffer_B21_w              =        4'd0           ;
                        BMV_IObuffer_OEB_21_w           =        1'b0           ;
                        BMV_IObuffer_choose_reg_B_21_w  =        1'b0           ;
                
                end
                
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin6ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin7ELEMENT_BM         ) )                      
                begin
                        BMV_IObuffer_B22_w              =       pixelidxQuarterrSubPixelNumin6ElemBM[3:0];
                        BMV_IObuffer_OEB_22_w           =        1'b1;
                        BMV_IObuffer_choose_reg_B_22_w  =        1'b1;

                end
                
                else
                begin
                        BMV_IObuffer_B22_w              =        4'd0           ;
                        BMV_IObuffer_OEB_22_w           =        1'b0           ;
                        BMV_IObuffer_choose_reg_B_22_w  =        1'b0           ;
                
                end
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin7ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin8ELEMENT_BM         ) )                      
                begin
                        BMV_IObuffer_B23_w              =       pixelidxQuarterrSubPixelNumin7ElemBM[3:0];
                        BMV_IObuffer_OEB_23_w           =        1'b1;
                        BMV_IObuffer_choose_reg_B_23_w  =        1'b1;

                end
                
                else
                begin
                        BMV_IObuffer_B23_w              =        4'd0           ;
                        BMV_IObuffer_OEB_23_w           =        1'b0           ;
                        BMV_IObuffer_choose_reg_B_23_w  =        1'b0           ;
                
                end
                
                
                
                
                
                
                              
                
                BMV_IObuffer_DIB16_w            =        64'd0          ;
                BMV_IObuffer_DIB17_w            =        64'd0          ;
                BMV_IObuffer_DIB18_w            =        64'd0          ;
                BMV_IObuffer_DIB19_w            =        64'd0          ;
                BMV_IObuffer_DIB20_w            =        64'd0          ;
                BMV_IObuffer_DIB21_w            =        64'd0          ;
                BMV_IObuffer_DIB22_w            =        64'd0          ;
                BMV_IObuffer_DIB23_w            =        64'd0          ;
                
                BMV_IObuffer_WEBN_16_w          =        1'b1           ; 
                BMV_IObuffer_WEBN_17_w          =        1'b1           ;
                BMV_IObuffer_WEBN_18_w          =        1'b1           ;
                BMV_IObuffer_WEBN_19_w          =        1'b1           ;
                BMV_IObuffer_WEBN_20_w          =        1'b1           ;
                BMV_IObuffer_WEBN_21_w          =        1'b1           ;
                BMV_IObuffer_WEBN_22_w          =        1'b1           ;
                BMV_IObuffer_WEBN_23_w          =        1'b1           ;
                         
                
                //Buffer for Background Model W
                if ( (pixelidx_Quarter_5r >= 12'd0)                     && (pixelidx_Quarter_5r < `PIXELNUMin1ELEMENT_BM                ) )     
                begin
                        BMW_IObuffer_A24_w              =       pixelidxQuarter5r12b[3:0];
                        BMW_IObuffer_WEAN_24_w          =       1'b0;
                        BMW_IObuffer_choose_reg_A_24_w  =       1'b1;

                end
                
                else
                begin
                        BMW_IObuffer_A24_w              =        4'd0           ;
                        BMW_IObuffer_WEAN_24_w          =        1'b1           ;             
                        BMW_IObuffer_choose_reg_A_24_w  =        1'b0           ;     
                end
                
                
                
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin1ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin2ELEMENT_BM                ) )                      
                begin
                        BMW_IObuffer_A25_w              =       pixelidxQuarter5rSubPixelNumin1ElemBM[3:0];
                        BMW_IObuffer_WEAN_25_w          =        1'b0;
                        BMW_IObuffer_choose_reg_A_25_w  =        1'b1;

                end
                
                else
                begin
                        BMW_IObuffer_A25_w              =        4'd0           ; 
                        BMW_IObuffer_WEAN_25_w          =        1'b1           ;             
                        BMW_IObuffer_choose_reg_A_25_w  =        1'b0           ;     
                end
                
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin2ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin3ELEMENT_BM                ) )                      
                begin
                        BMW_IObuffer_A26_w              =       pixelidxQuarter5rSubPixelNumin2ElemBM[3:0];
                        BMW_IObuffer_WEAN_26_w          =        1'b0;
                        BMW_IObuffer_choose_reg_A_26_w  =        1'b1;

                end
               
                else
                begin
                        BMW_IObuffer_A26_w              =        4'd0           ; 
                        BMW_IObuffer_WEAN_26_w          =        1'b1           ;             
                        BMW_IObuffer_choose_reg_A_26_w  =        1'b0           ;     
                end
                
                
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin3ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin4ELEMENT_BM                ) )                      
                begin
                        BMW_IObuffer_A27_w              =       pixelidxQuarter5rSubPixelNumin3ElemBM[3:0];
                        BMW_IObuffer_WEAN_27_w          =        1'b0;
                        BMW_IObuffer_choose_reg_A_27_w  =        1'b1;

                end
                
                else
                begin
                        BMW_IObuffer_A27_w              =        4'd0           ; 
                        BMW_IObuffer_WEAN_27_w          =        1'b1           ;             
                        BMW_IObuffer_choose_reg_A_27_w  =        1'b0           ;     
                end
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin4ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin5ELEMENT_BM                ) )                      
                begin
                        BMW_IObuffer_A28_w              =       pixelidxQuarter5rSubPixelNumin4ElemBM[3:0];
                        BMW_IObuffer_WEAN_28_w          =        1'b0;
                        BMW_IObuffer_choose_reg_A_28_w  =        1'b1;

                end
                
                else
                begin
                        BMW_IObuffer_A28_w              =        4'd0           ; 
                        BMW_IObuffer_WEAN_28_w          =        1'b1           ;             
                        BMW_IObuffer_choose_reg_A_28_w  =        1'b0           ;     
                end
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin5ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin6ELEMENT_BM                ) )                      
                begin
                        BMW_IObuffer_A29_w              =       pixelidxQuarter5rSubPixelNumin5ElemBM[3:0];
                        BMW_IObuffer_WEAN_29_w          =        1'b0;
                        BMW_IObuffer_choose_reg_A_29_w  =        1'b1;

                end
                
                else
                begin
                        BMW_IObuffer_A29_w              =        4'd0           ; 
                        BMW_IObuffer_WEAN_29_w          =        1'b1           ;             
                        BMW_IObuffer_choose_reg_A_29_w  =        1'b0           ;     
                end
                
                
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin6ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin7ELEMENT_BM                ) )                      
                begin
                        BMW_IObuffer_A30_w              =       pixelidxQuarter5rSubPixelNumin6ElemBM[3:0];
                        BMW_IObuffer_WEAN_30_w          =        1'b0;
                        BMW_IObuffer_choose_reg_A_30_w  =        1'b1;

                end
                
                else
                begin
                        BMW_IObuffer_A30_w              =        4'd0           ;           
                        BMW_IObuffer_WEAN_30_w          =        1'b1           ;             
                        BMW_IObuffer_choose_reg_A_30_w  =        1'b0           ;     
                end
                
                
                
                
                if( (pixelidx_Quarter_5r >= `PIXELNUMin7ELEMENT_BM)                     && (pixelidx_Quarter_5r < `PIXELNUMin8ELEMENT_BM                ) )                      
                begin
                        BMW_IObuffer_A31_w              =       pixelidxQuarter5rSubPixelNumin7ElemBM[3:0];
                        BMW_IObuffer_WEAN_31_w          =        1'b0;
                        BMW_IObuffer_choose_reg_A_31_w  =        1'b1;
                end
                
                else
                begin
                        BMW_IObuffer_A31_w              =        4'd0           ;
                        BMW_IObuffer_WEAN_31_w          =        1'b1           ;     
                        BMW_IObuffer_choose_reg_A_31_w  =        1'b0           ;  
                end
                
                
                
                
                 
                BMW_IObuffer_DIA24_w            =        Updated_BMW_32to64_r   ; 
                BMW_IObuffer_DIA25_w            =        Updated_BMW_32to64_r   ; 
                BMW_IObuffer_DIA26_w            =        Updated_BMW_32to64_r   ; 
                BMW_IObuffer_DIA27_w            =        Updated_BMW_32to64_r   ; 
                BMW_IObuffer_DIA28_w            =        Updated_BMW_32to64_r   ; 
                BMW_IObuffer_DIA29_w            =        Updated_BMW_32to64_r   ; 
                BMW_IObuffer_DIA30_w            =        Updated_BMW_32to64_r   ; 
                BMW_IObuffer_DIA31_w            =        Updated_BMW_32to64_r   ; 
                
                BMW_IObuffer_OEA_24_w           =        1'b0           ;              
                BMW_IObuffer_OEA_25_w           =        1'b0           ;              
                BMW_IObuffer_OEA_26_w           =        1'b0           ;              
                BMW_IObuffer_OEA_27_w           =        1'b0           ;              
                BMW_IObuffer_OEA_28_w           =        1'b0           ;              
                BMW_IObuffer_OEA_29_w           =        1'b0           ;              
                BMW_IObuffer_OEA_30_w           =        1'b0           ;              
                BMW_IObuffer_OEA_31_w           =        1'b0           ;  
                
                
                
                
                if ( (pixelidx_Quarter_r >= 12'd0)                      && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_BM         ) )     
                begin
                        BMW_IObuffer_B24_w              =       pixelidxQuarterr12b[3:0];
                        BMW_IObuffer_OEB_24_w           =       1'b1;
                        BMW_IObuffer_choose_reg_B_24_w  =       1'b1;

                end
                
                else
                begin
                        BMW_IObuffer_B24_w              =        4'd0           ; 
                        BMW_IObuffer_OEB_24_w           =        1'b0           ; 
                        BMW_IObuffer_choose_reg_B_24_w  =        1'b0           ; 
                end
                
                
                
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_BM         ) )                      
                begin
                        BMW_IObuffer_B25_w              =       pixelidxQuarterrSubPixelNuminlElemBM[3:0];
                        BMW_IObuffer_OEB_25_w           =        1'b1;
                        BMW_IObuffer_choose_reg_B_25_w  =        1'b1;

                end
               
                else
                begin
                        BMW_IObuffer_B25_w              =        4'd0           ;
                        BMW_IObuffer_OEB_25_w           =        1'b0           ;
                        BMW_IObuffer_choose_reg_B_25_w  =        1'b0           ;
                
                end
                
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin2ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin3ELEMENT_BM         ) )                      
                begin
                        BMW_IObuffer_B26_w              =       pixelidxQuarterrSubPixelNumin2ElemBM[3:0];
                        BMW_IObuffer_OEB_26_w           =        1'b1;
                        BMW_IObuffer_choose_reg_B_26_w  =        1'b1;

                end
                
                else
                begin
                        BMW_IObuffer_B26_w              =        4'd0           ;
                        BMW_IObuffer_OEB_26_w           =        1'b0           ;
                        BMW_IObuffer_choose_reg_B_26_w  =        1'b0           ;
                
                end
                
                
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin3ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin4ELEMENT_BM         ) )                      
                begin
                        BMW_IObuffer_B27_w              =       pixelidxQuarterrSubPixelNumin3ElemBM[3:0];
                        BMW_IObuffer_OEB_27_w           =        1'b1;
                        BMW_IObuffer_choose_reg_B_27_w  =        1'b1;

                end
                
                else
                begin
                        BMW_IObuffer_B27_w              =        4'd0           ;
                        BMW_IObuffer_OEB_27_w           =        1'b0           ;
                        BMW_IObuffer_choose_reg_B_27_w  =        1'b0           ;
                
                end
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin4ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin5ELEMENT_BM         ) )                      
                begin
                        BMW_IObuffer_B28_w              =       pixelidxQuarterrSubPixelNumin4ElemBM[3:0];
                        BMW_IObuffer_OEB_28_w           =        1'b1;
                        BMW_IObuffer_choose_reg_B_28_w  =        1'b1;

                end
                
                else
                begin
                        BMW_IObuffer_B28_w              =        4'd0           ;
                        BMW_IObuffer_OEB_28_w           =        1'b0           ;
                        BMW_IObuffer_choose_reg_B_28_w  =        1'b0           ;
                
                end
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin5ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin6ELEMENT_BM         ) )                      
                begin
                        BMW_IObuffer_B29_w              =       pixelidxQuarterrSubPixelNumin5ElemBM[3:0];
                        BMW_IObuffer_OEB_29_w           =        1'b1;
                        BMW_IObuffer_choose_reg_B_29_w  =        1'b1;

                end
               
                else
                begin
                        BMW_IObuffer_B29_w              =        4'd0           ;
                        BMW_IObuffer_OEB_29_w           =        1'b0           ;
                        BMW_IObuffer_choose_reg_B_29_w  =        1'b0           ;
                
                end
                
                
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin6ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin7ELEMENT_BM         ) )                      
                begin
                        BMW_IObuffer_B30_w              =       pixelidxQuarterrSubPixelNumin6ElemBM[3:0];
                        BMW_IObuffer_OEB_30_w           =        1'b1;
                        BMW_IObuffer_choose_reg_B_30_w  =        1'b1;

                end
                
                else
                begin
                        BMW_IObuffer_B30_w              =        4'd0           ;
                        BMW_IObuffer_OEB_30_w           =        1'b0           ;
                        BMW_IObuffer_choose_reg_B_30_w  =        1'b0           ;
                
                end
                
                
                
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin7ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin8ELEMENT_BM         ) )                      
                begin
                        BMW_IObuffer_B31_w              =       pixelidxQuarterrSubPixelNumin7ElemBM[3:0];
                        BMW_IObuffer_OEB_31_w           =        1'b1;
                        BMW_IObuffer_choose_reg_B_31_w  =        1'b1;

                end
                
                else
                begin
                        BMW_IObuffer_B31_w              =        4'd0           ;
                        BMW_IObuffer_OEB_31_w           =        1'b0           ;
                        BMW_IObuffer_choose_reg_B_31_w  =        1'b0           ;
                
                end
                
                
                
                
                
                
                              
                
                BMW_IObuffer_DIB24_w            =        64'd0          ;
                BMW_IObuffer_DIB25_w            =        64'd0          ;
                BMW_IObuffer_DIB26_w            =        64'd0          ;
                BMW_IObuffer_DIB27_w            =        64'd0          ;
                BMW_IObuffer_DIB28_w            =        64'd0          ;
                BMW_IObuffer_DIB29_w            =        64'd0          ;
                BMW_IObuffer_DIB30_w            =        64'd0          ;
                BMW_IObuffer_DIB31_w            =        64'd0          ;
                
                BMW_IObuffer_WEBN_24_w          =        1'b1           ; 
                BMW_IObuffer_WEBN_25_w          =        1'b1           ;
                BMW_IObuffer_WEBN_26_w          =        1'b1           ;
                BMW_IObuffer_WEBN_27_w          =        1'b1           ;
                BMW_IObuffer_WEBN_28_w          =        1'b1           ;
                BMW_IObuffer_WEBN_29_w          =        1'b1           ;
                BMW_IObuffer_WEBN_30_w          =        1'b1           ;
                BMW_IObuffer_WEBN_31_w          =        1'b1           ;
                         
                
                
                //Buffer for Curent frame Y                        
                CurY_Ibuffer_A32_w              =        4'd0           ;                       
                CurY_Ibuffer_A33_w              =        4'd0           ; 
                CurY_Ibuffer_DIA32_w            =        64'd0          ;                                                             
                CurY_Ibuffer_DIA33_w            =        64'd0          ;  
                CurY_Ibuffer_WEAN_32_w          =        1'b1           ;          
                CurY_Ibuffer_WEAN_33_w          =        1'b1           ;          
                CurY_Ibuffer_OEA_32_w           =        1'b0           ;           
                CurY_Ibuffer_OEA_33_w           =        1'b0           ;           
                CurY_Ibuffer_choose_reg_A_32_w  =        1'b0           ;  
                CurY_Ibuffer_choose_reg_A_33_w  =        1'b0           ;  
                
                
                if( (pixelidx_Quarter_r >= 12'd0)                       && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR                ) )                      
                begin
                        CurY_Ibuffer_B32_w              =        pixelidxQuarterr12b3sh[3:0];
                        CurY_Ibuffer_OEB_32_w           =        1'b1;
                        CurY_Ibuffer_choose_reg_B_32_w  =        1'b1;

                end
                
                else
                begin
                        CurY_Ibuffer_B32_w              =        4'd0           ;
                        CurY_Ibuffer_OEB_32_w           =        1'b0           ;
                        CurY_Ibuffer_choose_reg_B_32_w  =        1'b0           ;
                
                end
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR)                     && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR                ) )                      
                begin
                        CurY_Ibuffer_B33_w              =        pixelidxQuarterrSubPixelNumin1ElemCUR[3:0];
                        CurY_Ibuffer_OEB_33_w           =        1'b1;
                        CurY_Ibuffer_choose_reg_B_33_w  =        1'b1;

                end
                
                else
                begin
                        CurY_Ibuffer_B33_w              =        4'd0           ;
                        CurY_Ibuffer_OEB_33_w           =        1'b0           ;
                        CurY_Ibuffer_choose_reg_B_33_w  =        1'b0           ;
                
                end
                                                                                
                                                                                                                                           
                CurY_Ibuffer_DIB32_w            =        64'd0          ;                                                                                                            
                CurY_Ibuffer_DIB33_w            =        64'd0          ;                                    
                CurY_Ibuffer_WEBN_32_w          =        1'b1           ;            
                CurY_Ibuffer_WEBN_33_w          =        1'b1           ;                                  
                                            
                                                            
                           
                           
                                     
                
                
                //Buffer for Curent frame U                      
                CurU_Ibuffer_A34_w              =        4'd0           ;                         
                CurU_Ibuffer_A35_w              =        4'd0           ;  
                CurU_Ibuffer_DIA34_w            =        64'd0          ;                                                               
                CurU_Ibuffer_DIA35_w            =        64'd0          ;  
                CurU_Ibuffer_WEAN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEAN_35_w          =        1'b1           ;            
                CurU_Ibuffer_OEA_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEA_35_w           =        1'b0           ;             
                CurU_Ibuffer_choose_reg_A_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_A_35_w  =        1'b0           ;    
                
                if( (pixelidx_Quarter_r >= 12'd0)                       && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR                ) )                      
                begin
                        CurU_Ibuffer_B34_w              =        pixelidxQuarterr12b3sh[3:0];
                        CurU_Ibuffer_OEB_34_w           =        1'b1;
                        CurU_Ibuffer_choose_reg_B_34_w  =        1'b1;

                end
                
                else
                begin
                        CurU_Ibuffer_B34_w              =        4'd0           ;
                        CurU_Ibuffer_OEB_34_w           =        1'b0           ;
                        CurU_Ibuffer_choose_reg_B_34_w  =        1'b0           ;
                
                end
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR)                     && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR                ) )                      
                begin
                        CurU_Ibuffer_B35_w              =        pixelidxQuarterrSubPixelNumin1ElemCUR[3:0];
                        CurU_Ibuffer_OEB_35_w           =        1'b1;
                        CurU_Ibuffer_choose_reg_B_35_w  =        1'b1;

                end
                
                else
                begin
                        CurU_Ibuffer_B35_w              =        4'd0           ;
                        CurU_Ibuffer_OEB_35_w           =        1'b0           ;
                        CurU_Ibuffer_choose_reg_B_35_w  =        1'b0           ;
                
                end
                                                                                
                                                                                                                                           
                CurU_Ibuffer_DIB34_w            =        64'd0          ;                                                                                                            
                CurU_Ibuffer_DIB35_w            =        64'd0          ;                                    
                CurU_Ibuffer_WEBN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEBN_35_w          =        1'b1           ;                                  
                                            
                                                            
                           
                
                //Buffer for Curent frame V                       
                CurV_Ibuffer_A36_w              =        4'd0           ;                        
                CurV_Ibuffer_A37_w              =        4'd0           ;                        
                CurV_Ibuffer_DIA36_w            =        64'd0          ;                                                               
                CurV_Ibuffer_DIA37_w            =        64'd0          ;    
                CurV_Ibuffer_WEAN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEAN_37_w          =        1'b1           ;            
                CurV_Ibuffer_OEA_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEA_37_w           =        1'b0           ;             
                CurV_Ibuffer_choose_reg_A_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_A_37_w  =        1'b0           ;    
                 
                if( (pixelidx_Quarter_r >= 12'd0)                       && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR                ) )                      
                begin
                        CurV_Ibuffer_B36_w              =        pixelidxQuarterr12b3sh[3:0];
                        CurV_Ibuffer_OEB_36_w           =        1'b1;
                        CurV_Ibuffer_choose_reg_B_36_w  =        1'b1;

                end
                
                else
                begin
                        CurV_Ibuffer_B36_w              =        4'd0           ;
                        CurV_Ibuffer_OEB_36_w           =        1'b0           ;
                        CurV_Ibuffer_choose_reg_B_36_w  =        1'b0           ;
                
                end
                
                if( (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR)                     && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR                ) )                      
                begin
                        CurV_Ibuffer_B37_w              =        pixelidxQuarterrSubPixelNumin1ElemCUR[3:0];
                        CurV_Ibuffer_OEB_37_w           =        1'b1;
                        CurV_Ibuffer_choose_reg_B_37_w  =        1'b1;

                end
                
                else
                begin
                        CurV_Ibuffer_B37_w              =        4'd0           ;
                        CurV_Ibuffer_OEB_37_w           =        1'b0           ;
                        CurV_Ibuffer_choose_reg_B_37_w  =        1'b0           ;
                
                end
                                                                                
                                                                                                                                           
                CurV_Ibuffer_DIB36_w            =        64'd0          ;                                                                                                            
                CurV_Ibuffer_DIB37_w            =        64'd0          ;                                    
                CurV_Ibuffer_WEBN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEBN_37_w          =        1'b1           ;                                  
                                            
                                                            
                           
                
                
                //Buffer for Mask
                if( (pixelidx_5r >= 12'd0)                      && (pixelidx_5r < `PIXELNUMin1ELEMENT_MASK              ) )                      
                begin
                        Mask_Obuffer_A38_w              =        pixelidx5r6sh[3:0];
                        Mask_Obuffer_WEAN_38_w          =        1'b0;
                        Mask_Obuffer_choose_reg_A_38_w  =        1'b1;
                end
                
                else
                begin
                        Mask_Obuffer_A38_w              =        4'd0           ;
                        Mask_Obuffer_WEAN_38_w          =        1'b1           ;     
                        Mask_Obuffer_choose_reg_A_38_w  =        1'b0           ;  
                end
                
                
                Mask_Obuffer_DIA38_w            =        Mask_1to64_r   ;  
                Mask_Obuffer_OEA_38_w           =        1'b0           ;                   
                                                         
                                                         
                                                         
                Mask_Obuffer_B38_w              =        4'd0           ;                                                               
                Mask_Obuffer_DIB38_w            =        64'd0          ;                            
                Mask_Obuffer_WEBN_38_w          =        1'b1           ;                                            
                Mask_Obuffer_OEB_38_w           =        1'b0           ;                                  
                Mask_Obuffer_choose_reg_B_38_w  =        1'b0           ;           
                                                         

            end                                                                         
                                                                                    
            `SEGSTATE_OUTPUT_BM_Y:                                                    
            begin                                      
                
                
                                                
                //Buffer for Background Model Y
                BMY_IObuffer_A00_w              =        4'd0           ;
                BMY_IObuffer_A01_w              =        4'd0           ; 
                BMY_IObuffer_A02_w              =        4'd0           ; 
                BMY_IObuffer_A03_w              =        4'd0           ; 
                BMY_IObuffer_A04_w              =        4'd0           ; 
                BMY_IObuffer_A05_w              =        4'd0           ; 
                BMY_IObuffer_A06_w              =        4'd0           ;           
                BMY_IObuffer_A07_w              =        4'd0           ; 
                BMY_IObuffer_DIA00_w            =        64'd0          ; 
                BMY_IObuffer_DIA01_w            =        64'd0          ; 
                BMY_IObuffer_DIA02_w            =        64'd0          ; 
                BMY_IObuffer_DIA03_w            =        64'd0          ; 
                BMY_IObuffer_DIA04_w            =        64'd0          ; 
                BMY_IObuffer_DIA05_w            =        64'd0          ; 
                BMY_IObuffer_DIA06_w            =        64'd0          ; 
                BMY_IObuffer_DIA07_w            =        64'd0          ; 
                BMY_IObuffer_WEAN_00_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_01_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_02_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_03_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_04_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_05_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_06_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_07_w          =        1'b1           ;     
                BMY_IObuffer_OEA_00_w           =        1'b0           ;              
                BMY_IObuffer_OEA_01_w           =        1'b0           ;              
                BMY_IObuffer_OEA_02_w           =        1'b0           ;              
                BMY_IObuffer_OEA_03_w           =        1'b0           ;              
                BMY_IObuffer_OEA_04_w           =        1'b0           ;              
                BMY_IObuffer_OEA_05_w           =        1'b0           ;              
                BMY_IObuffer_OEA_06_w           =        1'b0           ;              
                BMY_IObuffer_OEA_07_w           =        1'b0           ;  
                BMY_IObuffer_choose_reg_A_00_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_01_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_02_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_03_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_04_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_05_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_06_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_07_w  =        1'b0           ;  
                
                
                
                if( (Count_BMYUVW_ADDR_r >= 7'd0) && (Count_BMYUVW_ADDR_r < `ADDRNUMin1ELEMENT) )
                 begin 
                        BMY_IObuffer_B00_w              =        Count_BMYUVW_ADDR_r[3:0];
                        BMY_IObuffer_OEB_00_w           =        1'b1           ;
                        BMY_IObuffer_choose_reg_B_00_w  =        1'b1           ;       
                 end             
                 else
                 begin
                        BMY_IObuffer_B00_w              =        4'd0           ;
                        BMY_IObuffer_OEB_00_w           =        1'b0           ;
                        BMY_IObuffer_choose_reg_B_00_w  =        1'b0           ;
                           
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin1ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin2ELEMENT) )
                 begin 
                        BMY_IObuffer_B01_w              =        CountBMYUVWSubAddrNumIn1Elem[3:0]               ;
                        BMY_IObuffer_OEB_01_w           =        1'b1           ; 
                        BMY_IObuffer_choose_reg_B_01_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMY_IObuffer_B01_w              =        4'd0           ;
                        BMY_IObuffer_OEB_01_w           =        1'b0           ;
                        BMY_IObuffer_choose_reg_B_01_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin2ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin3ELEMENT) )
                 begin 
                        BMY_IObuffer_B02_w              =        CountBMYUVWSubAddrNumIn2Elem[3:0]               ;
                        BMY_IObuffer_OEB_02_w           =        1'b1           ; 
                        BMY_IObuffer_choose_reg_B_02_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMY_IObuffer_B02_w              =        4'd0           ;
                        BMY_IObuffer_OEB_02_w           =        1'b0           ;
                        BMY_IObuffer_choose_reg_B_02_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin3ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin4ELEMENT) )
                 begin 
                        BMY_IObuffer_B03_w              =        CountBMYUVWSubAddrNumIn3Elem[3:0]               ;
                        BMY_IObuffer_OEB_03_w           =        1'b1           ; 
                        BMY_IObuffer_choose_reg_B_03_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMY_IObuffer_B03_w              =        4'd0           ;
                        BMY_IObuffer_OEB_03_w           =        1'b0           ;
                        BMY_IObuffer_choose_reg_B_03_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin4ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin5ELEMENT) )
                 begin 
                        BMY_IObuffer_B04_w              =        CountBMYUVWSubAddrNumIn4Elem[3:0]               ;
                        BMY_IObuffer_OEB_04_w           =        1'b1           ; 
                        BMY_IObuffer_choose_reg_B_04_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMY_IObuffer_B04_w              =        4'd0           ;
                        BMY_IObuffer_OEB_04_w           =        1'b0           ;
                        BMY_IObuffer_choose_reg_B_04_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin5ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin6ELEMENT) )
                 begin 
                        BMY_IObuffer_B05_w              =        CountBMYUVWSubAddrNumIn5Elem[3:0]               ;
                        BMY_IObuffer_OEB_05_w           =        1'b1           ; 
                        BMY_IObuffer_choose_reg_B_05_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMY_IObuffer_B05_w              =        4'd0           ;
                        BMY_IObuffer_OEB_05_w           =        1'b0           ;
                        BMY_IObuffer_choose_reg_B_05_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin6ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin7ELEMENT) )
                 begin 
                        BMY_IObuffer_B06_w              =        CountBMYUVWSubAddrNumIn6Elem[3:0]               ;
                        BMY_IObuffer_OEB_06_w           =        1'b1           ; 
                        BMY_IObuffer_choose_reg_B_06_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMY_IObuffer_B06_w              =        4'd0           ;
                        BMY_IObuffer_OEB_06_w           =        1'b0           ;
                        BMY_IObuffer_choose_reg_B_06_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin7ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin8ELEMENT) )
                 begin 
                        BMY_IObuffer_B07_w              =        CountBMYUVWSubAddrNumIn7Elem[3:0]               ;
                        BMY_IObuffer_OEB_07_w           =        1'b1           ; 
                        BMY_IObuffer_choose_reg_B_07_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMY_IObuffer_B07_w              =        4'd0           ;
                        BMY_IObuffer_OEB_07_w           =        1'b0           ;
                        BMY_IObuffer_choose_reg_B_07_w  =        1'b0           ;
                 end 
                                                
                BMY_IObuffer_DIB00_w            =        64'd0          ;
                BMY_IObuffer_DIB01_w            =        64'd0          ;
                BMY_IObuffer_DIB02_w            =        64'd0          ;
                BMY_IObuffer_DIB03_w            =        64'd0          ;
                BMY_IObuffer_DIB04_w            =        64'd0          ;
                BMY_IObuffer_DIB05_w            =        64'd0          ;
                BMY_IObuffer_DIB06_w            =        64'd0          ;
                BMY_IObuffer_DIB07_w            =        64'd0          ;
                
                BMY_IObuffer_WEBN_00_w          =        1'b1           ;
                BMY_IObuffer_WEBN_01_w          =        1'b1           ;
                BMY_IObuffer_WEBN_02_w          =        1'b1           ;
                BMY_IObuffer_WEBN_03_w          =        1'b1           ;
                BMY_IObuffer_WEBN_04_w          =        1'b1           ;
                BMY_IObuffer_WEBN_05_w          =        1'b1           ;
                BMY_IObuffer_WEBN_06_w          =        1'b1           ;
                BMY_IObuffer_WEBN_07_w          =        1'b1           ;
                
                
                         
                //Buffer for Background Model U                         
                BMU_IObuffer_A08_w              =        4'd0           ;
                BMU_IObuffer_A09_w              =        4'd0           ;
                BMU_IObuffer_A10_w              =        4'd0           ;
                BMU_IObuffer_A11_w              =        4'd0           ;
                BMU_IObuffer_A12_w              =        4'd0           ;
                BMU_IObuffer_A13_w              =        4'd0           ;
                BMU_IObuffer_A14_w              =        4'd0           ;
                BMU_IObuffer_A15_w              =        4'd0           ;
                BMU_IObuffer_DIA08_w            =        64'd0          ;
                BMU_IObuffer_DIA09_w            =        64'd0          ;
                BMU_IObuffer_DIA10_w            =        64'd0          ;
                BMU_IObuffer_DIA11_w            =        64'd0          ;
                BMU_IObuffer_DIA12_w            =        64'd0          ;
                BMU_IObuffer_DIA13_w            =        64'd0          ;
                BMU_IObuffer_DIA14_w            =        64'd0          ;
                BMU_IObuffer_DIA15_w            =        64'd0          ;
                BMU_IObuffer_WEAN_08_w          =        1'b1           ;
                BMU_IObuffer_WEAN_09_w          =        1'b1           ;
                BMU_IObuffer_WEAN_10_w          =        1'b1           ;
                BMU_IObuffer_WEAN_11_w          =        1'b1           ;
                BMU_IObuffer_WEAN_12_w          =        1'b1           ;
                BMU_IObuffer_WEAN_13_w          =        1'b1           ;
                BMU_IObuffer_WEAN_14_w          =        1'b1           ;
                BMU_IObuffer_WEAN_15_w          =        1'b1           ;
                BMU_IObuffer_OEA_08_w           =        1'b0           ;
                BMU_IObuffer_OEA_09_w           =        1'b0           ;
                BMU_IObuffer_OEA_10_w           =        1'b0           ;
                BMU_IObuffer_OEA_11_w           =        1'b0           ;
                BMU_IObuffer_OEA_12_w           =        1'b0           ;
                BMU_IObuffer_OEA_13_w           =        1'b0           ;
                BMU_IObuffer_OEA_14_w           =        1'b0           ;
                BMU_IObuffer_OEA_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_A_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_15_w  =        1'b0           ;
                                                
                                                
                BMU_IObuffer_B08_w              =        4'd0           ;
                BMU_IObuffer_B09_w              =        4'd0           ;
                BMU_IObuffer_B10_w              =        4'd0           ;
                BMU_IObuffer_B11_w              =        4'd0           ;
                BMU_IObuffer_B12_w              =        4'd0           ;
                BMU_IObuffer_B13_w              =        4'd0           ;
                BMU_IObuffer_B14_w              =        4'd0           ;
                BMU_IObuffer_B15_w              =        4'd0           ;
                BMU_IObuffer_DIB08_w            =        64'd0          ;
                BMU_IObuffer_DIB09_w            =        64'd0          ;
                BMU_IObuffer_DIB10_w            =        64'd0          ;
                BMU_IObuffer_DIB11_w            =        64'd0          ;
                BMU_IObuffer_DIB12_w            =        64'd0          ;
                BMU_IObuffer_DIB13_w            =        64'd0          ;
                BMU_IObuffer_DIB14_w            =        64'd0          ;
                BMU_IObuffer_DIB15_w            =        64'd0          ;
                BMU_IObuffer_WEBN_08_w          =        1'b1           ;
                BMU_IObuffer_WEBN_09_w          =        1'b1           ;
                BMU_IObuffer_WEBN_10_w          =        1'b1           ;
                BMU_IObuffer_WEBN_11_w          =        1'b1           ;
                BMU_IObuffer_WEBN_12_w          =        1'b1           ;
                BMU_IObuffer_WEBN_13_w          =        1'b1           ;
                BMU_IObuffer_WEBN_14_w          =        1'b1           ;
                BMU_IObuffer_WEBN_15_w          =        1'b1           ;
                BMU_IObuffer_OEB_08_w           =        1'b0           ;
                BMU_IObuffer_OEB_09_w           =        1'b0           ;
                BMU_IObuffer_OEB_10_w           =        1'b0           ;
                BMU_IObuffer_OEB_11_w           =        1'b0           ;
                BMU_IObuffer_OEB_12_w           =        1'b0           ;
                BMU_IObuffer_OEB_13_w           =        1'b0           ;
                BMU_IObuffer_OEB_14_w           =        1'b0           ;
                BMU_IObuffer_OEB_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_B_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_15_w  =        1'b0           ;
                                             
                
                
                //Buffer for Background Model V
                BMV_IObuffer_A16_w              =        4'd0           ;
                BMV_IObuffer_A17_w              =        4'd0           ;
                BMV_IObuffer_A18_w              =        4'd0           ;
                BMV_IObuffer_A19_w              =        4'd0           ;
                BMV_IObuffer_A20_w              =        4'd0           ;
                BMV_IObuffer_A21_w              =        4'd0           ;
                BMV_IObuffer_A22_w              =        4'd0           ;
                BMV_IObuffer_A23_w              =        4'd0           ;
                BMV_IObuffer_DIA16_w            =        64'd0          ;
                BMV_IObuffer_DIA17_w            =        64'd0          ;
                BMV_IObuffer_DIA18_w            =        64'd0          ;
                BMV_IObuffer_DIA19_w            =        64'd0          ;
                BMV_IObuffer_DIA20_w            =        64'd0          ;
                BMV_IObuffer_DIA21_w            =        64'd0          ;
                BMV_IObuffer_DIA22_w            =        64'd0          ;
                BMV_IObuffer_DIA23_w            =        64'd0          ;
                BMV_IObuffer_WEAN_16_w          =        1'b1           ;
                BMV_IObuffer_WEAN_17_w          =        1'b1           ;
                BMV_IObuffer_WEAN_18_w          =        1'b1           ;
                BMV_IObuffer_WEAN_19_w          =        1'b1           ;
                BMV_IObuffer_WEAN_20_w          =        1'b1           ;
                BMV_IObuffer_WEAN_21_w          =        1'b1           ;
                BMV_IObuffer_WEAN_22_w          =        1'b1           ;
                BMV_IObuffer_WEAN_23_w          =        1'b1           ;
                BMV_IObuffer_OEA_16_w           =        1'b0           ;
                BMV_IObuffer_OEA_17_w           =        1'b0           ;
                BMV_IObuffer_OEA_18_w           =        1'b0           ;
                BMV_IObuffer_OEA_19_w           =        1'b0           ;
                BMV_IObuffer_OEA_20_w           =        1'b0           ;
                BMV_IObuffer_OEA_21_w           =        1'b0           ;
                BMV_IObuffer_OEA_22_w           =        1'b0           ;
                BMV_IObuffer_OEA_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_A_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_23_w  =        1'b0           ;
                              
                BMV_IObuffer_B16_w              =        4'd0           ;
                BMV_IObuffer_B17_w              =        4'd0           ;
                BMV_IObuffer_B18_w              =        4'd0           ;
                BMV_IObuffer_B19_w              =        4'd0           ;
                BMV_IObuffer_B20_w              =        4'd0           ;
                BMV_IObuffer_B21_w              =        4'd0           ;
                BMV_IObuffer_B22_w              =        4'd0           ;
                BMV_IObuffer_B23_w              =        4'd0           ;
                BMV_IObuffer_DIB16_w            =        64'd0          ;
                BMV_IObuffer_DIB17_w            =        64'd0          ;
                BMV_IObuffer_DIB18_w            =        64'd0          ;
                BMV_IObuffer_DIB19_w            =        64'd0          ;
                BMV_IObuffer_DIB20_w            =        64'd0          ;
                BMV_IObuffer_DIB21_w            =        64'd0          ;
                BMV_IObuffer_DIB22_w            =        64'd0          ;
                BMV_IObuffer_DIB23_w            =        64'd0          ;
                BMV_IObuffer_WEBN_16_w          =        1'b1           ;
                BMV_IObuffer_WEBN_17_w          =        1'b1           ;
                BMV_IObuffer_WEBN_18_w          =        1'b1           ;
                BMV_IObuffer_WEBN_19_w          =        1'b1           ;
                BMV_IObuffer_WEBN_20_w          =        1'b1           ;
                BMV_IObuffer_WEBN_21_w          =        1'b1           ;
                BMV_IObuffer_WEBN_22_w          =        1'b1           ;
                BMV_IObuffer_WEBN_23_w          =        1'b1           ;
                BMV_IObuffer_OEB_16_w           =        1'b0           ;
                BMV_IObuffer_OEB_17_w           =        1'b0           ;
                BMV_IObuffer_OEB_18_w           =        1'b0           ;
                BMV_IObuffer_OEB_19_w           =        1'b0           ;
                BMV_IObuffer_OEB_20_w           =        1'b0           ;
                BMV_IObuffer_OEB_21_w           =        1'b0           ;
                BMV_IObuffer_OEB_22_w           =        1'b0           ;
                BMV_IObuffer_OEB_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_B_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_23_w  =        1'b0           ;
                                               
                
                
                
                //Buffer for Background Model W
                BMW_IObuffer_A24_w              =        4'd0           ;
                BMW_IObuffer_A25_w              =        4'd0           ;
                BMW_IObuffer_A26_w              =        4'd0           ;
                BMW_IObuffer_A27_w              =        4'd0           ;
                BMW_IObuffer_A28_w              =        4'd0           ;
                BMW_IObuffer_A29_w              =        4'd0           ;
                BMW_IObuffer_A30_w              =        4'd0           ;
                BMW_IObuffer_A31_w              =        4'd0           ;
                BMW_IObuffer_DIA24_w            =        64'd0          ;                                        
                BMW_IObuffer_DIA25_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA26_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA27_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA28_w            =        64'd0          ;                           
                BMW_IObuffer_DIA29_w            =        64'd0          ;                               
                BMW_IObuffer_DIA30_w            =        64'd0          ;                               
                BMW_IObuffer_DIA31_w            =        64'd0          ;
                BMW_IObuffer_WEAN_24_w          =        1'b1           ;
                BMW_IObuffer_WEAN_25_w          =        1'b1           ;
                BMW_IObuffer_WEAN_26_w          =        1'b1           ;
                BMW_IObuffer_WEAN_27_w          =        1'b1           ;
                BMW_IObuffer_WEAN_28_w          =        1'b1           ;
                BMW_IObuffer_WEAN_29_w          =        1'b1           ;
                BMW_IObuffer_WEAN_30_w          =        1'b1           ;
                BMW_IObuffer_WEAN_31_w          =        1'b1           ;
                BMW_IObuffer_OEA_24_w           =        1'b0           ;
                BMW_IObuffer_OEA_25_w           =        1'b0           ;
                BMW_IObuffer_OEA_26_w           =        1'b0           ;
                BMW_IObuffer_OEA_27_w           =        1'b0           ;
                BMW_IObuffer_OEA_28_w           =        1'b0           ;
                BMW_IObuffer_OEA_29_w           =        1'b0           ;
                BMW_IObuffer_OEA_30_w           =        1'b0           ;
                BMW_IObuffer_OEA_31_w           =        1'b0           ;
                BMW_IObuffer_choose_reg_A_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_31_w  =        1'b0           ;
                
                BMW_IObuffer_B24_w              =        4'd0           ;
                BMW_IObuffer_B25_w              =        4'd0           ;
                BMW_IObuffer_B26_w              =        4'd0           ;
                BMW_IObuffer_B27_w              =        4'd0           ;
                BMW_IObuffer_B28_w              =        4'd0           ;       
                BMW_IObuffer_B29_w              =        4'd0           ;                 
                BMW_IObuffer_B30_w              =        4'd0           ;                 
                BMW_IObuffer_B31_w              =        4'd0           ;
                BMW_IObuffer_DIB24_w            =        64'd0          ;
                BMW_IObuffer_DIB25_w            =        64'd0          ;
                BMW_IObuffer_DIB26_w            =        64'd0          ;                                                                    
                BMW_IObuffer_DIB27_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB28_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB29_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB30_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB31_w            =        64'd0          ;  
                BMW_IObuffer_WEBN_24_w          =        1'b1           ;
                BMW_IObuffer_WEBN_25_w          =        1'b1           ;
                BMW_IObuffer_WEBN_26_w          =        1'b1           ;
                BMW_IObuffer_WEBN_27_w          =        1'b1           ;
                BMW_IObuffer_WEBN_28_w          =        1'b1           ;
                BMW_IObuffer_WEBN_29_w          =        1'b1           ;
                BMW_IObuffer_WEBN_30_w          =        1'b1           ;
                BMW_IObuffer_WEBN_31_w          =        1'b1           ;
                BMW_IObuffer_OEB_24_w           =        1'b0           ;
                BMW_IObuffer_OEB_25_w           =        1'b0           ;
                BMW_IObuffer_OEB_26_w           =        1'b0           ;
                BMW_IObuffer_OEB_27_w           =        1'b0           ;
                BMW_IObuffer_OEB_28_w           =        1'b0           ;
                BMW_IObuffer_OEB_29_w           =        1'b0           ;
                BMW_IObuffer_OEB_30_w           =        1'b0           ;
                BMW_IObuffer_OEB_31_w           =        1'b0           ;  
                BMW_IObuffer_choose_reg_B_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_31_w  =        1'b0           ;
                                                 
                
                
                
                //Buffer for Curent frame Y                        
                CurY_Ibuffer_A32_w              =        4'd0           ;                       
                CurY_Ibuffer_A33_w              =        4'd0           ; 
                CurY_Ibuffer_DIA32_w            =        64'd0          ;                                                             
                CurY_Ibuffer_DIA33_w            =        64'd0          ;  
                CurY_Ibuffer_WEAN_32_w          =        1'b1           ;          
                CurY_Ibuffer_WEAN_33_w          =        1'b1           ;          
                CurY_Ibuffer_OEA_32_w           =        1'b0           ;           
                CurY_Ibuffer_OEA_33_w           =        1'b0           ;           
                CurY_Ibuffer_choose_reg_A_32_w  =        1'b0           ;  
                CurY_Ibuffer_choose_reg_A_33_w  =        1'b0           ;  
                
                CurY_Ibuffer_B32_w              =        4'd0           ;                                                  
                CurY_Ibuffer_B33_w              =        4'd0           ;                                                                                                             
                CurY_Ibuffer_DIB32_w            =        64'd0          ;                                                                                                            
                CurY_Ibuffer_DIB33_w            =        64'd0          ;                                    
                CurY_Ibuffer_WEBN_32_w          =        1'b1           ;            
                CurY_Ibuffer_WEBN_33_w          =        1'b1           ;                                  
                CurY_Ibuffer_OEB_32_w           =        1'b0           ;             
                CurY_Ibuffer_OEB_33_w           =        1'b0           ;                                     
                CurY_Ibuffer_choose_reg_B_32_w  =        1'b0           ;    
                CurY_Ibuffer_choose_reg_B_33_w  =        1'b0           ;    

                
                
                //Buffer for Curent frame U                      
                CurU_Ibuffer_A34_w              =        4'd0           ;                         
                CurU_Ibuffer_A35_w              =        4'd0           ;  
                CurU_Ibuffer_DIA34_w            =        64'd0          ;                                                               
                CurU_Ibuffer_DIA35_w            =        64'd0          ;  
                CurU_Ibuffer_WEAN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEAN_35_w          =        1'b1           ;            
                CurU_Ibuffer_OEA_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEA_35_w           =        1'b0           ;             
                CurU_Ibuffer_choose_reg_A_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_A_35_w  =        1'b0           ;    
                
                CurU_Ibuffer_B34_w              =        4'd0           ;                                                  
                CurU_Ibuffer_B35_w              =        4'd0           ;                                                                                                                                 
                CurU_Ibuffer_DIB34_w            =        64'd0          ;                                                                                                            
                CurU_Ibuffer_DIB35_w            =        64'd0          ;                                     
                CurU_Ibuffer_WEBN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEBN_35_w          =        1'b1           ;                                
                CurU_Ibuffer_OEB_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEB_35_w           =        1'b0           ;                                    
                CurU_Ibuffer_choose_reg_B_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_B_35_w  =        1'b0           ;    
 
 
                
                //Buffer for Curent frame V                       
                CurV_Ibuffer_A36_w              =        4'd0           ;                        
                CurV_Ibuffer_A37_w              =        4'd0           ;                        
                CurV_Ibuffer_DIA36_w            =        64'd0          ;                                                               
                CurV_Ibuffer_DIA37_w            =        64'd0          ;    
                CurV_Ibuffer_WEAN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEAN_37_w          =        1'b1           ;            
                CurV_Ibuffer_OEA_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEA_37_w           =        1'b0           ;             
                CurV_Ibuffer_choose_reg_A_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_A_37_w  =        1'b0           ;    
                 
                CurV_Ibuffer_B36_w              =        4'd0           ;                                                                
                CurV_Ibuffer_B37_w              =        4'd0           ;  
                CurV_Ibuffer_DIB36_w            =        64'd0          ;                                                                                                             
                CurV_Ibuffer_DIB37_w            =        64'd0          ;    
                CurV_Ibuffer_WEBN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEBN_37_w          =        1'b1           ;                                    
                CurV_Ibuffer_OEB_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEB_37_w           =        1'b0           ;                                  
                CurV_Ibuffer_choose_reg_B_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_B_37_w  =        1'b0           ;    
 
                
                
                //Buffer for Mask
                Mask_Obuffer_A38_w              =        4'd0           ;                       
                Mask_Obuffer_DIA38_w            =        64'd0          ;  
                Mask_Obuffer_WEAN_38_w          =        1'b1           ;                  
                Mask_Obuffer_OEA_38_w           =        1'b0           ;                   
                Mask_Obuffer_choose_reg_A_38_w  =        1'b0           ;
                                                 
                Mask_Obuffer_B38_w              =        4'd0           ;                                                               
                Mask_Obuffer_DIB38_w            =        64'd0          ;                            
                Mask_Obuffer_WEBN_38_w          =        1'b1           ;                                            
                Mask_Obuffer_OEB_38_w           =        1'b0           ;                                  
                Mask_Obuffer_choose_reg_B_38_w  =        1'b0           ;           
                                                         
                             
            end                                                                         
            
            `SEGSTATE_OUTPUT_BM_U:
            begin                
                
                                                
                //Buffer for Background Model Y
                BMY_IObuffer_A00_w              =        4'd0           ;
                BMY_IObuffer_A01_w              =        4'd0           ; 
                BMY_IObuffer_A02_w              =        4'd0           ; 
                BMY_IObuffer_A03_w              =        4'd0           ; 
                BMY_IObuffer_A04_w              =        4'd0           ; 
                BMY_IObuffer_A05_w              =        4'd0           ; 
                BMY_IObuffer_A06_w              =        4'd0           ;           
                BMY_IObuffer_A07_w              =        4'd0           ; 
                BMY_IObuffer_DIA00_w            =        64'd0          ; 
                BMY_IObuffer_DIA01_w            =        64'd0          ; 
                BMY_IObuffer_DIA02_w            =        64'd0          ; 
                BMY_IObuffer_DIA03_w            =        64'd0          ; 
                BMY_IObuffer_DIA04_w            =        64'd0          ; 
                BMY_IObuffer_DIA05_w            =        64'd0          ; 
                BMY_IObuffer_DIA06_w            =        64'd0          ; 
                BMY_IObuffer_DIA07_w            =        64'd0          ; 
                BMY_IObuffer_WEAN_00_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_01_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_02_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_03_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_04_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_05_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_06_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_07_w          =        1'b1           ;     
                BMY_IObuffer_OEA_00_w           =        1'b0           ;              
                BMY_IObuffer_OEA_01_w           =        1'b0           ;              
                BMY_IObuffer_OEA_02_w           =        1'b0           ;              
                BMY_IObuffer_OEA_03_w           =        1'b0           ;              
                BMY_IObuffer_OEA_04_w           =        1'b0           ;              
                BMY_IObuffer_OEA_05_w           =        1'b0           ;              
                BMY_IObuffer_OEA_06_w           =        1'b0           ;              
                BMY_IObuffer_OEA_07_w           =        1'b0           ;  
                BMY_IObuffer_choose_reg_A_00_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_01_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_02_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_03_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_04_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_05_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_06_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_07_w  =        1'b0           ;  
                
                BMY_IObuffer_B00_w              =        4'd0           ;
                BMY_IObuffer_B01_w              =        4'd0           ;
                BMY_IObuffer_B02_w              =        4'd0           ;
                BMY_IObuffer_B03_w              =        4'd0           ;
                BMY_IObuffer_B04_w              =        4'd0           ;
                BMY_IObuffer_B05_w              =        4'd0           ;
                BMY_IObuffer_B06_w              =        4'd0           ;
                BMY_IObuffer_B07_w              =        4'd0           ;
                BMY_IObuffer_DIB00_w            =        64'd0          ;
                BMY_IObuffer_DIB01_w            =        64'd0          ;
                BMY_IObuffer_DIB02_w            =        64'd0          ;
                BMY_IObuffer_DIB03_w            =        64'd0          ;
                BMY_IObuffer_DIB04_w            =        64'd0          ;
                BMY_IObuffer_DIB05_w            =        64'd0          ;
                BMY_IObuffer_DIB06_w            =        64'd0          ;
                BMY_IObuffer_DIB07_w            =        64'd0          ;
                BMY_IObuffer_WEBN_00_w          =        1'b1           ;
                BMY_IObuffer_WEBN_01_w          =        1'b1           ;
                BMY_IObuffer_WEBN_02_w          =        1'b1           ;
                BMY_IObuffer_WEBN_03_w          =        1'b1           ;
                BMY_IObuffer_WEBN_04_w          =        1'b1           ;
                BMY_IObuffer_WEBN_05_w          =        1'b1           ;
                BMY_IObuffer_WEBN_06_w          =        1'b1           ;
                BMY_IObuffer_WEBN_07_w          =        1'b1           ;
                BMY_IObuffer_OEB_00_w           =        1'b0           ;
                BMY_IObuffer_OEB_01_w           =        1'b0           ;
                BMY_IObuffer_OEB_02_w           =        1'b0           ;
                BMY_IObuffer_OEB_03_w           =        1'b0           ;
                BMY_IObuffer_OEB_04_w           =        1'b0           ;
                BMY_IObuffer_OEB_05_w           =        1'b0           ;
                BMY_IObuffer_OEB_06_w           =        1'b0           ;
                BMY_IObuffer_OEB_07_w           =        1'b0           ;
                BMY_IObuffer_choose_reg_B_00_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_01_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_02_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_03_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_04_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_05_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_06_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_07_w  =        1'b0           ;
                                                
                
                
                         
                //Buffer for Background Model U                         
                BMU_IObuffer_A08_w              =        4'd0           ;
                BMU_IObuffer_A09_w              =        4'd0           ;
                BMU_IObuffer_A10_w              =        4'd0           ;
                BMU_IObuffer_A11_w              =        4'd0           ;
                BMU_IObuffer_A12_w              =        4'd0           ;
                BMU_IObuffer_A13_w              =        4'd0           ;
                BMU_IObuffer_A14_w              =        4'd0           ;
                BMU_IObuffer_A15_w              =        4'd0           ;
                BMU_IObuffer_DIA08_w            =        64'd0          ;
                BMU_IObuffer_DIA09_w            =        64'd0          ;
                BMU_IObuffer_DIA10_w            =        64'd0          ;
                BMU_IObuffer_DIA11_w            =        64'd0          ;
                BMU_IObuffer_DIA12_w            =        64'd0          ;
                BMU_IObuffer_DIA13_w            =        64'd0          ;
                BMU_IObuffer_DIA14_w            =        64'd0          ;
                BMU_IObuffer_DIA15_w            =        64'd0          ;
                BMU_IObuffer_WEAN_08_w          =        1'b1           ;
                BMU_IObuffer_WEAN_09_w          =        1'b1           ;
                BMU_IObuffer_WEAN_10_w          =        1'b1           ;
                BMU_IObuffer_WEAN_11_w          =        1'b1           ;
                BMU_IObuffer_WEAN_12_w          =        1'b1           ;
                BMU_IObuffer_WEAN_13_w          =        1'b1           ;
                BMU_IObuffer_WEAN_14_w          =        1'b1           ;
                BMU_IObuffer_WEAN_15_w          =        1'b1           ;
                BMU_IObuffer_OEA_08_w           =        1'b0           ;
                BMU_IObuffer_OEA_09_w           =        1'b0           ;
                BMU_IObuffer_OEA_10_w           =        1'b0           ;
                BMU_IObuffer_OEA_11_w           =        1'b0           ;
                BMU_IObuffer_OEA_12_w           =        1'b0           ;
                BMU_IObuffer_OEA_13_w           =        1'b0           ;
                BMU_IObuffer_OEA_14_w           =        1'b0           ;
                BMU_IObuffer_OEA_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_A_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_15_w  =        1'b0           ;
                                                
                                                
                
                if( (Count_BMYUVW_ADDR_r >= 7'd0) && (Count_BMYUVW_ADDR_r < `ADDRNUMin1ELEMENT) )
                 begin 
                        BMU_IObuffer_B08_w              =        Count_BMYUVW_ADDR_r[3:0];
                        BMU_IObuffer_OEB_08_w           =        1'b1           ;
                        BMU_IObuffer_choose_reg_B_08_w  =        1'b1           ;       
                 end             
                 else
                 begin
                        BMU_IObuffer_B08_w              =        4'd0           ;
                        BMU_IObuffer_OEB_08_w           =        1'b0           ;
                        BMU_IObuffer_choose_reg_B_08_w  =        1'b0           ;
                           
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin1ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin2ELEMENT) )
                 begin 
                        BMU_IObuffer_B09_w              =        CountBMYUVWSubAddrNumIn1Elem[3:0]               ;
                        BMU_IObuffer_OEB_09_w           =        1'b1           ; 
                        BMU_IObuffer_choose_reg_B_09_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMU_IObuffer_B09_w              =        4'd0           ;
                        BMU_IObuffer_OEB_09_w           =        1'b0           ;
                        BMU_IObuffer_choose_reg_B_09_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin2ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin3ELEMENT) )
                 begin 
                        BMU_IObuffer_B10_w              =        CountBMYUVWSubAddrNumIn2Elem[3:0]               ;
                        BMU_IObuffer_OEB_10_w           =        1'b1           ; 
                        BMU_IObuffer_choose_reg_B_10_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMU_IObuffer_B10_w              =        4'd0           ;
                        BMU_IObuffer_OEB_10_w           =        1'b0           ;
                        BMU_IObuffer_choose_reg_B_10_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin3ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin4ELEMENT) )
                 begin 
                        BMU_IObuffer_B11_w              =        CountBMYUVWSubAddrNumIn3Elem[3:0]               ;
                        BMU_IObuffer_OEB_11_w           =        1'b1           ; 
                        BMU_IObuffer_choose_reg_B_11_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMU_IObuffer_B11_w              =        4'd0           ;
                        BMU_IObuffer_OEB_11_w           =        1'b0           ;
                        BMU_IObuffer_choose_reg_B_11_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin4ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin5ELEMENT) )
                 begin 
                        BMU_IObuffer_B12_w              =        CountBMYUVWSubAddrNumIn4Elem[3:0]               ;
                        BMU_IObuffer_OEB_12_w           =        1'b1           ; 
                        BMU_IObuffer_choose_reg_B_12_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMU_IObuffer_B12_w              =        4'd0           ;
                        BMU_IObuffer_OEB_12_w           =        1'b0           ;
                        BMU_IObuffer_choose_reg_B_12_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin5ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin6ELEMENT) )
                 begin 
                        BMU_IObuffer_B13_w              =        CountBMYUVWSubAddrNumIn5Elem[3:0]               ;
                        BMU_IObuffer_OEB_13_w           =        1'b1           ; 
                        BMU_IObuffer_choose_reg_B_13_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMU_IObuffer_B13_w              =        4'd0           ;
                        BMU_IObuffer_OEB_13_w           =        1'b0           ;
                        BMU_IObuffer_choose_reg_B_13_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin6ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin7ELEMENT) )
                 begin 
                        BMU_IObuffer_B14_w              =        CountBMYUVWSubAddrNumIn6Elem[3:0]               ;
                        BMU_IObuffer_OEB_14_w           =        1'b1           ; 
                        BMU_IObuffer_choose_reg_B_14_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMU_IObuffer_B14_w              =        4'd0           ;
                        BMU_IObuffer_OEB_14_w           =        1'b0           ;
                        BMU_IObuffer_choose_reg_B_14_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin7ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin8ELEMENT) )
                 begin 
                        BMU_IObuffer_B15_w              =        CountBMYUVWSubAddrNumIn7Elem[3:0]               ;
                        BMU_IObuffer_OEB_15_w           =        1'b1           ; 
                        BMU_IObuffer_choose_reg_B_15_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMU_IObuffer_B15_w              =        4'd0           ;
                        BMU_IObuffer_OEB_15_w           =        1'b0           ;
                        BMU_IObuffer_choose_reg_B_15_w  =        1'b0           ;
                 end 
                                                
                BMU_IObuffer_DIB08_w            =        64'd0          ;
                BMU_IObuffer_DIB09_w            =        64'd0          ;
                BMU_IObuffer_DIB10_w            =        64'd0          ;
                BMU_IObuffer_DIB11_w            =        64'd0          ;
                BMU_IObuffer_DIB12_w            =        64'd0          ;
                BMU_IObuffer_DIB13_w            =        64'd0          ;
                BMU_IObuffer_DIB14_w            =        64'd0          ;
                BMU_IObuffer_DIB15_w            =        64'd0          ;
                
                BMU_IObuffer_WEBN_08_w          =        1'b1           ;
                BMU_IObuffer_WEBN_09_w          =        1'b1           ;
                BMU_IObuffer_WEBN_10_w          =        1'b1           ;
                BMU_IObuffer_WEBN_11_w          =        1'b1           ;
                BMU_IObuffer_WEBN_12_w          =        1'b1           ;
                BMU_IObuffer_WEBN_13_w          =        1'b1           ;
                BMU_IObuffer_WEBN_14_w          =        1'b1           ;
                BMU_IObuffer_WEBN_15_w          =        1'b1           ;
                
                
                         
                         
                         
                
                //Buffer for Background Model V
                BMV_IObuffer_A16_w              =        4'd0           ;
                BMV_IObuffer_A17_w              =        4'd0           ;
                BMV_IObuffer_A18_w              =        4'd0           ;
                BMV_IObuffer_A19_w              =        4'd0           ;
                BMV_IObuffer_A20_w              =        4'd0           ;
                BMV_IObuffer_A21_w              =        4'd0           ;
                BMV_IObuffer_A22_w              =        4'd0           ;
                BMV_IObuffer_A23_w              =        4'd0           ;
                BMV_IObuffer_DIA16_w            =        64'd0          ;
                BMV_IObuffer_DIA17_w            =        64'd0          ;
                BMV_IObuffer_DIA18_w            =        64'd0          ;
                BMV_IObuffer_DIA19_w            =        64'd0          ;
                BMV_IObuffer_DIA20_w            =        64'd0          ;
                BMV_IObuffer_DIA21_w            =        64'd0          ;
                BMV_IObuffer_DIA22_w            =        64'd0          ;
                BMV_IObuffer_DIA23_w            =        64'd0          ;
                BMV_IObuffer_WEAN_16_w          =        1'b1           ;
                BMV_IObuffer_WEAN_17_w          =        1'b1           ;
                BMV_IObuffer_WEAN_18_w          =        1'b1           ;
                BMV_IObuffer_WEAN_19_w          =        1'b1           ;
                BMV_IObuffer_WEAN_20_w          =        1'b1           ;
                BMV_IObuffer_WEAN_21_w          =        1'b1           ;
                BMV_IObuffer_WEAN_22_w          =        1'b1           ;
                BMV_IObuffer_WEAN_23_w          =        1'b1           ;
                BMV_IObuffer_OEA_16_w           =        1'b0           ;
                BMV_IObuffer_OEA_17_w           =        1'b0           ;
                BMV_IObuffer_OEA_18_w           =        1'b0           ;
                BMV_IObuffer_OEA_19_w           =        1'b0           ;
                BMV_IObuffer_OEA_20_w           =        1'b0           ;
                BMV_IObuffer_OEA_21_w           =        1'b0           ;
                BMV_IObuffer_OEA_22_w           =        1'b0           ;
                BMV_IObuffer_OEA_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_A_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_23_w  =        1'b0           ;
                              
                BMV_IObuffer_B16_w              =        4'd0           ;
                BMV_IObuffer_B17_w              =        4'd0           ;
                BMV_IObuffer_B18_w              =        4'd0           ;
                BMV_IObuffer_B19_w              =        4'd0           ;
                BMV_IObuffer_B20_w              =        4'd0           ;
                BMV_IObuffer_B21_w              =        4'd0           ;
                BMV_IObuffer_B22_w              =        4'd0           ;
                BMV_IObuffer_B23_w              =        4'd0           ;
                BMV_IObuffer_DIB16_w            =        64'd0          ;
                BMV_IObuffer_DIB17_w            =        64'd0          ;
                BMV_IObuffer_DIB18_w            =        64'd0          ;
                BMV_IObuffer_DIB19_w            =        64'd0          ;
                BMV_IObuffer_DIB20_w            =        64'd0          ;
                BMV_IObuffer_DIB21_w            =        64'd0          ;
                BMV_IObuffer_DIB22_w            =        64'd0          ;
                BMV_IObuffer_DIB23_w            =        64'd0          ;
                BMV_IObuffer_WEBN_16_w          =        1'b1           ;
                BMV_IObuffer_WEBN_17_w          =        1'b1           ;
                BMV_IObuffer_WEBN_18_w          =        1'b1           ;
                BMV_IObuffer_WEBN_19_w          =        1'b1           ;
                BMV_IObuffer_WEBN_20_w          =        1'b1           ;
                BMV_IObuffer_WEBN_21_w          =        1'b1           ;
                BMV_IObuffer_WEBN_22_w          =        1'b1           ;
                BMV_IObuffer_WEBN_23_w          =        1'b1           ;
                BMV_IObuffer_OEB_16_w           =        1'b0           ;
                BMV_IObuffer_OEB_17_w           =        1'b0           ;
                BMV_IObuffer_OEB_18_w           =        1'b0           ;
                BMV_IObuffer_OEB_19_w           =        1'b0           ;
                BMV_IObuffer_OEB_20_w           =        1'b0           ;
                BMV_IObuffer_OEB_21_w           =        1'b0           ;
                BMV_IObuffer_OEB_22_w           =        1'b0           ;
                BMV_IObuffer_OEB_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_B_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_23_w  =        1'b0           ;
                                               
                
                
                
                //Buffer for Background Model W
                BMW_IObuffer_A24_w              =        4'd0           ;
                BMW_IObuffer_A25_w              =        4'd0           ;
                BMW_IObuffer_A26_w              =        4'd0           ;
                BMW_IObuffer_A27_w              =        4'd0           ;
                BMW_IObuffer_A28_w              =        4'd0           ;
                BMW_IObuffer_A29_w              =        4'd0           ;
                BMW_IObuffer_A30_w              =        4'd0           ;
                BMW_IObuffer_A31_w              =        4'd0           ;
                BMW_IObuffer_DIA24_w            =        64'd0          ;                                        
                BMW_IObuffer_DIA25_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA26_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA27_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA28_w            =        64'd0          ;                           
                BMW_IObuffer_DIA29_w            =        64'd0          ;                               
                BMW_IObuffer_DIA30_w            =        64'd0          ;                               
                BMW_IObuffer_DIA31_w            =        64'd0          ;
                BMW_IObuffer_WEAN_24_w          =        1'b1           ;
                BMW_IObuffer_WEAN_25_w          =        1'b1           ;
                BMW_IObuffer_WEAN_26_w          =        1'b1           ;
                BMW_IObuffer_WEAN_27_w          =        1'b1           ;
                BMW_IObuffer_WEAN_28_w          =        1'b1           ;
                BMW_IObuffer_WEAN_29_w          =        1'b1           ;
                BMW_IObuffer_WEAN_30_w          =        1'b1           ;
                BMW_IObuffer_WEAN_31_w          =        1'b1           ;
                BMW_IObuffer_OEA_24_w           =        1'b0           ;
                BMW_IObuffer_OEA_25_w           =        1'b0           ;
                BMW_IObuffer_OEA_26_w           =        1'b0           ;
                BMW_IObuffer_OEA_27_w           =        1'b0           ;
                BMW_IObuffer_OEA_28_w           =        1'b0           ;
                BMW_IObuffer_OEA_29_w           =        1'b0           ;
                BMW_IObuffer_OEA_30_w           =        1'b0           ;
                BMW_IObuffer_OEA_31_w           =        1'b0           ;
                BMW_IObuffer_choose_reg_A_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_31_w  =        1'b0           ;
                
                BMW_IObuffer_B24_w              =        4'd0           ;
                BMW_IObuffer_B25_w              =        4'd0           ;
                BMW_IObuffer_B26_w              =        4'd0           ;
                BMW_IObuffer_B27_w              =        4'd0           ;
                BMW_IObuffer_B28_w              =        4'd0           ;       
                BMW_IObuffer_B29_w              =        4'd0           ;                 
                BMW_IObuffer_B30_w              =        4'd0           ;                 
                BMW_IObuffer_B31_w              =        4'd0           ;
                BMW_IObuffer_DIB24_w            =        64'd0          ;
                BMW_IObuffer_DIB25_w            =        64'd0          ;
                BMW_IObuffer_DIB26_w            =        64'd0          ;                                                                    
                BMW_IObuffer_DIB27_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB28_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB29_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB30_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB31_w            =        64'd0          ;  
                BMW_IObuffer_WEBN_24_w          =        1'b1           ;
                BMW_IObuffer_WEBN_25_w          =        1'b1           ;
                BMW_IObuffer_WEBN_26_w          =        1'b1           ;
                BMW_IObuffer_WEBN_27_w          =        1'b1           ;
                BMW_IObuffer_WEBN_28_w          =        1'b1           ;
                BMW_IObuffer_WEBN_29_w          =        1'b1           ;
                BMW_IObuffer_WEBN_30_w          =        1'b1           ;
                BMW_IObuffer_WEBN_31_w          =        1'b1           ;
                BMW_IObuffer_OEB_24_w           =        1'b0           ;
                BMW_IObuffer_OEB_25_w           =        1'b0           ;
                BMW_IObuffer_OEB_26_w           =        1'b0           ;
                BMW_IObuffer_OEB_27_w           =        1'b0           ;
                BMW_IObuffer_OEB_28_w           =        1'b0           ;
                BMW_IObuffer_OEB_29_w           =        1'b0           ;
                BMW_IObuffer_OEB_30_w           =        1'b0           ;
                BMW_IObuffer_OEB_31_w           =        1'b0           ;  
                BMW_IObuffer_choose_reg_B_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_31_w  =        1'b0           ;
                                                 
                
                
                
                //Buffer for Curent frame Y                        
                CurY_Ibuffer_A32_w              =        4'd0           ;                       
                CurY_Ibuffer_A33_w              =        4'd0           ; 
                CurY_Ibuffer_DIA32_w            =        64'd0          ;                                                             
                CurY_Ibuffer_DIA33_w            =        64'd0          ;  
                CurY_Ibuffer_WEAN_32_w          =        1'b1           ;          
                CurY_Ibuffer_WEAN_33_w          =        1'b1           ;          
                CurY_Ibuffer_OEA_32_w           =        1'b0           ;           
                CurY_Ibuffer_OEA_33_w           =        1'b0           ;           
                CurY_Ibuffer_choose_reg_A_32_w  =        1'b0           ;  
                CurY_Ibuffer_choose_reg_A_33_w  =        1'b0           ;  
                
                CurY_Ibuffer_B32_w              =        4'd0           ;                                                  
                CurY_Ibuffer_B33_w              =        4'd0           ;                                                                                                             
                CurY_Ibuffer_DIB32_w            =        64'd0          ;                                                                                                            
                CurY_Ibuffer_DIB33_w            =        64'd0          ;                                    
                CurY_Ibuffer_WEBN_32_w          =        1'b1           ;            
                CurY_Ibuffer_WEBN_33_w          =        1'b1           ;                                  
                CurY_Ibuffer_OEB_32_w           =        1'b0           ;             
                CurY_Ibuffer_OEB_33_w           =        1'b0           ;                                     
                CurY_Ibuffer_choose_reg_B_32_w  =        1'b0           ;    
                CurY_Ibuffer_choose_reg_B_33_w  =        1'b0           ;    

                
                
                //Buffer for Curent frame U                      
                CurU_Ibuffer_A34_w              =        4'd0           ;                         
                CurU_Ibuffer_A35_w              =        4'd0           ;  
                CurU_Ibuffer_DIA34_w            =        64'd0          ;                                                               
                CurU_Ibuffer_DIA35_w            =        64'd0          ;  
                CurU_Ibuffer_WEAN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEAN_35_w          =        1'b1           ;            
                CurU_Ibuffer_OEA_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEA_35_w           =        1'b0           ;             
                CurU_Ibuffer_choose_reg_A_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_A_35_w  =        1'b0           ;    
                
                CurU_Ibuffer_B34_w              =        4'd0           ;                                                  
                CurU_Ibuffer_B35_w              =        4'd0           ;                                                                                                                                 
                CurU_Ibuffer_DIB34_w            =        64'd0          ;                                                                                                            
                CurU_Ibuffer_DIB35_w            =        64'd0          ;                                     
                CurU_Ibuffer_WEBN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEBN_35_w          =        1'b1           ;                                
                CurU_Ibuffer_OEB_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEB_35_w           =        1'b0           ;                                    
                CurU_Ibuffer_choose_reg_B_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_B_35_w  =        1'b0           ;    
 
 
                
                //Buffer for Curent frame V                       
                CurV_Ibuffer_A36_w              =        4'd0           ;                        
                CurV_Ibuffer_A37_w              =        4'd0           ;                        
                CurV_Ibuffer_DIA36_w            =        64'd0          ;                                                               
                CurV_Ibuffer_DIA37_w            =        64'd0          ;    
                CurV_Ibuffer_WEAN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEAN_37_w          =        1'b1           ;            
                CurV_Ibuffer_OEA_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEA_37_w           =        1'b0           ;             
                CurV_Ibuffer_choose_reg_A_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_A_37_w  =        1'b0           ;    
                 
                CurV_Ibuffer_B36_w              =        4'd0           ;                                                                
                CurV_Ibuffer_B37_w              =        4'd0           ;  
                CurV_Ibuffer_DIB36_w            =        64'd0          ;                                                                                                             
                CurV_Ibuffer_DIB37_w            =        64'd0          ;    
                CurV_Ibuffer_WEBN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEBN_37_w          =        1'b1           ;                                    
                CurV_Ibuffer_OEB_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEB_37_w           =        1'b0           ;                                  
                CurV_Ibuffer_choose_reg_B_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_B_37_w  =        1'b0           ;    
 
                
                
                //Buffer for Mask
                Mask_Obuffer_A38_w              =        4'd0           ;                       
                Mask_Obuffer_DIA38_w            =        64'd0          ;  
                Mask_Obuffer_WEAN_38_w          =        1'b1           ;                  
                Mask_Obuffer_OEA_38_w           =        1'b0           ;                   
                Mask_Obuffer_choose_reg_A_38_w  =        1'b0           ;
                                                 
                Mask_Obuffer_B38_w              =        4'd0           ;                                                               
                Mask_Obuffer_DIB38_w            =        64'd0          ;                            
                Mask_Obuffer_WEBN_38_w          =        1'b1           ;                                            
                Mask_Obuffer_OEB_38_w           =        1'b0           ;                                  
                Mask_Obuffer_choose_reg_B_38_w  =        1'b0           ;           
                                                         

            end                  
            
            `SEGSTATE_OUTPUT_BM_V:
            begin                
                
                                                
                //Buffer for Background Model Y
                BMY_IObuffer_A00_w              =        4'd0           ;
                BMY_IObuffer_A01_w              =        4'd0           ; 
                BMY_IObuffer_A02_w              =        4'd0           ; 
                BMY_IObuffer_A03_w              =        4'd0           ; 
                BMY_IObuffer_A04_w              =        4'd0           ; 
                BMY_IObuffer_A05_w              =        4'd0           ; 
                BMY_IObuffer_A06_w              =        4'd0           ;           
                BMY_IObuffer_A07_w              =        4'd0           ; 
                BMY_IObuffer_DIA00_w            =        64'd0          ; 
                BMY_IObuffer_DIA01_w            =        64'd0          ; 
                BMY_IObuffer_DIA02_w            =        64'd0          ; 
                BMY_IObuffer_DIA03_w            =        64'd0          ; 
                BMY_IObuffer_DIA04_w            =        64'd0          ; 
                BMY_IObuffer_DIA05_w            =        64'd0          ; 
                BMY_IObuffer_DIA06_w            =        64'd0          ; 
                BMY_IObuffer_DIA07_w            =        64'd0          ; 
                BMY_IObuffer_WEAN_00_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_01_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_02_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_03_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_04_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_05_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_06_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_07_w          =        1'b1           ;     
                BMY_IObuffer_OEA_00_w           =        1'b0           ;              
                BMY_IObuffer_OEA_01_w           =        1'b0           ;              
                BMY_IObuffer_OEA_02_w           =        1'b0           ;              
                BMY_IObuffer_OEA_03_w           =        1'b0           ;              
                BMY_IObuffer_OEA_04_w           =        1'b0           ;              
                BMY_IObuffer_OEA_05_w           =        1'b0           ;              
                BMY_IObuffer_OEA_06_w           =        1'b0           ;              
                BMY_IObuffer_OEA_07_w           =        1'b0           ;  
                BMY_IObuffer_choose_reg_A_00_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_01_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_02_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_03_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_04_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_05_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_06_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_07_w  =        1'b0           ;  
                
                BMY_IObuffer_B00_w              =        4'd0           ;
                BMY_IObuffer_B01_w              =        4'd0           ;
                BMY_IObuffer_B02_w              =        4'd0           ;
                BMY_IObuffer_B03_w              =        4'd0           ;
                BMY_IObuffer_B04_w              =        4'd0           ;
                BMY_IObuffer_B05_w              =        4'd0           ;
                BMY_IObuffer_B06_w              =        4'd0           ;
                BMY_IObuffer_B07_w              =        4'd0           ;
                BMY_IObuffer_DIB00_w            =        64'd0          ;
                BMY_IObuffer_DIB01_w            =        64'd0          ;
                BMY_IObuffer_DIB02_w            =        64'd0          ;
                BMY_IObuffer_DIB03_w            =        64'd0          ;
                BMY_IObuffer_DIB04_w            =        64'd0          ;
                BMY_IObuffer_DIB05_w            =        64'd0          ;
                BMY_IObuffer_DIB06_w            =        64'd0          ;
                BMY_IObuffer_DIB07_w            =        64'd0          ;
                BMY_IObuffer_WEBN_00_w          =        1'b1           ;
                BMY_IObuffer_WEBN_01_w          =        1'b1           ;
                BMY_IObuffer_WEBN_02_w          =        1'b1           ;
                BMY_IObuffer_WEBN_03_w          =        1'b1           ;
                BMY_IObuffer_WEBN_04_w          =        1'b1           ;
                BMY_IObuffer_WEBN_05_w          =        1'b1           ;
                BMY_IObuffer_WEBN_06_w          =        1'b1           ;
                BMY_IObuffer_WEBN_07_w          =        1'b1           ;
                BMY_IObuffer_OEB_00_w           =        1'b0           ;
                BMY_IObuffer_OEB_01_w           =        1'b0           ;
                BMY_IObuffer_OEB_02_w           =        1'b0           ;
                BMY_IObuffer_OEB_03_w           =        1'b0           ;
                BMY_IObuffer_OEB_04_w           =        1'b0           ;
                BMY_IObuffer_OEB_05_w           =        1'b0           ;
                BMY_IObuffer_OEB_06_w           =        1'b0           ;
                BMY_IObuffer_OEB_07_w           =        1'b0           ;
                BMY_IObuffer_choose_reg_B_00_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_01_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_02_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_03_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_04_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_05_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_06_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_07_w  =        1'b0           ;
                                                
                
                
                         
                //Buffer for Background Model U                         
                BMU_IObuffer_A08_w              =        4'd0           ;
                BMU_IObuffer_A09_w              =        4'd0           ;
                BMU_IObuffer_A10_w              =        4'd0           ;
                BMU_IObuffer_A11_w              =        4'd0           ;
                BMU_IObuffer_A12_w              =        4'd0           ;
                BMU_IObuffer_A13_w              =        4'd0           ;
                BMU_IObuffer_A14_w              =        4'd0           ;
                BMU_IObuffer_A15_w              =        4'd0           ;
                BMU_IObuffer_DIA08_w            =        64'd0          ;
                BMU_IObuffer_DIA09_w            =        64'd0          ;
                BMU_IObuffer_DIA10_w            =        64'd0          ;
                BMU_IObuffer_DIA11_w            =        64'd0          ;
                BMU_IObuffer_DIA12_w            =        64'd0          ;
                BMU_IObuffer_DIA13_w            =        64'd0          ;
                BMU_IObuffer_DIA14_w            =        64'd0          ;
                BMU_IObuffer_DIA15_w            =        64'd0          ;
                BMU_IObuffer_WEAN_08_w          =        1'b1           ;
                BMU_IObuffer_WEAN_09_w          =        1'b1           ;
                BMU_IObuffer_WEAN_10_w          =        1'b1           ;
                BMU_IObuffer_WEAN_11_w          =        1'b1           ;
                BMU_IObuffer_WEAN_12_w          =        1'b1           ;
                BMU_IObuffer_WEAN_13_w          =        1'b1           ;
                BMU_IObuffer_WEAN_14_w          =        1'b1           ;
                BMU_IObuffer_WEAN_15_w          =        1'b1           ;
                BMU_IObuffer_OEA_08_w           =        1'b0           ;
                BMU_IObuffer_OEA_09_w           =        1'b0           ;
                BMU_IObuffer_OEA_10_w           =        1'b0           ;
                BMU_IObuffer_OEA_11_w           =        1'b0           ;
                BMU_IObuffer_OEA_12_w           =        1'b0           ;
                BMU_IObuffer_OEA_13_w           =        1'b0           ;
                BMU_IObuffer_OEA_14_w           =        1'b0           ;
                BMU_IObuffer_OEA_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_A_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_15_w  =        1'b0           ;
                                                
                                                
                BMU_IObuffer_B08_w              =        4'd0           ;
                BMU_IObuffer_B09_w              =        4'd0           ;
                BMU_IObuffer_B10_w              =        4'd0           ;
                BMU_IObuffer_B11_w              =        4'd0           ;
                BMU_IObuffer_B12_w              =        4'd0           ;
                BMU_IObuffer_B13_w              =        4'd0           ;
                BMU_IObuffer_B14_w              =        4'd0           ;
                BMU_IObuffer_B15_w              =        4'd0           ;
                BMU_IObuffer_DIB08_w            =        64'd0          ;
                BMU_IObuffer_DIB09_w            =        64'd0          ;
                BMU_IObuffer_DIB10_w            =        64'd0          ;
                BMU_IObuffer_DIB11_w            =        64'd0          ;
                BMU_IObuffer_DIB12_w            =        64'd0          ;
                BMU_IObuffer_DIB13_w            =        64'd0          ;
                BMU_IObuffer_DIB14_w            =        64'd0          ;
                BMU_IObuffer_DIB15_w            =        64'd0          ;
                BMU_IObuffer_WEBN_08_w          =        1'b1           ;
                BMU_IObuffer_WEBN_09_w          =        1'b1           ;
                BMU_IObuffer_WEBN_10_w          =        1'b1           ;
                BMU_IObuffer_WEBN_11_w          =        1'b1           ;
                BMU_IObuffer_WEBN_12_w          =        1'b1           ;
                BMU_IObuffer_WEBN_13_w          =        1'b1           ;
                BMU_IObuffer_WEBN_14_w          =        1'b1           ;
                BMU_IObuffer_WEBN_15_w          =        1'b1           ;
                BMU_IObuffer_OEB_08_w           =        1'b0           ;
                BMU_IObuffer_OEB_09_w           =        1'b0           ;
                BMU_IObuffer_OEB_10_w           =        1'b0           ;
                BMU_IObuffer_OEB_11_w           =        1'b0           ;
                BMU_IObuffer_OEB_12_w           =        1'b0           ;
                BMU_IObuffer_OEB_13_w           =        1'b0           ;
                BMU_IObuffer_OEB_14_w           =        1'b0           ;
                BMU_IObuffer_OEB_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_B_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_15_w  =        1'b0           ;
                                             
                
                
                //Buffer for Background Model V
                BMV_IObuffer_A16_w              =        4'd0           ;
                BMV_IObuffer_A17_w              =        4'd0           ;
                BMV_IObuffer_A18_w              =        4'd0           ;
                BMV_IObuffer_A19_w              =        4'd0           ;
                BMV_IObuffer_A20_w              =        4'd0           ;
                BMV_IObuffer_A21_w              =        4'd0           ;
                BMV_IObuffer_A22_w              =        4'd0           ;
                BMV_IObuffer_A23_w              =        4'd0           ;
                BMV_IObuffer_DIA16_w            =        64'd0          ;
                BMV_IObuffer_DIA17_w            =        64'd0          ;
                BMV_IObuffer_DIA18_w            =        64'd0          ;
                BMV_IObuffer_DIA19_w            =        64'd0          ;
                BMV_IObuffer_DIA20_w            =        64'd0          ;
                BMV_IObuffer_DIA21_w            =        64'd0          ;
                BMV_IObuffer_DIA22_w            =        64'd0          ;
                BMV_IObuffer_DIA23_w            =        64'd0          ;
                BMV_IObuffer_WEAN_16_w          =        1'b1           ;
                BMV_IObuffer_WEAN_17_w          =        1'b1           ;
                BMV_IObuffer_WEAN_18_w          =        1'b1           ;
                BMV_IObuffer_WEAN_19_w          =        1'b1           ;
                BMV_IObuffer_WEAN_20_w          =        1'b1           ;
                BMV_IObuffer_WEAN_21_w          =        1'b1           ;
                BMV_IObuffer_WEAN_22_w          =        1'b1           ;
                BMV_IObuffer_WEAN_23_w          =        1'b1           ;
                BMV_IObuffer_OEA_16_w           =        1'b0           ;
                BMV_IObuffer_OEA_17_w           =        1'b0           ;
                BMV_IObuffer_OEA_18_w           =        1'b0           ;
                BMV_IObuffer_OEA_19_w           =        1'b0           ;
                BMV_IObuffer_OEA_20_w           =        1'b0           ;
                BMV_IObuffer_OEA_21_w           =        1'b0           ;
                BMV_IObuffer_OEA_22_w           =        1'b0           ;
                BMV_IObuffer_OEA_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_A_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_23_w  =        1'b0           ;
                              
                
                if( (Count_BMYUVW_ADDR_r >= 7'd0) && (Count_BMYUVW_ADDR_r < `ADDRNUMin1ELEMENT) )
                 begin 
                        BMV_IObuffer_B16_w              =        Count_BMYUVW_ADDR_r[3:0];
                        BMV_IObuffer_OEB_16_w           =        1'b1           ;
                        BMV_IObuffer_choose_reg_B_16_w  =        1'b1           ;       
                 end             
                 else
                 begin
                        BMV_IObuffer_B16_w              =        4'd0           ;
                        BMV_IObuffer_OEB_16_w           =        1'b0           ;
                        BMV_IObuffer_choose_reg_B_16_w  =        1'b0           ;
                           
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin1ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin2ELEMENT) )
                 begin 
                        BMV_IObuffer_B17_w              =        CountBMYUVWSubAddrNumIn1Elem[3:0]               ;
                        BMV_IObuffer_OEB_17_w           =        1'b1           ; 
                        BMV_IObuffer_choose_reg_B_17_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMV_IObuffer_B17_w              =        4'd0           ;
                        BMV_IObuffer_OEB_17_w           =        1'b0           ;
                        BMV_IObuffer_choose_reg_B_17_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin2ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin3ELEMENT) )
                 begin 
                        BMV_IObuffer_B18_w              =        CountBMYUVWSubAddrNumIn2Elem[3:0]               ;
                        BMV_IObuffer_OEB_18_w           =        1'b1           ; 
                        BMV_IObuffer_choose_reg_B_18_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMV_IObuffer_B18_w              =        4'd0           ;
                        BMV_IObuffer_OEB_18_w           =        1'b0           ;
                        BMV_IObuffer_choose_reg_B_18_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin3ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin4ELEMENT) )
                 begin 
                        BMV_IObuffer_B19_w              =        CountBMYUVWSubAddrNumIn3Elem[3:0]               ;
                        BMV_IObuffer_OEB_19_w           =        1'b1           ; 
                        BMV_IObuffer_choose_reg_B_19_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMV_IObuffer_B19_w              =        4'd0           ;
                        BMV_IObuffer_OEB_19_w           =        1'b0           ;
                        BMV_IObuffer_choose_reg_B_19_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin4ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin5ELEMENT) )
                 begin 
                        BMV_IObuffer_B20_w              =        CountBMYUVWSubAddrNumIn4Elem[3:0]               ;
                        BMV_IObuffer_OEB_20_w           =        1'b1           ; 
                        BMV_IObuffer_choose_reg_B_20_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMV_IObuffer_B20_w              =        4'd0           ;
                        BMV_IObuffer_OEB_20_w           =        1'b0           ;
                        BMV_IObuffer_choose_reg_B_20_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin5ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin6ELEMENT) )
                 begin 
                        BMV_IObuffer_B21_w              =        CountBMYUVWSubAddrNumIn5Elem[3:0]               ;
                        BMV_IObuffer_OEB_21_w           =        1'b1           ; 
                        BMV_IObuffer_choose_reg_B_21_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMV_IObuffer_B21_w              =        4'd0           ;
                        BMV_IObuffer_OEB_21_w           =        1'b0           ;
                        BMV_IObuffer_choose_reg_B_21_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin6ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin7ELEMENT) )
                 begin 
                        BMV_IObuffer_B22_w              =        CountBMYUVWSubAddrNumIn6Elem[3:0]               ;
                        BMV_IObuffer_OEB_22_w           =        1'b1           ; 
                        BMV_IObuffer_choose_reg_B_22_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMV_IObuffer_B22_w              =        4'd0           ;
                        BMV_IObuffer_OEB_22_w           =        1'b0           ;
                        BMV_IObuffer_choose_reg_B_22_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin7ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin8ELEMENT) )
                 begin 
                        BMV_IObuffer_B23_w              =        CountBMYUVWSubAddrNumIn7Elem[3:0]               ;
                        BMV_IObuffer_OEB_23_w           =        1'b1           ; 
                        BMV_IObuffer_choose_reg_B_23_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMV_IObuffer_B23_w              =        4'd0           ;
                        BMV_IObuffer_OEB_23_w           =        1'b0           ;
                        BMV_IObuffer_choose_reg_B_23_w  =        1'b0           ;
                 end 
                                                
                BMV_IObuffer_DIB16_w            =        64'd0          ;
                BMV_IObuffer_DIB17_w            =        64'd0          ;
                BMV_IObuffer_DIB18_w            =        64'd0          ;
                BMV_IObuffer_DIB19_w            =        64'd0          ;
                BMV_IObuffer_DIB20_w            =        64'd0          ;
                BMV_IObuffer_DIB21_w            =        64'd0          ;
                BMV_IObuffer_DIB22_w            =        64'd0          ;
                BMV_IObuffer_DIB23_w            =        64'd0          ;
                
                BMV_IObuffer_WEBN_16_w          =        1'b1           ;
                BMV_IObuffer_WEBN_17_w          =        1'b1           ;
                BMV_IObuffer_WEBN_18_w          =        1'b1           ;
                BMV_IObuffer_WEBN_19_w          =        1'b1           ;
                BMV_IObuffer_WEBN_20_w          =        1'b1           ;
                BMV_IObuffer_WEBN_21_w          =        1'b1           ;
                BMV_IObuffer_WEBN_22_w          =        1'b1           ;
                BMV_IObuffer_WEBN_23_w          =        1'b1           ;
                
                
                                
                
                //Buffer for Background Model W
                BMW_IObuffer_A24_w              =        4'd0           ;
                BMW_IObuffer_A25_w              =        4'd0           ;
                BMW_IObuffer_A26_w              =        4'd0           ;
                BMW_IObuffer_A27_w              =        4'd0           ;
                BMW_IObuffer_A28_w              =        4'd0           ;
                BMW_IObuffer_A29_w              =        4'd0           ;
                BMW_IObuffer_A30_w              =        4'd0           ;
                BMW_IObuffer_A31_w              =        4'd0           ;
                BMW_IObuffer_DIA24_w            =        64'd0          ;                                        
                BMW_IObuffer_DIA25_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA26_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA27_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA28_w            =        64'd0          ;                           
                BMW_IObuffer_DIA29_w            =        64'd0          ;                               
                BMW_IObuffer_DIA30_w            =        64'd0          ;                               
                BMW_IObuffer_DIA31_w            =        64'd0          ;
                BMW_IObuffer_WEAN_24_w          =        1'b1           ;
                BMW_IObuffer_WEAN_25_w          =        1'b1           ;
                BMW_IObuffer_WEAN_26_w          =        1'b1           ;
                BMW_IObuffer_WEAN_27_w          =        1'b1           ;
                BMW_IObuffer_WEAN_28_w          =        1'b1           ;
                BMW_IObuffer_WEAN_29_w          =        1'b1           ;
                BMW_IObuffer_WEAN_30_w          =        1'b1           ;
                BMW_IObuffer_WEAN_31_w          =        1'b1           ;
                BMW_IObuffer_OEA_24_w           =        1'b0           ;
                BMW_IObuffer_OEA_25_w           =        1'b0           ;
                BMW_IObuffer_OEA_26_w           =        1'b0           ;
                BMW_IObuffer_OEA_27_w           =        1'b0           ;
                BMW_IObuffer_OEA_28_w           =        1'b0           ;
                BMW_IObuffer_OEA_29_w           =        1'b0           ;
                BMW_IObuffer_OEA_30_w           =        1'b0           ;
                BMW_IObuffer_OEA_31_w           =        1'b0           ;
                BMW_IObuffer_choose_reg_A_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_31_w  =        1'b0           ;
                
                BMW_IObuffer_B24_w              =        4'd0           ;
                BMW_IObuffer_B25_w              =        4'd0           ;
                BMW_IObuffer_B26_w              =        4'd0           ;
                BMW_IObuffer_B27_w              =        4'd0           ;
                BMW_IObuffer_B28_w              =        4'd0           ;       
                BMW_IObuffer_B29_w              =        4'd0           ;                 
                BMW_IObuffer_B30_w              =        4'd0           ;                 
                BMW_IObuffer_B31_w              =        4'd0           ;
                BMW_IObuffer_DIB24_w            =        64'd0          ;
                BMW_IObuffer_DIB25_w            =        64'd0          ;
                BMW_IObuffer_DIB26_w            =        64'd0          ;                                                                    
                BMW_IObuffer_DIB27_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB28_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB29_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB30_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB31_w            =        64'd0          ;  
                BMW_IObuffer_WEBN_24_w          =        1'b1           ;
                BMW_IObuffer_WEBN_25_w          =        1'b1           ;
                BMW_IObuffer_WEBN_26_w          =        1'b1           ;
                BMW_IObuffer_WEBN_27_w          =        1'b1           ;
                BMW_IObuffer_WEBN_28_w          =        1'b1           ;
                BMW_IObuffer_WEBN_29_w          =        1'b1           ;
                BMW_IObuffer_WEBN_30_w          =        1'b1           ;
                BMW_IObuffer_WEBN_31_w          =        1'b1           ;
                BMW_IObuffer_OEB_24_w           =        1'b0           ;
                BMW_IObuffer_OEB_25_w           =        1'b0           ;
                BMW_IObuffer_OEB_26_w           =        1'b0           ;
                BMW_IObuffer_OEB_27_w           =        1'b0           ;
                BMW_IObuffer_OEB_28_w           =        1'b0           ;
                BMW_IObuffer_OEB_29_w           =        1'b0           ;
                BMW_IObuffer_OEB_30_w           =        1'b0           ;
                BMW_IObuffer_OEB_31_w           =        1'b0           ;  
                BMW_IObuffer_choose_reg_B_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_31_w  =        1'b0           ;
                                                 
                
                
                
                //Buffer for Curent frame Y                        
                CurY_Ibuffer_A32_w              =        4'd0           ;                       
                CurY_Ibuffer_A33_w              =        4'd0           ; 
                CurY_Ibuffer_DIA32_w            =        64'd0          ;                                                             
                CurY_Ibuffer_DIA33_w            =        64'd0          ;  
                CurY_Ibuffer_WEAN_32_w          =        1'b1           ;          
                CurY_Ibuffer_WEAN_33_w          =        1'b1           ;          
                CurY_Ibuffer_OEA_32_w           =        1'b0           ;           
                CurY_Ibuffer_OEA_33_w           =        1'b0           ;           
                CurY_Ibuffer_choose_reg_A_32_w  =        1'b0           ;  
                CurY_Ibuffer_choose_reg_A_33_w  =        1'b0           ;  
                
                CurY_Ibuffer_B32_w              =        4'd0           ;                                                  
                CurY_Ibuffer_B33_w              =        4'd0           ;                                                                                                             
                CurY_Ibuffer_DIB32_w            =        64'd0          ;                                                                                                            
                CurY_Ibuffer_DIB33_w            =        64'd0          ;                                    
                CurY_Ibuffer_WEBN_32_w          =        1'b1           ;            
                CurY_Ibuffer_WEBN_33_w          =        1'b1           ;                                  
                CurY_Ibuffer_OEB_32_w           =        1'b0           ;             
                CurY_Ibuffer_OEB_33_w           =        1'b0           ;                                     
                CurY_Ibuffer_choose_reg_B_32_w  =        1'b0           ;    
                CurY_Ibuffer_choose_reg_B_33_w  =        1'b0           ;    

                
                
                //Buffer for Curent frame U                      
                CurU_Ibuffer_A34_w              =        4'd0           ;                         
                CurU_Ibuffer_A35_w              =        4'd0           ;  
                CurU_Ibuffer_DIA34_w            =        64'd0          ;                                                               
                CurU_Ibuffer_DIA35_w            =        64'd0          ;  
                CurU_Ibuffer_WEAN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEAN_35_w          =        1'b1           ;            
                CurU_Ibuffer_OEA_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEA_35_w           =        1'b0           ;             
                CurU_Ibuffer_choose_reg_A_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_A_35_w  =        1'b0           ;    
                
                CurU_Ibuffer_B34_w              =        4'd0           ;                                                  
                CurU_Ibuffer_B35_w              =        4'd0           ;                                                                                                                                 
                CurU_Ibuffer_DIB34_w            =        64'd0          ;                                                                                                            
                CurU_Ibuffer_DIB35_w            =        64'd0          ;                                     
                CurU_Ibuffer_WEBN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEBN_35_w          =        1'b1           ;                                
                CurU_Ibuffer_OEB_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEB_35_w           =        1'b0           ;                                    
                CurU_Ibuffer_choose_reg_B_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_B_35_w  =        1'b0           ;    
 
 
                
                //Buffer for Curent frame V                       
                CurV_Ibuffer_A36_w              =        4'd0           ;                        
                CurV_Ibuffer_A37_w              =        4'd0           ;                        
                CurV_Ibuffer_DIA36_w            =        64'd0          ;                                                               
                CurV_Ibuffer_DIA37_w            =        64'd0          ;    
                CurV_Ibuffer_WEAN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEAN_37_w          =        1'b1           ;            
                CurV_Ibuffer_OEA_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEA_37_w           =        1'b0           ;             
                CurV_Ibuffer_choose_reg_A_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_A_37_w  =        1'b0           ;    
                 
                CurV_Ibuffer_B36_w              =        4'd0           ;                                                                
                CurV_Ibuffer_B37_w              =        4'd0           ;  
                CurV_Ibuffer_DIB36_w            =        64'd0          ;                                                                                                             
                CurV_Ibuffer_DIB37_w            =        64'd0          ;    
                CurV_Ibuffer_WEBN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEBN_37_w          =        1'b1           ;                                    
                CurV_Ibuffer_OEB_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEB_37_w           =        1'b0           ;                                  
                CurV_Ibuffer_choose_reg_B_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_B_37_w  =        1'b0           ;    
 
                
                
                //Buffer for Mask
                Mask_Obuffer_A38_w              =        4'd0           ;                       
                Mask_Obuffer_DIA38_w            =        64'd0          ;  
                Mask_Obuffer_WEAN_38_w          =        1'b1           ;                  
                Mask_Obuffer_OEA_38_w           =        1'b0           ;                   
                Mask_Obuffer_choose_reg_A_38_w  =        1'b0           ;
                                                 
                Mask_Obuffer_B38_w              =        4'd0           ;                                                               
                Mask_Obuffer_DIB38_w            =        64'd0          ;                            
                Mask_Obuffer_WEBN_38_w          =        1'b1           ;                                            
                Mask_Obuffer_OEB_38_w           =        1'b0           ;                                  
                Mask_Obuffer_choose_reg_B_38_w  =        1'b0           ;           
                                                         

            end                  
            
            `SEGSTATE_OUTPUT_BM_W:
            begin                
                
                                                
                //Buffer for Background Model Y
                BMY_IObuffer_A00_w              =        4'd0           ;
                BMY_IObuffer_A01_w              =        4'd0           ; 
                BMY_IObuffer_A02_w              =        4'd0           ; 
                BMY_IObuffer_A03_w              =        4'd0           ; 
                BMY_IObuffer_A04_w              =        4'd0           ; 
                BMY_IObuffer_A05_w              =        4'd0           ; 
                BMY_IObuffer_A06_w              =        4'd0           ;           
                BMY_IObuffer_A07_w              =        4'd0           ; 
                BMY_IObuffer_DIA00_w            =        64'd0          ; 
                BMY_IObuffer_DIA01_w            =        64'd0          ; 
                BMY_IObuffer_DIA02_w            =        64'd0          ; 
                BMY_IObuffer_DIA03_w            =        64'd0          ; 
                BMY_IObuffer_DIA04_w            =        64'd0          ; 
                BMY_IObuffer_DIA05_w            =        64'd0          ; 
                BMY_IObuffer_DIA06_w            =        64'd0          ; 
                BMY_IObuffer_DIA07_w            =        64'd0          ; 
                BMY_IObuffer_WEAN_00_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_01_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_02_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_03_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_04_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_05_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_06_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_07_w          =        1'b1           ;     
                BMY_IObuffer_OEA_00_w           =        1'b0           ;              
                BMY_IObuffer_OEA_01_w           =        1'b0           ;              
                BMY_IObuffer_OEA_02_w           =        1'b0           ;              
                BMY_IObuffer_OEA_03_w           =        1'b0           ;              
                BMY_IObuffer_OEA_04_w           =        1'b0           ;              
                BMY_IObuffer_OEA_05_w           =        1'b0           ;              
                BMY_IObuffer_OEA_06_w           =        1'b0           ;              
                BMY_IObuffer_OEA_07_w           =        1'b0           ;  
                BMY_IObuffer_choose_reg_A_00_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_01_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_02_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_03_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_04_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_05_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_06_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_07_w  =        1'b0           ;  
                
                BMY_IObuffer_B00_w              =        4'd0           ;
                BMY_IObuffer_B01_w              =        4'd0           ;
                BMY_IObuffer_B02_w              =        4'd0           ;
                BMY_IObuffer_B03_w              =        4'd0           ;
                BMY_IObuffer_B04_w              =        4'd0           ;
                BMY_IObuffer_B05_w              =        4'd0           ;
                BMY_IObuffer_B06_w              =        4'd0           ;
                BMY_IObuffer_B07_w              =        4'd0           ;
                BMY_IObuffer_DIB00_w            =        64'd0          ;
                BMY_IObuffer_DIB01_w            =        64'd0          ;
                BMY_IObuffer_DIB02_w            =        64'd0          ;
                BMY_IObuffer_DIB03_w            =        64'd0          ;
                BMY_IObuffer_DIB04_w            =        64'd0          ;
                BMY_IObuffer_DIB05_w            =        64'd0          ;
                BMY_IObuffer_DIB06_w            =        64'd0          ;
                BMY_IObuffer_DIB07_w            =        64'd0          ;
                BMY_IObuffer_WEBN_00_w          =        1'b1           ;
                BMY_IObuffer_WEBN_01_w          =        1'b1           ;
                BMY_IObuffer_WEBN_02_w          =        1'b1           ;
                BMY_IObuffer_WEBN_03_w          =        1'b1           ;
                BMY_IObuffer_WEBN_04_w          =        1'b1           ;
                BMY_IObuffer_WEBN_05_w          =        1'b1           ;
                BMY_IObuffer_WEBN_06_w          =        1'b1           ;
                BMY_IObuffer_WEBN_07_w          =        1'b1           ;
                BMY_IObuffer_OEB_00_w           =        1'b0           ;
                BMY_IObuffer_OEB_01_w           =        1'b0           ;
                BMY_IObuffer_OEB_02_w           =        1'b0           ;
                BMY_IObuffer_OEB_03_w           =        1'b0           ;
                BMY_IObuffer_OEB_04_w           =        1'b0           ;
                BMY_IObuffer_OEB_05_w           =        1'b0           ;
                BMY_IObuffer_OEB_06_w           =        1'b0           ;
                BMY_IObuffer_OEB_07_w           =        1'b0           ;
                BMY_IObuffer_choose_reg_B_00_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_01_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_02_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_03_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_04_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_05_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_06_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_07_w  =        1'b0           ;
                                                
                
                
                         
                //Buffer for Background Model U                         
                BMU_IObuffer_A08_w              =        4'd0           ;
                BMU_IObuffer_A09_w              =        4'd0           ;
                BMU_IObuffer_A10_w              =        4'd0           ;
                BMU_IObuffer_A11_w              =        4'd0           ;
                BMU_IObuffer_A12_w              =        4'd0           ;
                BMU_IObuffer_A13_w              =        4'd0           ;
                BMU_IObuffer_A14_w              =        4'd0           ;
                BMU_IObuffer_A15_w              =        4'd0           ;
                BMU_IObuffer_DIA08_w            =        64'd0          ;
                BMU_IObuffer_DIA09_w            =        64'd0          ;
                BMU_IObuffer_DIA10_w            =        64'd0          ;
                BMU_IObuffer_DIA11_w            =        64'd0          ;
                BMU_IObuffer_DIA12_w            =        64'd0          ;
                BMU_IObuffer_DIA13_w            =        64'd0          ;
                BMU_IObuffer_DIA14_w            =        64'd0          ;
                BMU_IObuffer_DIA15_w            =        64'd0          ;
                BMU_IObuffer_WEAN_08_w          =        1'b1           ;
                BMU_IObuffer_WEAN_09_w          =        1'b1           ;
                BMU_IObuffer_WEAN_10_w          =        1'b1           ;
                BMU_IObuffer_WEAN_11_w          =        1'b1           ;
                BMU_IObuffer_WEAN_12_w          =        1'b1           ;
                BMU_IObuffer_WEAN_13_w          =        1'b1           ;
                BMU_IObuffer_WEAN_14_w          =        1'b1           ;
                BMU_IObuffer_WEAN_15_w          =        1'b1           ;
                BMU_IObuffer_OEA_08_w           =        1'b0           ;
                BMU_IObuffer_OEA_09_w           =        1'b0           ;
                BMU_IObuffer_OEA_10_w           =        1'b0           ;
                BMU_IObuffer_OEA_11_w           =        1'b0           ;
                BMU_IObuffer_OEA_12_w           =        1'b0           ;
                BMU_IObuffer_OEA_13_w           =        1'b0           ;
                BMU_IObuffer_OEA_14_w           =        1'b0           ;
                BMU_IObuffer_OEA_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_A_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_15_w  =        1'b0           ;
                                                
                                                
                BMU_IObuffer_B08_w              =        4'd0           ;
                BMU_IObuffer_B09_w              =        4'd0           ;
                BMU_IObuffer_B10_w              =        4'd0           ;
                BMU_IObuffer_B11_w              =        4'd0           ;
                BMU_IObuffer_B12_w              =        4'd0           ;
                BMU_IObuffer_B13_w              =        4'd0           ;
                BMU_IObuffer_B14_w              =        4'd0           ;
                BMU_IObuffer_B15_w              =        4'd0           ;
                BMU_IObuffer_DIB08_w            =        64'd0          ;
                BMU_IObuffer_DIB09_w            =        64'd0          ;
                BMU_IObuffer_DIB10_w            =        64'd0          ;
                BMU_IObuffer_DIB11_w            =        64'd0          ;
                BMU_IObuffer_DIB12_w            =        64'd0          ;
                BMU_IObuffer_DIB13_w            =        64'd0          ;
                BMU_IObuffer_DIB14_w            =        64'd0          ;
                BMU_IObuffer_DIB15_w            =        64'd0          ;
                BMU_IObuffer_WEBN_08_w          =        1'b1           ;
                BMU_IObuffer_WEBN_09_w          =        1'b1           ;
                BMU_IObuffer_WEBN_10_w          =        1'b1           ;
                BMU_IObuffer_WEBN_11_w          =        1'b1           ;
                BMU_IObuffer_WEBN_12_w          =        1'b1           ;
                BMU_IObuffer_WEBN_13_w          =        1'b1           ;
                BMU_IObuffer_WEBN_14_w          =        1'b1           ;
                BMU_IObuffer_WEBN_15_w          =        1'b1           ;
                BMU_IObuffer_OEB_08_w           =        1'b0           ;
                BMU_IObuffer_OEB_09_w           =        1'b0           ;
                BMU_IObuffer_OEB_10_w           =        1'b0           ;
                BMU_IObuffer_OEB_11_w           =        1'b0           ;
                BMU_IObuffer_OEB_12_w           =        1'b0           ;
                BMU_IObuffer_OEB_13_w           =        1'b0           ;
                BMU_IObuffer_OEB_14_w           =        1'b0           ;
                BMU_IObuffer_OEB_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_B_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_15_w  =        1'b0           ;
                                             
                
                
                //Buffer for Background Model V
                BMV_IObuffer_A16_w              =        4'd0           ;
                BMV_IObuffer_A17_w              =        4'd0           ;
                BMV_IObuffer_A18_w              =        4'd0           ;
                BMV_IObuffer_A19_w              =        4'd0           ;
                BMV_IObuffer_A20_w              =        4'd0           ;
                BMV_IObuffer_A21_w              =        4'd0           ;
                BMV_IObuffer_A22_w              =        4'd0           ;
                BMV_IObuffer_A23_w              =        4'd0           ;
                BMV_IObuffer_DIA16_w            =        64'd0          ;
                BMV_IObuffer_DIA17_w            =        64'd0          ;
                BMV_IObuffer_DIA18_w            =        64'd0          ;
                BMV_IObuffer_DIA19_w            =        64'd0          ;
                BMV_IObuffer_DIA20_w            =        64'd0          ;
                BMV_IObuffer_DIA21_w            =        64'd0          ;
                BMV_IObuffer_DIA22_w            =        64'd0          ;
                BMV_IObuffer_DIA23_w            =        64'd0          ;
                BMV_IObuffer_WEAN_16_w          =        1'b1           ;
                BMV_IObuffer_WEAN_17_w          =        1'b1           ;
                BMV_IObuffer_WEAN_18_w          =        1'b1           ;
                BMV_IObuffer_WEAN_19_w          =        1'b1           ;
                BMV_IObuffer_WEAN_20_w          =        1'b1           ;
                BMV_IObuffer_WEAN_21_w          =        1'b1           ;
                BMV_IObuffer_WEAN_22_w          =        1'b1           ;
                BMV_IObuffer_WEAN_23_w          =        1'b1           ;
                BMV_IObuffer_OEA_16_w           =        1'b0           ;
                BMV_IObuffer_OEA_17_w           =        1'b0           ;
                BMV_IObuffer_OEA_18_w           =        1'b0           ;
                BMV_IObuffer_OEA_19_w           =        1'b0           ;
                BMV_IObuffer_OEA_20_w           =        1'b0           ;
                BMV_IObuffer_OEA_21_w           =        1'b0           ;
                BMV_IObuffer_OEA_22_w           =        1'b0           ;
                BMV_IObuffer_OEA_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_A_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_23_w  =        1'b0           ;
                              
                BMV_IObuffer_B16_w              =        4'd0           ;
                BMV_IObuffer_B17_w              =        4'd0           ;
                BMV_IObuffer_B18_w              =        4'd0           ;
                BMV_IObuffer_B19_w              =        4'd0           ;
                BMV_IObuffer_B20_w              =        4'd0           ;
                BMV_IObuffer_B21_w              =        4'd0           ;
                BMV_IObuffer_B22_w              =        4'd0           ;
                BMV_IObuffer_B23_w              =        4'd0           ;
                BMV_IObuffer_DIB16_w            =        64'd0          ;
                BMV_IObuffer_DIB17_w            =        64'd0          ;
                BMV_IObuffer_DIB18_w            =        64'd0          ;
                BMV_IObuffer_DIB19_w            =        64'd0          ;
                BMV_IObuffer_DIB20_w            =        64'd0          ;
                BMV_IObuffer_DIB21_w            =        64'd0          ;
                BMV_IObuffer_DIB22_w            =        64'd0          ;
                BMV_IObuffer_DIB23_w            =        64'd0          ;
                BMV_IObuffer_WEBN_16_w          =        1'b1           ;
                BMV_IObuffer_WEBN_17_w          =        1'b1           ;
                BMV_IObuffer_WEBN_18_w          =        1'b1           ;
                BMV_IObuffer_WEBN_19_w          =        1'b1           ;
                BMV_IObuffer_WEBN_20_w          =        1'b1           ;
                BMV_IObuffer_WEBN_21_w          =        1'b1           ;
                BMV_IObuffer_WEBN_22_w          =        1'b1           ;
                BMV_IObuffer_WEBN_23_w          =        1'b1           ;
                BMV_IObuffer_OEB_16_w           =        1'b0           ;
                BMV_IObuffer_OEB_17_w           =        1'b0           ;
                BMV_IObuffer_OEB_18_w           =        1'b0           ;
                BMV_IObuffer_OEB_19_w           =        1'b0           ;
                BMV_IObuffer_OEB_20_w           =        1'b0           ;
                BMV_IObuffer_OEB_21_w           =        1'b0           ;
                BMV_IObuffer_OEB_22_w           =        1'b0           ;
                BMV_IObuffer_OEB_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_B_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_23_w  =        1'b0           ;
                                               
                
                
                
                //Buffer for Background Model W
                BMW_IObuffer_A24_w              =        4'd0           ;
                BMW_IObuffer_A25_w              =        4'd0           ;
                BMW_IObuffer_A26_w              =        4'd0           ;
                BMW_IObuffer_A27_w              =        4'd0           ;
                BMW_IObuffer_A28_w              =        4'd0           ;
                BMW_IObuffer_A29_w              =        4'd0           ;
                BMW_IObuffer_A30_w              =        4'd0           ;
                BMW_IObuffer_A31_w              =        4'd0           ;
                BMW_IObuffer_DIA24_w            =        64'd0          ;                                        
                BMW_IObuffer_DIA25_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA26_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA27_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA28_w            =        64'd0          ;                           
                BMW_IObuffer_DIA29_w            =        64'd0          ;                               
                BMW_IObuffer_DIA30_w            =        64'd0          ;                               
                BMW_IObuffer_DIA31_w            =        64'd0          ;
                BMW_IObuffer_WEAN_24_w          =        1'b1           ;
                BMW_IObuffer_WEAN_25_w          =        1'b1           ;
                BMW_IObuffer_WEAN_26_w          =        1'b1           ;
                BMW_IObuffer_WEAN_27_w          =        1'b1           ;
                BMW_IObuffer_WEAN_28_w          =        1'b1           ;
                BMW_IObuffer_WEAN_29_w          =        1'b1           ;
                BMW_IObuffer_WEAN_30_w          =        1'b1           ;
                BMW_IObuffer_WEAN_31_w          =        1'b1           ;
                BMW_IObuffer_OEA_24_w           =        1'b0           ;
                BMW_IObuffer_OEA_25_w           =        1'b0           ;
                BMW_IObuffer_OEA_26_w           =        1'b0           ;
                BMW_IObuffer_OEA_27_w           =        1'b0           ;
                BMW_IObuffer_OEA_28_w           =        1'b0           ;
                BMW_IObuffer_OEA_29_w           =        1'b0           ;
                BMW_IObuffer_OEA_30_w           =        1'b0           ;
                BMW_IObuffer_OEA_31_w           =        1'b0           ;
                BMW_IObuffer_choose_reg_A_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_31_w  =        1'b0           ;
                
                
                if( (Count_BMYUVW_ADDR_r >= 7'd0) && (Count_BMYUVW_ADDR_r < `ADDRNUMin1ELEMENT) )
                 begin 
                        BMW_IObuffer_B24_w              =        Count_BMYUVW_ADDR_r[3:0];
                        BMW_IObuffer_OEB_24_w           =        1'b1           ;
                        BMW_IObuffer_choose_reg_B_24_w  =        1'b1           ;       
                 end             
                 else
                 begin
                        BMW_IObuffer_B24_w              =        4'd0           ;
                        BMW_IObuffer_OEB_24_w           =        1'b0           ;
                        BMW_IObuffer_choose_reg_B_24_w  =        1'b0           ;
                           
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin1ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin2ELEMENT) )
                 begin 
                        BMW_IObuffer_B25_w              =        CountBMYUVWSubAddrNumIn1Elem[3:0]               ;
                        BMW_IObuffer_OEB_25_w           =        1'b1           ; 
                        BMW_IObuffer_choose_reg_B_25_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMW_IObuffer_B25_w              =        4'd0           ;
                        BMW_IObuffer_OEB_25_w           =        1'b0           ;
                        BMW_IObuffer_choose_reg_B_25_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin2ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin3ELEMENT) )
                 begin 
                        BMW_IObuffer_B26_w              =        CountBMYUVWSubAddrNumIn2Elem[3:0]               ;
                        BMW_IObuffer_OEB_26_w           =        1'b1           ; 
                        BMW_IObuffer_choose_reg_B_26_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMW_IObuffer_B26_w              =        4'd0           ;
                        BMW_IObuffer_OEB_26_w           =        1'b0           ;
                        BMW_IObuffer_choose_reg_B_26_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin3ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin4ELEMENT) )
                 begin 
                        BMW_IObuffer_B27_w              =        CountBMYUVWSubAddrNumIn3Elem[3:0]               ;
                        BMW_IObuffer_OEB_27_w           =        1'b1           ; 
                        BMW_IObuffer_choose_reg_B_27_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMW_IObuffer_B27_w              =        4'd0           ;
                        BMW_IObuffer_OEB_27_w           =        1'b0           ;
                        BMW_IObuffer_choose_reg_B_27_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin4ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin5ELEMENT) )
                 begin 
                        BMW_IObuffer_B28_w              =        CountBMYUVWSubAddrNumIn4Elem[3:0]               ;
                        BMW_IObuffer_OEB_28_w           =        1'b1           ; 
                        BMW_IObuffer_choose_reg_B_28_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMW_IObuffer_B28_w              =        4'd0           ;
                        BMW_IObuffer_OEB_28_w           =        1'b0           ;
                        BMW_IObuffer_choose_reg_B_28_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin5ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin6ELEMENT) )
                 begin 
                        BMW_IObuffer_B29_w              =        CountBMYUVWSubAddrNumIn5Elem[3:0]               ;
                        BMW_IObuffer_OEB_29_w           =        1'b1           ; 
                        BMW_IObuffer_choose_reg_B_29_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMW_IObuffer_B29_w              =        4'd0           ;
                        BMW_IObuffer_OEB_29_w           =        1'b0           ;
                        BMW_IObuffer_choose_reg_B_29_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin6ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin7ELEMENT) )
                 begin 
                        BMW_IObuffer_B30_w              =        CountBMYUVWSubAddrNumIn6Elem[3:0]               ;
                        BMW_IObuffer_OEB_30_w           =        1'b1           ; 
                        BMW_IObuffer_choose_reg_B_30_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMW_IObuffer_B30_w              =        4'd0           ;
                        BMW_IObuffer_OEB_30_w           =        1'b0           ;
                        BMW_IObuffer_choose_reg_B_30_w  =        1'b0           ;
                 end
                 
                 if( (Count_BMYUVW_ADDR_r >= `ADDRNUMin7ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin8ELEMENT) )
                 begin 
                        BMW_IObuffer_B31_w              =        CountBMYUVWSubAddrNumIn7Elem[3:0]               ;
                        BMW_IObuffer_OEB_31_w           =        1'b1           ; 
                        BMW_IObuffer_choose_reg_B_31_w  =        1'b1           ; 
                 end             
                 else
                 begin
                        BMW_IObuffer_B31_w              =        4'd0           ;
                        BMW_IObuffer_OEB_31_w           =        1'b0           ;
                        BMW_IObuffer_choose_reg_B_31_w  =        1'b0           ;
                 end 
                                                
                BMW_IObuffer_DIB24_w            =        64'd0          ;
                BMW_IObuffer_DIB25_w            =        64'd0          ;
                BMW_IObuffer_DIB26_w            =        64'd0          ;
                BMW_IObuffer_DIB27_w            =        64'd0          ;
                BMW_IObuffer_DIB28_w            =        64'd0          ;
                BMW_IObuffer_DIB29_w            =        64'd0          ;
                BMW_IObuffer_DIB30_w            =        64'd0          ;
                BMW_IObuffer_DIB31_w            =        64'd0          ;
                
                BMW_IObuffer_WEBN_24_w          =        1'b1           ;
                BMW_IObuffer_WEBN_25_w          =        1'b1           ;
                BMW_IObuffer_WEBN_26_w          =        1'b1           ;
                BMW_IObuffer_WEBN_27_w          =        1'b1           ;
                BMW_IObuffer_WEBN_28_w          =        1'b1           ;
                BMW_IObuffer_WEBN_29_w          =        1'b1           ;
                BMW_IObuffer_WEBN_30_w          =        1'b1           ;
                BMW_IObuffer_WEBN_31_w          =        1'b1           ;
                
                
                         
                
                
                //Buffer for Curent frame Y                        
                CurY_Ibuffer_A32_w              =        4'd0           ;                       
                CurY_Ibuffer_A33_w              =        4'd0           ; 
                CurY_Ibuffer_DIA32_w            =        64'd0          ;                                                             
                CurY_Ibuffer_DIA33_w            =        64'd0          ;  
                CurY_Ibuffer_WEAN_32_w          =        1'b1           ;          
                CurY_Ibuffer_WEAN_33_w          =        1'b1           ;          
                CurY_Ibuffer_OEA_32_w           =        1'b0           ;           
                CurY_Ibuffer_OEA_33_w           =        1'b0           ;           
                CurY_Ibuffer_choose_reg_A_32_w  =        1'b0           ;  
                CurY_Ibuffer_choose_reg_A_33_w  =        1'b0           ;  
                
                CurY_Ibuffer_B32_w              =        4'd0           ;                                                  
                CurY_Ibuffer_B33_w              =        4'd0           ;                                                                                                             
                CurY_Ibuffer_DIB32_w            =        64'd0          ;                                                                                                            
                CurY_Ibuffer_DIB33_w            =        64'd0          ;                                    
                CurY_Ibuffer_WEBN_32_w          =        1'b1           ;            
                CurY_Ibuffer_WEBN_33_w          =        1'b1           ;                                  
                CurY_Ibuffer_OEB_32_w           =        1'b0           ;             
                CurY_Ibuffer_OEB_33_w           =        1'b0           ;                                     
                CurY_Ibuffer_choose_reg_B_32_w  =        1'b0           ;    
                CurY_Ibuffer_choose_reg_B_33_w  =        1'b0           ;    

                
                
                //Buffer for Curent frame U                      
                CurU_Ibuffer_A34_w              =        4'd0           ;                         
                CurU_Ibuffer_A35_w              =        4'd0           ;  
                CurU_Ibuffer_DIA34_w            =        64'd0          ;                                                               
                CurU_Ibuffer_DIA35_w            =        64'd0          ;  
                CurU_Ibuffer_WEAN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEAN_35_w          =        1'b1           ;            
                CurU_Ibuffer_OEA_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEA_35_w           =        1'b0           ;             
                CurU_Ibuffer_choose_reg_A_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_A_35_w  =        1'b0           ;    
                
                CurU_Ibuffer_B34_w              =        4'd0           ;                                                  
                CurU_Ibuffer_B35_w              =        4'd0           ;                                                                                                                                 
                CurU_Ibuffer_DIB34_w            =        64'd0          ;                                                                                                            
                CurU_Ibuffer_DIB35_w            =        64'd0          ;                                     
                CurU_Ibuffer_WEBN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEBN_35_w          =        1'b1           ;                                
                CurU_Ibuffer_OEB_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEB_35_w           =        1'b0           ;                                    
                CurU_Ibuffer_choose_reg_B_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_B_35_w  =        1'b0           ;    
 
 
                
                //Buffer for Curent frame V                       
                CurV_Ibuffer_A36_w              =        4'd0           ;                        
                CurV_Ibuffer_A37_w              =        4'd0           ;                        
                CurV_Ibuffer_DIA36_w            =        64'd0          ;                                                               
                CurV_Ibuffer_DIA37_w            =        64'd0          ;    
                CurV_Ibuffer_WEAN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEAN_37_w          =        1'b1           ;            
                CurV_Ibuffer_OEA_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEA_37_w           =        1'b0           ;             
                CurV_Ibuffer_choose_reg_A_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_A_37_w  =        1'b0           ;    
                 
                CurV_Ibuffer_B36_w              =        4'd0           ;                                                                
                CurV_Ibuffer_B37_w              =        4'd0           ;  
                CurV_Ibuffer_DIB36_w            =        64'd0          ;                                                                                                             
                CurV_Ibuffer_DIB37_w            =        64'd0          ;    
                CurV_Ibuffer_WEBN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEBN_37_w          =        1'b1           ;                                    
                CurV_Ibuffer_OEB_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEB_37_w           =        1'b0           ;                                  
                CurV_Ibuffer_choose_reg_B_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_B_37_w  =        1'b0           ;    
 
                
                
                //Buffer for Mask
                Mask_Obuffer_A38_w              =        4'd0           ;                       
                Mask_Obuffer_DIA38_w            =        64'd0          ;  
                Mask_Obuffer_WEAN_38_w          =        1'b1           ;                  
                Mask_Obuffer_OEA_38_w           =        1'b0           ;                   
                Mask_Obuffer_choose_reg_A_38_w  =        1'b0           ;
                                                 
                Mask_Obuffer_B38_w              =        4'd0           ;                                                               
                Mask_Obuffer_DIB38_w            =        64'd0          ;                            
                Mask_Obuffer_WEBN_38_w          =        1'b1           ;                                            
                Mask_Obuffer_OEB_38_w           =        1'b0           ;                                  
                Mask_Obuffer_choose_reg_B_38_w  =        1'b0           ;           
                                                         

            end                  
                                                                                    
            `SEGSTATE_OUTPUT_MASK:                                                  
            begin                                                                   
                
                                                
                //Buffer for Background Model Y
                BMY_IObuffer_A00_w              =        4'd0           ;
                BMY_IObuffer_A01_w              =        4'd0           ; 
                BMY_IObuffer_A02_w              =        4'd0           ; 
                BMY_IObuffer_A03_w              =        4'd0           ; 
                BMY_IObuffer_A04_w              =        4'd0           ; 
                BMY_IObuffer_A05_w              =        4'd0           ; 
                BMY_IObuffer_A06_w              =        4'd0           ;           
                BMY_IObuffer_A07_w              =        4'd0           ; 
                BMY_IObuffer_DIA00_w            =        64'd0          ; 
                BMY_IObuffer_DIA01_w            =        64'd0          ; 
                BMY_IObuffer_DIA02_w            =        64'd0          ; 
                BMY_IObuffer_DIA03_w            =        64'd0          ; 
                BMY_IObuffer_DIA04_w            =        64'd0          ; 
                BMY_IObuffer_DIA05_w            =        64'd0          ; 
                BMY_IObuffer_DIA06_w            =        64'd0          ; 
                BMY_IObuffer_DIA07_w            =        64'd0          ; 
                BMY_IObuffer_WEAN_00_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_01_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_02_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_03_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_04_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_05_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_06_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_07_w          =        1'b1           ;     
                BMY_IObuffer_OEA_00_w           =        1'b0           ;              
                BMY_IObuffer_OEA_01_w           =        1'b0           ;              
                BMY_IObuffer_OEA_02_w           =        1'b0           ;              
                BMY_IObuffer_OEA_03_w           =        1'b0           ;              
                BMY_IObuffer_OEA_04_w           =        1'b0           ;              
                BMY_IObuffer_OEA_05_w           =        1'b0           ;              
                BMY_IObuffer_OEA_06_w           =        1'b0           ;              
                BMY_IObuffer_OEA_07_w           =        1'b0           ;  
                BMY_IObuffer_choose_reg_A_00_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_01_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_02_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_03_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_04_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_05_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_06_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_07_w  =        1'b0           ;  
                
                BMY_IObuffer_B00_w              =        4'd0           ;
                BMY_IObuffer_B01_w              =        4'd0           ;
                BMY_IObuffer_B02_w              =        4'd0           ;
                BMY_IObuffer_B03_w              =        4'd0           ;
                BMY_IObuffer_B04_w              =        4'd0           ;
                BMY_IObuffer_B05_w              =        4'd0           ;
                BMY_IObuffer_B06_w              =        4'd0           ;
                BMY_IObuffer_B07_w              =        4'd0           ;
                BMY_IObuffer_DIB00_w            =        64'd0          ;
                BMY_IObuffer_DIB01_w            =        64'd0          ;
                BMY_IObuffer_DIB02_w            =        64'd0          ;
                BMY_IObuffer_DIB03_w            =        64'd0          ;
                BMY_IObuffer_DIB04_w            =        64'd0          ;
                BMY_IObuffer_DIB05_w            =        64'd0          ;
                BMY_IObuffer_DIB06_w            =        64'd0          ;
                BMY_IObuffer_DIB07_w            =        64'd0          ;
                BMY_IObuffer_WEBN_00_w          =        1'b1           ;
                BMY_IObuffer_WEBN_01_w          =        1'b1           ;
                BMY_IObuffer_WEBN_02_w          =        1'b1           ;
                BMY_IObuffer_WEBN_03_w          =        1'b1           ;
                BMY_IObuffer_WEBN_04_w          =        1'b1           ;
                BMY_IObuffer_WEBN_05_w          =        1'b1           ;
                BMY_IObuffer_WEBN_06_w          =        1'b1           ;
                BMY_IObuffer_WEBN_07_w          =        1'b1           ;
                BMY_IObuffer_OEB_00_w           =        1'b0           ;
                BMY_IObuffer_OEB_01_w           =        1'b0           ;
                BMY_IObuffer_OEB_02_w           =        1'b0           ;
                BMY_IObuffer_OEB_03_w           =        1'b0           ;
                BMY_IObuffer_OEB_04_w           =        1'b0           ;
                BMY_IObuffer_OEB_05_w           =        1'b0           ;
                BMY_IObuffer_OEB_06_w           =        1'b0           ;
                BMY_IObuffer_OEB_07_w           =        1'b0           ;
                BMY_IObuffer_choose_reg_B_00_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_01_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_02_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_03_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_04_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_05_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_06_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_07_w  =        1'b0           ;
                                                
                
                
                         
                //Buffer for Background Model U                         
                BMU_IObuffer_A08_w              =        4'd0           ;
                BMU_IObuffer_A09_w              =        4'd0           ;
                BMU_IObuffer_A10_w              =        4'd0           ;
                BMU_IObuffer_A11_w              =        4'd0           ;
                BMU_IObuffer_A12_w              =        4'd0           ;
                BMU_IObuffer_A13_w              =        4'd0           ;
                BMU_IObuffer_A14_w              =        4'd0           ;
                BMU_IObuffer_A15_w              =        4'd0           ;
                BMU_IObuffer_DIA08_w            =        64'd0          ;
                BMU_IObuffer_DIA09_w            =        64'd0          ;
                BMU_IObuffer_DIA10_w            =        64'd0          ;
                BMU_IObuffer_DIA11_w            =        64'd0          ;
                BMU_IObuffer_DIA12_w            =        64'd0          ;
                BMU_IObuffer_DIA13_w            =        64'd0          ;
                BMU_IObuffer_DIA14_w            =        64'd0          ;
                BMU_IObuffer_DIA15_w            =        64'd0          ;
                BMU_IObuffer_WEAN_08_w          =        1'b1           ;
                BMU_IObuffer_WEAN_09_w          =        1'b1           ;
                BMU_IObuffer_WEAN_10_w          =        1'b1           ;
                BMU_IObuffer_WEAN_11_w          =        1'b1           ;
                BMU_IObuffer_WEAN_12_w          =        1'b1           ;
                BMU_IObuffer_WEAN_13_w          =        1'b1           ;
                BMU_IObuffer_WEAN_14_w          =        1'b1           ;
                BMU_IObuffer_WEAN_15_w          =        1'b1           ;
                BMU_IObuffer_OEA_08_w           =        1'b0           ;
                BMU_IObuffer_OEA_09_w           =        1'b0           ;
                BMU_IObuffer_OEA_10_w           =        1'b0           ;
                BMU_IObuffer_OEA_11_w           =        1'b0           ;
                BMU_IObuffer_OEA_12_w           =        1'b0           ;
                BMU_IObuffer_OEA_13_w           =        1'b0           ;
                BMU_IObuffer_OEA_14_w           =        1'b0           ;
                BMU_IObuffer_OEA_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_A_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_15_w  =        1'b0           ;
                                                
                                                
                BMU_IObuffer_B08_w              =        4'd0           ;
                BMU_IObuffer_B09_w              =        4'd0           ;
                BMU_IObuffer_B10_w              =        4'd0           ;
                BMU_IObuffer_B11_w              =        4'd0           ;
                BMU_IObuffer_B12_w              =        4'd0           ;
                BMU_IObuffer_B13_w              =        4'd0           ;
                BMU_IObuffer_B14_w              =        4'd0           ;
                BMU_IObuffer_B15_w              =        4'd0           ;
                BMU_IObuffer_DIB08_w            =        64'd0          ;
                BMU_IObuffer_DIB09_w            =        64'd0          ;
                BMU_IObuffer_DIB10_w            =        64'd0          ;
                BMU_IObuffer_DIB11_w            =        64'd0          ;
                BMU_IObuffer_DIB12_w            =        64'd0          ;
                BMU_IObuffer_DIB13_w            =        64'd0          ;
                BMU_IObuffer_DIB14_w            =        64'd0          ;
                BMU_IObuffer_DIB15_w            =        64'd0          ;
                BMU_IObuffer_WEBN_08_w          =        1'b1           ;
                BMU_IObuffer_WEBN_09_w          =        1'b1           ;
                BMU_IObuffer_WEBN_10_w          =        1'b1           ;
                BMU_IObuffer_WEBN_11_w          =        1'b1           ;
                BMU_IObuffer_WEBN_12_w          =        1'b1           ;
                BMU_IObuffer_WEBN_13_w          =        1'b1           ;
                BMU_IObuffer_WEBN_14_w          =        1'b1           ;
                BMU_IObuffer_WEBN_15_w          =        1'b1           ;
                BMU_IObuffer_OEB_08_w           =        1'b0           ;
                BMU_IObuffer_OEB_09_w           =        1'b0           ;
                BMU_IObuffer_OEB_10_w           =        1'b0           ;
                BMU_IObuffer_OEB_11_w           =        1'b0           ;
                BMU_IObuffer_OEB_12_w           =        1'b0           ;
                BMU_IObuffer_OEB_13_w           =        1'b0           ;
                BMU_IObuffer_OEB_14_w           =        1'b0           ;
                BMU_IObuffer_OEB_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_B_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_15_w  =        1'b0           ;
                                             
                
                
                //Buffer for Background Model V
                BMV_IObuffer_A16_w              =        4'd0           ;
                BMV_IObuffer_A17_w              =        4'd0           ;
                BMV_IObuffer_A18_w              =        4'd0           ;
                BMV_IObuffer_A19_w              =        4'd0           ;
                BMV_IObuffer_A20_w              =        4'd0           ;
                BMV_IObuffer_A21_w              =        4'd0           ;
                BMV_IObuffer_A22_w              =        4'd0           ;
                BMV_IObuffer_A23_w              =        4'd0           ;
                BMV_IObuffer_DIA16_w            =        64'd0          ;
                BMV_IObuffer_DIA17_w            =        64'd0          ;
                BMV_IObuffer_DIA18_w            =        64'd0          ;
                BMV_IObuffer_DIA19_w            =        64'd0          ;
                BMV_IObuffer_DIA20_w            =        64'd0          ;
                BMV_IObuffer_DIA21_w            =        64'd0          ;
                BMV_IObuffer_DIA22_w            =        64'd0          ;
                BMV_IObuffer_DIA23_w            =        64'd0          ;
                BMV_IObuffer_WEAN_16_w          =        1'b1           ;
                BMV_IObuffer_WEAN_17_w          =        1'b1           ;
                BMV_IObuffer_WEAN_18_w          =        1'b1           ;
                BMV_IObuffer_WEAN_19_w          =        1'b1           ;
                BMV_IObuffer_WEAN_20_w          =        1'b1           ;
                BMV_IObuffer_WEAN_21_w          =        1'b1           ;
                BMV_IObuffer_WEAN_22_w          =        1'b1           ;
                BMV_IObuffer_WEAN_23_w          =        1'b1           ;
                BMV_IObuffer_OEA_16_w           =        1'b0           ;
                BMV_IObuffer_OEA_17_w           =        1'b0           ;
                BMV_IObuffer_OEA_18_w           =        1'b0           ;
                BMV_IObuffer_OEA_19_w           =        1'b0           ;
                BMV_IObuffer_OEA_20_w           =        1'b0           ;
                BMV_IObuffer_OEA_21_w           =        1'b0           ;
                BMV_IObuffer_OEA_22_w           =        1'b0           ;
                BMV_IObuffer_OEA_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_A_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_23_w  =        1'b0           ;
                              
                BMV_IObuffer_B16_w              =        4'd0           ;
                BMV_IObuffer_B17_w              =        4'd0           ;
                BMV_IObuffer_B18_w              =        4'd0           ;
                BMV_IObuffer_B19_w              =        4'd0           ;
                BMV_IObuffer_B20_w              =        4'd0           ;
                BMV_IObuffer_B21_w              =        4'd0           ;
                BMV_IObuffer_B22_w              =        4'd0           ;
                BMV_IObuffer_B23_w              =        4'd0           ;
                BMV_IObuffer_DIB16_w            =        64'd0          ;
                BMV_IObuffer_DIB17_w            =        64'd0          ;
                BMV_IObuffer_DIB18_w            =        64'd0          ;
                BMV_IObuffer_DIB19_w            =        64'd0          ;
                BMV_IObuffer_DIB20_w            =        64'd0          ;
                BMV_IObuffer_DIB21_w            =        64'd0          ;
                BMV_IObuffer_DIB22_w            =        64'd0          ;
                BMV_IObuffer_DIB23_w            =        64'd0          ;
                BMV_IObuffer_WEBN_16_w          =        1'b1           ;
                BMV_IObuffer_WEBN_17_w          =        1'b1           ;
                BMV_IObuffer_WEBN_18_w          =        1'b1           ;
                BMV_IObuffer_WEBN_19_w          =        1'b1           ;
                BMV_IObuffer_WEBN_20_w          =        1'b1           ;
                BMV_IObuffer_WEBN_21_w          =        1'b1           ;
                BMV_IObuffer_WEBN_22_w          =        1'b1           ;
                BMV_IObuffer_WEBN_23_w          =        1'b1           ;
                BMV_IObuffer_OEB_16_w           =        1'b0           ;
                BMV_IObuffer_OEB_17_w           =        1'b0           ;
                BMV_IObuffer_OEB_18_w           =        1'b0           ;
                BMV_IObuffer_OEB_19_w           =        1'b0           ;
                BMV_IObuffer_OEB_20_w           =        1'b0           ;
                BMV_IObuffer_OEB_21_w           =        1'b0           ;
                BMV_IObuffer_OEB_22_w           =        1'b0           ;
                BMV_IObuffer_OEB_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_B_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_23_w  =        1'b0           ;
                                               
                
                
                
                //Buffer for Background Model W
                BMW_IObuffer_A24_w              =        4'd0           ;
                BMW_IObuffer_A25_w              =        4'd0           ;
                BMW_IObuffer_A26_w              =        4'd0           ;
                BMW_IObuffer_A27_w              =        4'd0           ;
                BMW_IObuffer_A28_w              =        4'd0           ;
                BMW_IObuffer_A29_w              =        4'd0           ;
                BMW_IObuffer_A30_w              =        4'd0           ;
                BMW_IObuffer_A31_w              =        4'd0           ;
                BMW_IObuffer_DIA24_w            =        64'd0          ;                                        
                BMW_IObuffer_DIA25_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA26_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA27_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA28_w            =        64'd0          ;                           
                BMW_IObuffer_DIA29_w            =        64'd0          ;                               
                BMW_IObuffer_DIA30_w            =        64'd0          ;                               
                BMW_IObuffer_DIA31_w            =        64'd0          ;
                BMW_IObuffer_WEAN_24_w          =        1'b1           ;
                BMW_IObuffer_WEAN_25_w          =        1'b1           ;
                BMW_IObuffer_WEAN_26_w          =        1'b1           ;
                BMW_IObuffer_WEAN_27_w          =        1'b1           ;
                BMW_IObuffer_WEAN_28_w          =        1'b1           ;
                BMW_IObuffer_WEAN_29_w          =        1'b1           ;
                BMW_IObuffer_WEAN_30_w          =        1'b1           ;
                BMW_IObuffer_WEAN_31_w          =        1'b1           ;
                BMW_IObuffer_OEA_24_w           =        1'b0           ;
                BMW_IObuffer_OEA_25_w           =        1'b0           ;
                BMW_IObuffer_OEA_26_w           =        1'b0           ;
                BMW_IObuffer_OEA_27_w           =        1'b0           ;
                BMW_IObuffer_OEA_28_w           =        1'b0           ;
                BMW_IObuffer_OEA_29_w           =        1'b0           ;
                BMW_IObuffer_OEA_30_w           =        1'b0           ;
                BMW_IObuffer_OEA_31_w           =        1'b0           ;
                BMW_IObuffer_choose_reg_A_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_31_w  =        1'b0           ;
                
                BMW_IObuffer_B24_w              =        4'd0           ;
                BMW_IObuffer_B25_w              =        4'd0           ;
                BMW_IObuffer_B26_w              =        4'd0           ;
                BMW_IObuffer_B27_w              =        4'd0           ;
                BMW_IObuffer_B28_w              =        4'd0           ;       
                BMW_IObuffer_B29_w              =        4'd0           ;                 
                BMW_IObuffer_B30_w              =        4'd0           ;                 
                BMW_IObuffer_B31_w              =        4'd0           ;
                BMW_IObuffer_DIB24_w            =        64'd0          ;
                BMW_IObuffer_DIB25_w            =        64'd0          ;
                BMW_IObuffer_DIB26_w            =        64'd0          ;                                                                    
                BMW_IObuffer_DIB27_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB28_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB29_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB30_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB31_w            =        64'd0          ;  
                BMW_IObuffer_WEBN_24_w          =        1'b1           ;
                BMW_IObuffer_WEBN_25_w          =        1'b1           ;
                BMW_IObuffer_WEBN_26_w          =        1'b1           ;
                BMW_IObuffer_WEBN_27_w          =        1'b1           ;
                BMW_IObuffer_WEBN_28_w          =        1'b1           ;
                BMW_IObuffer_WEBN_29_w          =        1'b1           ;
                BMW_IObuffer_WEBN_30_w          =        1'b1           ;
                BMW_IObuffer_WEBN_31_w          =        1'b1           ;
                BMW_IObuffer_OEB_24_w           =        1'b0           ;
                BMW_IObuffer_OEB_25_w           =        1'b0           ;
                BMW_IObuffer_OEB_26_w           =        1'b0           ;
                BMW_IObuffer_OEB_27_w           =        1'b0           ;
                BMW_IObuffer_OEB_28_w           =        1'b0           ;
                BMW_IObuffer_OEB_29_w           =        1'b0           ;
                BMW_IObuffer_OEB_30_w           =        1'b0           ;
                BMW_IObuffer_OEB_31_w           =        1'b0           ;  
                BMW_IObuffer_choose_reg_B_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_31_w  =        1'b0           ;
                                                 
                
                
                
                //Buffer for Curent frame Y                        
                CurY_Ibuffer_A32_w              =        4'd0           ;                       
                CurY_Ibuffer_A33_w              =        4'd0           ; 
                CurY_Ibuffer_DIA32_w            =        64'd0          ;                                                             
                CurY_Ibuffer_DIA33_w            =        64'd0          ;  
                CurY_Ibuffer_WEAN_32_w          =        1'b1           ;          
                CurY_Ibuffer_WEAN_33_w          =        1'b1           ;          
                CurY_Ibuffer_OEA_32_w           =        1'b0           ;           
                CurY_Ibuffer_OEA_33_w           =        1'b0           ;           
                CurY_Ibuffer_choose_reg_A_32_w  =        1'b0           ;  
                CurY_Ibuffer_choose_reg_A_33_w  =        1'b0           ;  
                
                CurY_Ibuffer_B32_w              =        4'd0           ;                                                  
                CurY_Ibuffer_B33_w              =        4'd0           ;                                                                                                             
                CurY_Ibuffer_DIB32_w            =        64'd0          ;                                                                                                            
                CurY_Ibuffer_DIB33_w            =        64'd0          ;                                    
                CurY_Ibuffer_WEBN_32_w          =        1'b1           ;            
                CurY_Ibuffer_WEBN_33_w          =        1'b1           ;                                  
                CurY_Ibuffer_OEB_32_w           =        1'b0           ;             
                CurY_Ibuffer_OEB_33_w           =        1'b0           ;                                     
                CurY_Ibuffer_choose_reg_B_32_w  =        1'b0           ;    
                CurY_Ibuffer_choose_reg_B_33_w  =        1'b0           ;    

                
                
                //Buffer for Curent frame U                      
                CurU_Ibuffer_A34_w              =        4'd0           ;                         
                CurU_Ibuffer_A35_w              =        4'd0           ;  
                CurU_Ibuffer_DIA34_w            =        64'd0          ;                                                               
                CurU_Ibuffer_DIA35_w            =        64'd0          ;  
                CurU_Ibuffer_WEAN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEAN_35_w          =        1'b1           ;            
                CurU_Ibuffer_OEA_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEA_35_w           =        1'b0           ;             
                CurU_Ibuffer_choose_reg_A_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_A_35_w  =        1'b0           ;    
                
                CurU_Ibuffer_B34_w              =        4'd0           ;                                                  
                CurU_Ibuffer_B35_w              =        4'd0           ;                                                                                                                                 
                CurU_Ibuffer_DIB34_w            =        64'd0          ;                                                                                                            
                CurU_Ibuffer_DIB35_w            =        64'd0          ;                                     
                CurU_Ibuffer_WEBN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEBN_35_w          =        1'b1           ;                                
                CurU_Ibuffer_OEB_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEB_35_w           =        1'b0           ;                                    
                CurU_Ibuffer_choose_reg_B_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_B_35_w  =        1'b0           ;    
 
 
                
                //Buffer for Curent frame V                       
                CurV_Ibuffer_A36_w              =        4'd0           ;                        
                CurV_Ibuffer_A37_w              =        4'd0           ;                        
                CurV_Ibuffer_DIA36_w            =        64'd0          ;                                                               
                CurV_Ibuffer_DIA37_w            =        64'd0          ;    
                CurV_Ibuffer_WEAN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEAN_37_w          =        1'b1           ;            
                CurV_Ibuffer_OEA_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEA_37_w           =        1'b0           ;             
                CurV_Ibuffer_choose_reg_A_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_A_37_w  =        1'b0           ;    
                 
                CurV_Ibuffer_B36_w              =        4'd0           ;                                                                
                CurV_Ibuffer_B37_w              =        4'd0           ;  
                CurV_Ibuffer_DIB36_w            =        64'd0          ;                                                                                                             
                CurV_Ibuffer_DIB37_w            =        64'd0          ;    
                CurV_Ibuffer_WEBN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEBN_37_w          =        1'b1           ;                                    
                CurV_Ibuffer_OEB_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEB_37_w           =        1'b0           ;                                  
                CurV_Ibuffer_choose_reg_B_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_B_37_w  =        1'b0           ;    
 
                
                
                //Buffer for Mask
                Mask_Obuffer_A38_w              =        4'd0           ;                       
                Mask_Obuffer_DIA38_w            =        64'd0          ;  
                Mask_Obuffer_WEAN_38_w          =        1'b1           ;                  
                Mask_Obuffer_OEA_38_w           =        1'b0           ;                   
                Mask_Obuffer_choose_reg_A_38_w  =        1'b0           ;
                                                 
                                                 
                if( ( Count_MASKOUT_ADDR_r >= 4'd0) && ( Count_MASKOUT_ADDR_r<   `ADDRNUMin1ELEMENT     ) )                      
                begin
                        Mask_Obuffer_B38_w              =        Count_MASKOUT_ADDR_r;
                        Mask_Obuffer_OEB_38_w           =        1'b1;
                        Mask_Obuffer_choose_reg_B_38_w  =        1'b1;
                end
                
                else
                begin
                        Mask_Obuffer_B38_w              =        4'd0           ;                                                               
                        Mask_Obuffer_OEB_38_w           =        1'b0           ;                                  
                        Mask_Obuffer_choose_reg_B_38_w  =        1'b0           ;                       
                end
                
                
                Mask_Obuffer_DIB38_w            =        64'd0          ;                            
                Mask_Obuffer_WEBN_38_w          =        1'b1           ;                                            
                                                         
                                                                 
                                                 
                                                 
                                                                                         
                                                         

            end                                                                     
                                                                                    
            default:
            begin
                                
                //Buffer for Background Model Y
                BMY_IObuffer_A00_w              =        4'd0           ;
                BMY_IObuffer_A01_w              =        4'd0           ; 
                BMY_IObuffer_A02_w              =        4'd0           ; 
                BMY_IObuffer_A03_w              =        4'd0           ; 
                BMY_IObuffer_A04_w              =        4'd0           ; 
                BMY_IObuffer_A05_w              =        4'd0           ; 
                BMY_IObuffer_A06_w              =        4'd0           ;           
                BMY_IObuffer_A07_w              =        4'd0           ; 
                BMY_IObuffer_DIA00_w            =        64'd0          ; 
                BMY_IObuffer_DIA01_w            =        64'd0          ; 
                BMY_IObuffer_DIA02_w            =        64'd0          ; 
                BMY_IObuffer_DIA03_w            =        64'd0          ; 
                BMY_IObuffer_DIA04_w            =        64'd0          ; 
                BMY_IObuffer_DIA05_w            =        64'd0          ; 
                BMY_IObuffer_DIA06_w            =        64'd0          ; 
                BMY_IObuffer_DIA07_w            =        64'd0          ; 
                BMY_IObuffer_WEAN_00_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_01_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_02_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_03_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_04_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_05_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_06_w          =        1'b1           ;             
                BMY_IObuffer_WEAN_07_w          =        1'b1           ;     
                BMY_IObuffer_OEA_00_w           =        1'b0           ;              
                BMY_IObuffer_OEA_01_w           =        1'b0           ;              
                BMY_IObuffer_OEA_02_w           =        1'b0           ;              
                BMY_IObuffer_OEA_03_w           =        1'b0           ;              
                BMY_IObuffer_OEA_04_w           =        1'b0           ;              
                BMY_IObuffer_OEA_05_w           =        1'b0           ;              
                BMY_IObuffer_OEA_06_w           =        1'b0           ;              
                BMY_IObuffer_OEA_07_w           =        1'b0           ;  
                BMY_IObuffer_choose_reg_A_00_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_01_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_02_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_03_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_04_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_05_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_06_w  =        1'b0           ;     
                BMY_IObuffer_choose_reg_A_07_w  =        1'b0           ;  
                
                BMY_IObuffer_B00_w              =        4'd0           ;
                BMY_IObuffer_B01_w              =        4'd0           ;
                BMY_IObuffer_B02_w              =        4'd0           ;
                BMY_IObuffer_B03_w              =        4'd0           ;
                BMY_IObuffer_B04_w              =        4'd0           ;
                BMY_IObuffer_B05_w              =        4'd0           ;
                BMY_IObuffer_B06_w              =        4'd0           ;
                BMY_IObuffer_B07_w              =        4'd0           ;
                BMY_IObuffer_DIB00_w            =        64'd0          ;
                BMY_IObuffer_DIB01_w            =        64'd0          ;
                BMY_IObuffer_DIB02_w            =        64'd0          ;
                BMY_IObuffer_DIB03_w            =        64'd0          ;
                BMY_IObuffer_DIB04_w            =        64'd0          ;
                BMY_IObuffer_DIB05_w            =        64'd0          ;
                BMY_IObuffer_DIB06_w            =        64'd0          ;
                BMY_IObuffer_DIB07_w            =        64'd0          ;
                BMY_IObuffer_WEBN_00_w          =        1'b1           ;
                BMY_IObuffer_WEBN_01_w          =        1'b1           ;
                BMY_IObuffer_WEBN_02_w          =        1'b1           ;
                BMY_IObuffer_WEBN_03_w          =        1'b1           ;
                BMY_IObuffer_WEBN_04_w          =        1'b1           ;
                BMY_IObuffer_WEBN_05_w          =        1'b1           ;
                BMY_IObuffer_WEBN_06_w          =        1'b1           ;
                BMY_IObuffer_WEBN_07_w          =        1'b1           ;
                BMY_IObuffer_OEB_00_w           =        1'b0           ;
                BMY_IObuffer_OEB_01_w           =        1'b0           ;
                BMY_IObuffer_OEB_02_w           =        1'b0           ;
                BMY_IObuffer_OEB_03_w           =        1'b0           ;
                BMY_IObuffer_OEB_04_w           =        1'b0           ;
                BMY_IObuffer_OEB_05_w           =        1'b0           ;
                BMY_IObuffer_OEB_06_w           =        1'b0           ;
                BMY_IObuffer_OEB_07_w           =        1'b0           ;
                BMY_IObuffer_choose_reg_B_00_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_01_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_02_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_03_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_04_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_05_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_06_w  =        1'b0           ;
                BMY_IObuffer_choose_reg_B_07_w  =        1'b0           ;
                                                
                
                
                         
                //Buffer for Background Model U                         
                BMU_IObuffer_A08_w              =        4'd0           ;
                BMU_IObuffer_A09_w              =        4'd0           ;
                BMU_IObuffer_A10_w              =        4'd0           ;
                BMU_IObuffer_A11_w              =        4'd0           ;
                BMU_IObuffer_A12_w              =        4'd0           ;
                BMU_IObuffer_A13_w              =        4'd0           ;
                BMU_IObuffer_A14_w              =        4'd0           ;
                BMU_IObuffer_A15_w              =        4'd0           ;
                BMU_IObuffer_DIA08_w            =        64'd0          ;
                BMU_IObuffer_DIA09_w            =        64'd0          ;
                BMU_IObuffer_DIA10_w            =        64'd0          ;
                BMU_IObuffer_DIA11_w            =        64'd0          ;
                BMU_IObuffer_DIA12_w            =        64'd0          ;
                BMU_IObuffer_DIA13_w            =        64'd0          ;
                BMU_IObuffer_DIA14_w            =        64'd0          ;
                BMU_IObuffer_DIA15_w            =        64'd0          ;
                BMU_IObuffer_WEAN_08_w          =        1'b1           ;
                BMU_IObuffer_WEAN_09_w          =        1'b1           ;
                BMU_IObuffer_WEAN_10_w          =        1'b1           ;
                BMU_IObuffer_WEAN_11_w          =        1'b1           ;
                BMU_IObuffer_WEAN_12_w          =        1'b1           ;
                BMU_IObuffer_WEAN_13_w          =        1'b1           ;
                BMU_IObuffer_WEAN_14_w          =        1'b1           ;
                BMU_IObuffer_WEAN_15_w          =        1'b1           ;
                BMU_IObuffer_OEA_08_w           =        1'b0           ;
                BMU_IObuffer_OEA_09_w           =        1'b0           ;
                BMU_IObuffer_OEA_10_w           =        1'b0           ;
                BMU_IObuffer_OEA_11_w           =        1'b0           ;
                BMU_IObuffer_OEA_12_w           =        1'b0           ;
                BMU_IObuffer_OEA_13_w           =        1'b0           ;
                BMU_IObuffer_OEA_14_w           =        1'b0           ;
                BMU_IObuffer_OEA_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_A_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_A_15_w  =        1'b0           ;
                                                
                                                
                BMU_IObuffer_B08_w              =        4'd0           ;
                BMU_IObuffer_B09_w              =        4'd0           ;
                BMU_IObuffer_B10_w              =        4'd0           ;
                BMU_IObuffer_B11_w              =        4'd0           ;
                BMU_IObuffer_B12_w              =        4'd0           ;
                BMU_IObuffer_B13_w              =        4'd0           ;
                BMU_IObuffer_B14_w              =        4'd0           ;
                BMU_IObuffer_B15_w              =        4'd0           ;
                BMU_IObuffer_DIB08_w            =        64'd0          ;
                BMU_IObuffer_DIB09_w            =        64'd0          ;
                BMU_IObuffer_DIB10_w            =        64'd0          ;
                BMU_IObuffer_DIB11_w            =        64'd0          ;
                BMU_IObuffer_DIB12_w            =        64'd0          ;
                BMU_IObuffer_DIB13_w            =        64'd0          ;
                BMU_IObuffer_DIB14_w            =        64'd0          ;
                BMU_IObuffer_DIB15_w            =        64'd0          ;
                BMU_IObuffer_WEBN_08_w          =        1'b1           ;
                BMU_IObuffer_WEBN_09_w          =        1'b1           ;
                BMU_IObuffer_WEBN_10_w          =        1'b1           ;
                BMU_IObuffer_WEBN_11_w          =        1'b1           ;
                BMU_IObuffer_WEBN_12_w          =        1'b1           ;
                BMU_IObuffer_WEBN_13_w          =        1'b1           ;
                BMU_IObuffer_WEBN_14_w          =        1'b1           ;
                BMU_IObuffer_WEBN_15_w          =        1'b1           ;
                BMU_IObuffer_OEB_08_w           =        1'b0           ;
                BMU_IObuffer_OEB_09_w           =        1'b0           ;
                BMU_IObuffer_OEB_10_w           =        1'b0           ;
                BMU_IObuffer_OEB_11_w           =        1'b0           ;
                BMU_IObuffer_OEB_12_w           =        1'b0           ;
                BMU_IObuffer_OEB_13_w           =        1'b0           ;
                BMU_IObuffer_OEB_14_w           =        1'b0           ;
                BMU_IObuffer_OEB_15_w           =        1'b0           ;
                BMU_IObuffer_choose_reg_B_08_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_09_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_10_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_11_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_12_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_13_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_14_w  =        1'b0           ;
                BMU_IObuffer_choose_reg_B_15_w  =        1'b0           ;
                                             
                
                
                //Buffer for Background Model V
                BMV_IObuffer_A16_w              =        4'd0           ;
                BMV_IObuffer_A17_w              =        4'd0           ;
                BMV_IObuffer_A18_w              =        4'd0           ;
                BMV_IObuffer_A19_w              =        4'd0           ;
                BMV_IObuffer_A20_w              =        4'd0           ;
                BMV_IObuffer_A21_w              =        4'd0           ;
                BMV_IObuffer_A22_w              =        4'd0           ;
                BMV_IObuffer_A23_w              =        4'd0           ;
                BMV_IObuffer_DIA16_w            =        64'd0          ;
                BMV_IObuffer_DIA17_w            =        64'd0          ;
                BMV_IObuffer_DIA18_w            =        64'd0          ;
                BMV_IObuffer_DIA19_w            =        64'd0          ;
                BMV_IObuffer_DIA20_w            =        64'd0          ;
                BMV_IObuffer_DIA21_w            =        64'd0          ;
                BMV_IObuffer_DIA22_w            =        64'd0          ;
                BMV_IObuffer_DIA23_w            =        64'd0          ;
                BMV_IObuffer_WEAN_16_w          =        1'b1           ;
                BMV_IObuffer_WEAN_17_w          =        1'b1           ;
                BMV_IObuffer_WEAN_18_w          =        1'b1           ;
                BMV_IObuffer_WEAN_19_w          =        1'b1           ;
                BMV_IObuffer_WEAN_20_w          =        1'b1           ;
                BMV_IObuffer_WEAN_21_w          =        1'b1           ;
                BMV_IObuffer_WEAN_22_w          =        1'b1           ;
                BMV_IObuffer_WEAN_23_w          =        1'b1           ;
                BMV_IObuffer_OEA_16_w           =        1'b0           ;
                BMV_IObuffer_OEA_17_w           =        1'b0           ;
                BMV_IObuffer_OEA_18_w           =        1'b0           ;
                BMV_IObuffer_OEA_19_w           =        1'b0           ;
                BMV_IObuffer_OEA_20_w           =        1'b0           ;
                BMV_IObuffer_OEA_21_w           =        1'b0           ;
                BMV_IObuffer_OEA_22_w           =        1'b0           ;
                BMV_IObuffer_OEA_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_A_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_A_23_w  =        1'b0           ;
                              
                BMV_IObuffer_B16_w              =        4'd0           ;
                BMV_IObuffer_B17_w              =        4'd0           ;
                BMV_IObuffer_B18_w              =        4'd0           ;
                BMV_IObuffer_B19_w              =        4'd0           ;
                BMV_IObuffer_B20_w              =        4'd0           ;
                BMV_IObuffer_B21_w              =        4'd0           ;
                BMV_IObuffer_B22_w              =        4'd0           ;
                BMV_IObuffer_B23_w              =        4'd0           ;
                BMV_IObuffer_DIB16_w            =        64'd0          ;
                BMV_IObuffer_DIB17_w            =        64'd0          ;
                BMV_IObuffer_DIB18_w            =        64'd0          ;
                BMV_IObuffer_DIB19_w            =        64'd0          ;
                BMV_IObuffer_DIB20_w            =        64'd0          ;
                BMV_IObuffer_DIB21_w            =        64'd0          ;
                BMV_IObuffer_DIB22_w            =        64'd0          ;
                BMV_IObuffer_DIB23_w            =        64'd0          ;
                BMV_IObuffer_WEBN_16_w          =        1'b1           ;
                BMV_IObuffer_WEBN_17_w          =        1'b1           ;
                BMV_IObuffer_WEBN_18_w          =        1'b1           ;
                BMV_IObuffer_WEBN_19_w          =        1'b1           ;
                BMV_IObuffer_WEBN_20_w          =        1'b1           ;
                BMV_IObuffer_WEBN_21_w          =        1'b1           ;
                BMV_IObuffer_WEBN_22_w          =        1'b1           ;
                BMV_IObuffer_WEBN_23_w          =        1'b1           ;
                BMV_IObuffer_OEB_16_w           =        1'b0           ;
                BMV_IObuffer_OEB_17_w           =        1'b0           ;
                BMV_IObuffer_OEB_18_w           =        1'b0           ;
                BMV_IObuffer_OEB_19_w           =        1'b0           ;
                BMV_IObuffer_OEB_20_w           =        1'b0           ;
                BMV_IObuffer_OEB_21_w           =        1'b0           ;
                BMV_IObuffer_OEB_22_w           =        1'b0           ;
                BMV_IObuffer_OEB_23_w           =        1'b0           ;
                BMV_IObuffer_choose_reg_B_16_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_17_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_18_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_19_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_20_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_21_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_22_w  =        1'b0           ;
                BMV_IObuffer_choose_reg_B_23_w  =        1'b0           ;
                                               
                
                
                
                //Buffer for Background Model W
                BMW_IObuffer_A24_w              =        4'd0           ;
                BMW_IObuffer_A25_w              =        4'd0           ;
                BMW_IObuffer_A26_w              =        4'd0           ;
                BMW_IObuffer_A27_w              =        4'd0           ;
                BMW_IObuffer_A28_w              =        4'd0           ;
                BMW_IObuffer_A29_w              =        4'd0           ;
                BMW_IObuffer_A30_w              =        4'd0           ;
                BMW_IObuffer_A31_w              =        4'd0           ;
                BMW_IObuffer_DIA24_w            =        64'd0          ;                                        
                BMW_IObuffer_DIA25_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA26_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA27_w            =        64'd0          ;                                  
                BMW_IObuffer_DIA28_w            =        64'd0          ;                           
                BMW_IObuffer_DIA29_w            =        64'd0          ;                               
                BMW_IObuffer_DIA30_w            =        64'd0          ;                               
                BMW_IObuffer_DIA31_w            =        64'd0          ;
                BMW_IObuffer_WEAN_24_w          =        1'b1           ;
                BMW_IObuffer_WEAN_25_w          =        1'b1           ;
                BMW_IObuffer_WEAN_26_w          =        1'b1           ;
                BMW_IObuffer_WEAN_27_w          =        1'b1           ;
                BMW_IObuffer_WEAN_28_w          =        1'b1           ;
                BMW_IObuffer_WEAN_29_w          =        1'b1           ;
                BMW_IObuffer_WEAN_30_w          =        1'b1           ;
                BMW_IObuffer_WEAN_31_w          =        1'b1           ;
                BMW_IObuffer_OEA_24_w           =        1'b0           ;
                BMW_IObuffer_OEA_25_w           =        1'b0           ;
                BMW_IObuffer_OEA_26_w           =        1'b0           ;
                BMW_IObuffer_OEA_27_w           =        1'b0           ;
                BMW_IObuffer_OEA_28_w           =        1'b0           ;
                BMW_IObuffer_OEA_29_w           =        1'b0           ;
                BMW_IObuffer_OEA_30_w           =        1'b0           ;
                BMW_IObuffer_OEA_31_w           =        1'b0           ;
                BMW_IObuffer_choose_reg_A_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_A_31_w  =        1'b0           ;
                
                BMW_IObuffer_B24_w              =        4'd0           ;
                BMW_IObuffer_B25_w              =        4'd0           ;
                BMW_IObuffer_B26_w              =        4'd0           ;
                BMW_IObuffer_B27_w              =        4'd0           ;
                BMW_IObuffer_B28_w              =        4'd0           ;       
                BMW_IObuffer_B29_w              =        4'd0           ;                 
                BMW_IObuffer_B30_w              =        4'd0           ;                 
                BMW_IObuffer_B31_w              =        4'd0           ;
                BMW_IObuffer_DIB24_w            =        64'd0          ;
                BMW_IObuffer_DIB25_w            =        64'd0          ;
                BMW_IObuffer_DIB26_w            =        64'd0          ;                                                                    
                BMW_IObuffer_DIB27_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB28_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB29_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB30_w            =        64'd0          ;                                                                        
                BMW_IObuffer_DIB31_w            =        64'd0          ;  
                BMW_IObuffer_WEBN_24_w          =        1'b1           ;
                BMW_IObuffer_WEBN_25_w          =        1'b1           ;
                BMW_IObuffer_WEBN_26_w          =        1'b1           ;
                BMW_IObuffer_WEBN_27_w          =        1'b1           ;
                BMW_IObuffer_WEBN_28_w          =        1'b1           ;
                BMW_IObuffer_WEBN_29_w          =        1'b1           ;
                BMW_IObuffer_WEBN_30_w          =        1'b1           ;
                BMW_IObuffer_WEBN_31_w          =        1'b1           ;
                BMW_IObuffer_OEB_24_w           =        1'b0           ;
                BMW_IObuffer_OEB_25_w           =        1'b0           ;
                BMW_IObuffer_OEB_26_w           =        1'b0           ;
                BMW_IObuffer_OEB_27_w           =        1'b0           ;
                BMW_IObuffer_OEB_28_w           =        1'b0           ;
                BMW_IObuffer_OEB_29_w           =        1'b0           ;
                BMW_IObuffer_OEB_30_w           =        1'b0           ;
                BMW_IObuffer_OEB_31_w           =        1'b0           ;  
                BMW_IObuffer_choose_reg_B_24_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_25_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_26_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_27_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_28_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_29_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_30_w  =        1'b0           ;
                BMW_IObuffer_choose_reg_B_31_w  =        1'b0           ;
                                                 
                
                
                
                //Buffer for Curent frame Y                        
                CurY_Ibuffer_A32_w              =        4'd0           ;                       
                CurY_Ibuffer_A33_w              =        4'd0           ; 
                CurY_Ibuffer_DIA32_w            =        64'd0          ;                                                             
                CurY_Ibuffer_DIA33_w            =        64'd0          ;  
                CurY_Ibuffer_WEAN_32_w          =        1'b1           ;          
                CurY_Ibuffer_WEAN_33_w          =        1'b1           ;          
                CurY_Ibuffer_OEA_32_w           =        1'b0           ;           
                CurY_Ibuffer_OEA_33_w           =        1'b0           ;           
                CurY_Ibuffer_choose_reg_A_32_w  =        1'b0           ;  
                CurY_Ibuffer_choose_reg_A_33_w  =        1'b0           ;  
                
                CurY_Ibuffer_B32_w              =        4'd0           ;                                                  
                CurY_Ibuffer_B33_w              =        4'd0           ;                                                                                                             
                CurY_Ibuffer_DIB32_w            =        64'd0          ;                                                                                                            
                CurY_Ibuffer_DIB33_w            =        64'd0          ;                                    
                CurY_Ibuffer_WEBN_32_w          =        1'b1           ;            
                CurY_Ibuffer_WEBN_33_w          =        1'b1           ;                                  
                CurY_Ibuffer_OEB_32_w           =        1'b0           ;             
                CurY_Ibuffer_OEB_33_w           =        1'b0           ;                                     
                CurY_Ibuffer_choose_reg_B_32_w  =        1'b0           ;    
                CurY_Ibuffer_choose_reg_B_33_w  =        1'b0           ;    

                
                
                //Buffer for Curent frame U                      
                CurU_Ibuffer_A34_w              =        4'd0           ;                         
                CurU_Ibuffer_A35_w              =        4'd0           ;  
                CurU_Ibuffer_DIA34_w            =        64'd0          ;                                                               
                CurU_Ibuffer_DIA35_w            =        64'd0          ;  
                CurU_Ibuffer_WEAN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEAN_35_w          =        1'b1           ;            
                CurU_Ibuffer_OEA_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEA_35_w           =        1'b0           ;             
                CurU_Ibuffer_choose_reg_A_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_A_35_w  =        1'b0           ;    
                
                CurU_Ibuffer_B34_w              =        4'd0           ;                                                  
                CurU_Ibuffer_B35_w              =        4'd0           ;                                                                                                                                 
                CurU_Ibuffer_DIB34_w            =        64'd0          ;                                                                                                            
                CurU_Ibuffer_DIB35_w            =        64'd0          ;                                     
                CurU_Ibuffer_WEBN_34_w          =        1'b1           ;            
                CurU_Ibuffer_WEBN_35_w          =        1'b1           ;                                
                CurU_Ibuffer_OEB_34_w           =        1'b0           ;             
                CurU_Ibuffer_OEB_35_w           =        1'b0           ;                                    
                CurU_Ibuffer_choose_reg_B_34_w  =        1'b0           ;    
                CurU_Ibuffer_choose_reg_B_35_w  =        1'b0           ;    
 
 
                
                //Buffer for Curent frame V                       
                CurV_Ibuffer_A36_w              =        4'd0           ;                        
                CurV_Ibuffer_A37_w              =        4'd0           ;                        
                CurV_Ibuffer_DIA36_w            =        64'd0          ;                                                               
                CurV_Ibuffer_DIA37_w            =        64'd0          ;    
                CurV_Ibuffer_WEAN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEAN_37_w          =        1'b1           ;            
                CurV_Ibuffer_OEA_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEA_37_w           =        1'b0           ;             
                CurV_Ibuffer_choose_reg_A_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_A_37_w  =        1'b0           ;    
                 
                CurV_Ibuffer_B36_w              =        4'd0           ;                                                                
                CurV_Ibuffer_B37_w              =        4'd0           ;  
                CurV_Ibuffer_DIB36_w            =        64'd0          ;                                                                                                             
                CurV_Ibuffer_DIB37_w            =        64'd0          ;    
                CurV_Ibuffer_WEBN_36_w          =        1'b1           ;            
                CurV_Ibuffer_WEBN_37_w          =        1'b1           ;                                    
                CurV_Ibuffer_OEB_36_w           =        1'b0           ;             
                CurV_Ibuffer_OEB_37_w           =        1'b0           ;                                  
                CurV_Ibuffer_choose_reg_B_36_w  =        1'b0           ;    
                CurV_Ibuffer_choose_reg_B_37_w  =        1'b0           ;    
 
                
                
                //Buffer for Mask
                Mask_Obuffer_A38_w              =        4'd0           ;                       
                Mask_Obuffer_DIA38_w            =        64'd0          ;  
                Mask_Obuffer_WEAN_38_w          =        1'b1           ;                  
                Mask_Obuffer_OEA_38_w           =        1'b0           ;                   
                Mask_Obuffer_choose_reg_A_38_w  =        1'b0           ;
                                                 
                Mask_Obuffer_B38_w              =        4'd0           ;                                                               
                Mask_Obuffer_DIB38_w            =        64'd0          ;                            
                Mask_Obuffer_WEBN_38_w          =        1'b1           ;                                            
                Mask_Obuffer_OEB_38_w           =        1'b0           ;                                  
                Mask_Obuffer_choose_reg_B_38_w  =        1'b0           ;           
                                                         
                  
            end
     endcase
end

assign Mask_Obuffer_WEAN_w              =  Mask_Obuffer_WEAN_38_w;
                                        
assign CurV_Ibuffer_WEAN_w              = {     CurV_Ibuffer_WEAN_37_w,
                                                CurV_Ibuffer_WEAN_36_w
                                                };  
assign CurU_Ibuffer_WEAN_w              = {     CurU_Ibuffer_WEAN_35_w,
                                                CurU_Ibuffer_WEAN_34_w
                                                }; 
assign CurY_Ibuffer_WEAN_w              = {     CurY_Ibuffer_WEAN_33_w,
                                                CurY_Ibuffer_WEAN_32_w
                                                };
assign BMW_IObuffer_WEAN_w              = {     BMW_IObuffer_WEAN_31_w,
                                                BMW_IObuffer_WEAN_30_w,
                                                BMW_IObuffer_WEAN_29_w,
                                                BMW_IObuffer_WEAN_28_w,
                                                BMW_IObuffer_WEAN_27_w,
                                                BMW_IObuffer_WEAN_26_w,
                                                BMW_IObuffer_WEAN_25_w,
                                                BMW_IObuffer_WEAN_24_w
                                                };
assign BMV_IObuffer_WEAN_w              = {     BMV_IObuffer_WEAN_23_w,
                                                BMV_IObuffer_WEAN_22_w,
                                                BMV_IObuffer_WEAN_21_w,
                                                BMV_IObuffer_WEAN_20_w,
                                                BMV_IObuffer_WEAN_19_w,
                                                BMV_IObuffer_WEAN_18_w,
                                                BMV_IObuffer_WEAN_17_w,
                                                BMV_IObuffer_WEAN_16_w
                                                };
assign BMU_IObuffer_WEAN_w              = {     BMU_IObuffer_WEAN_15_w,
                                                BMU_IObuffer_WEAN_14_w,
                                                BMU_IObuffer_WEAN_13_w,
                                                BMU_IObuffer_WEAN_12_w,
                                                BMU_IObuffer_WEAN_11_w,
                                                BMU_IObuffer_WEAN_10_w,
                                                BMU_IObuffer_WEAN_09_w,
                                                BMU_IObuffer_WEAN_08_w
                                                };
assign BMY_IObuffer_WEAN_w              = {     BMY_IObuffer_WEAN_07_w,
                                                BMY_IObuffer_WEAN_06_w,
                                                BMY_IObuffer_WEAN_05_w,
                                                BMY_IObuffer_WEAN_04_w,
                                                BMY_IObuffer_WEAN_03_w,
                                                BMY_IObuffer_WEAN_02_w,
                                                BMY_IObuffer_WEAN_01_w,
                                                BMY_IObuffer_WEAN_00_w
                                                };
                                        
assign Mask_Obuffer_WEBN_w              =  Mask_Obuffer_WEBN_38_w;          
                                                                            
assign CurV_Ibuffer_WEBN_w      = {     CurV_Ibuffer_WEBN_37_w,  
                                                CurV_Ibuffer_WEBN_36_w   
                                                };                          
assign CurU_Ibuffer_WEBN_w      = {     CurU_Ibuffer_WEBN_35_w,  
                                                CurU_Ibuffer_WEBN_34_w   
                                                };                          
assign CurY_Ibuffer_WEBN_w      = {     CurY_Ibuffer_WEBN_33_w,  
                                                CurY_Ibuffer_WEBN_32_w   
                                                };                          
assign BMW_IObuffer_WEBN_w              = {     BMW_IObuffer_WEBN_31_w,     
                                                BMW_IObuffer_WEBN_30_w,     
                                                BMW_IObuffer_WEBN_29_w,     
                                                BMW_IObuffer_WEBN_28_w,     
                                                BMW_IObuffer_WEBN_27_w,     
                                                BMW_IObuffer_WEBN_26_w,     
                                                BMW_IObuffer_WEBN_25_w,     
                                                BMW_IObuffer_WEBN_24_w      
                                                };                          
assign BMV_IObuffer_WEBN_w              = {     BMV_IObuffer_WEBN_23_w,     
                                                BMV_IObuffer_WEBN_22_w,     
                                                BMV_IObuffer_WEBN_21_w,     
                                                BMV_IObuffer_WEBN_20_w,     
                                                BMV_IObuffer_WEBN_19_w,     
                                                BMV_IObuffer_WEBN_18_w,     
                                                BMV_IObuffer_WEBN_17_w,     
                                                BMV_IObuffer_WEBN_16_w      
                                                };                          
assign BMU_IObuffer_WEBN_w              = {     BMU_IObuffer_WEBN_15_w,     
                                                BMU_IObuffer_WEBN_14_w,     
                                                BMU_IObuffer_WEBN_13_w,     
                                                BMU_IObuffer_WEBN_12_w,     
                                                BMU_IObuffer_WEBN_11_w,     
                                                BMU_IObuffer_WEBN_10_w,     
                                                BMU_IObuffer_WEBN_09_w,     
                                                BMU_IObuffer_WEBN_08_w      
                                                };                          
assign BMY_IObuffer_WEBN_w              = {     BMY_IObuffer_WEBN_07_w,     
                                                BMY_IObuffer_WEBN_06_w,     
                                                BMY_IObuffer_WEBN_05_w,     
                                                BMY_IObuffer_WEBN_04_w,     
                                                BMY_IObuffer_WEBN_03_w,     
                                                BMY_IObuffer_WEBN_02_w,     
                                                BMY_IObuffer_WEBN_01_w,     
                                                BMY_IObuffer_WEBN_00_w      
                                                };                          
                                        
                                        
                                        
                                        
                                        
                                        
                                        
assign Mask_Obuffer_OEA_w               =  Mask_Obuffer_OEA_38_w;          
                                                                            
assign CurV_Ibuffer_OEA_w       = {     CurV_Ibuffer_OEA_37_w,  
                                                CurV_Ibuffer_OEA_36_w   
                                                };                          
assign CurU_Ibuffer_OEA_w       = {     CurU_Ibuffer_OEA_35_w,  
                                                CurU_Ibuffer_OEA_34_w   
                                                };                          
assign CurY_Ibuffer_OEA_w       = {     CurY_Ibuffer_OEA_33_w,  
                                                CurY_Ibuffer_OEA_32_w   
                                                };                          
assign BMW_IObuffer_OEA_w               = {     BMW_IObuffer_OEA_31_w,     
                                                BMW_IObuffer_OEA_30_w,     
                                                BMW_IObuffer_OEA_29_w,     
                                                BMW_IObuffer_OEA_28_w,     
                                                BMW_IObuffer_OEA_27_w,     
                                                BMW_IObuffer_OEA_26_w,     
                                                BMW_IObuffer_OEA_25_w,     
                                                BMW_IObuffer_OEA_24_w      
                                                };                          
assign BMV_IObuffer_OEA_w               = {     BMV_IObuffer_OEA_23_w,     
                                                BMV_IObuffer_OEA_22_w,     
                                                BMV_IObuffer_OEA_21_w,     
                                                BMV_IObuffer_OEA_20_w,     
                                                BMV_IObuffer_OEA_19_w,     
                                                BMV_IObuffer_OEA_18_w,     
                                                BMV_IObuffer_OEA_17_w,     
                                                BMV_IObuffer_OEA_16_w      
                                                };                          
assign BMU_IObuffer_OEA_w               = {     BMU_IObuffer_OEA_15_w,     
                                                BMU_IObuffer_OEA_14_w,     
                                                BMU_IObuffer_OEA_13_w,     
                                                BMU_IObuffer_OEA_12_w,     
                                                BMU_IObuffer_OEA_11_w,     
                                                BMU_IObuffer_OEA_10_w,     
                                                BMU_IObuffer_OEA_09_w,     
                                                BMU_IObuffer_OEA_08_w      
                                                };                          
assign BMY_IObuffer_OEA_w               = {     BMY_IObuffer_OEA_07_w,     
                                                BMY_IObuffer_OEA_06_w,     
                                                BMY_IObuffer_OEA_05_w,     
                                                BMY_IObuffer_OEA_04_w,     
                                                BMY_IObuffer_OEA_03_w,     
                                                BMY_IObuffer_OEA_02_w,     
                                                BMY_IObuffer_OEA_01_w,     
                                                BMY_IObuffer_OEA_00_w      
                                                };                          
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
assign Mask_Obuffer_OEB_w               =  Mask_Obuffer_OEB_38_w;          
                                                                            
assign CurV_Ibuffer_OEB_w       = {     CurV_Ibuffer_OEB_37_w,  
                                                CurV_Ibuffer_OEB_36_w   
                                                };                          
assign CurU_Ibuffer_OEB_w       = {     CurU_Ibuffer_OEB_35_w,  
                                                CurU_Ibuffer_OEB_34_w   
                                                };                          
assign CurY_Ibuffer_OEB_w       = {     CurY_Ibuffer_OEB_33_w,  
                                                CurY_Ibuffer_OEB_32_w   
                                                };                          
assign BMW_IObuffer_OEB_w               = {     BMW_IObuffer_OEB_31_w,     
                                                BMW_IObuffer_OEB_30_w,     
                                                BMW_IObuffer_OEB_29_w,     
                                                BMW_IObuffer_OEB_28_w,     
                                                BMW_IObuffer_OEB_27_w,     
                                                BMW_IObuffer_OEB_26_w,     
                                                BMW_IObuffer_OEB_25_w,     
                                                BMW_IObuffer_OEB_24_w      
                                                };                          
assign BMV_IObuffer_OEB_w               = {     BMV_IObuffer_OEB_23_w,     
                                                BMV_IObuffer_OEB_22_w,     
                                                BMV_IObuffer_OEB_21_w,     
                                                BMV_IObuffer_OEB_20_w,     
                                                BMV_IObuffer_OEB_19_w,     
                                                BMV_IObuffer_OEB_18_w,     
                                                BMV_IObuffer_OEB_17_w,     
                                                BMV_IObuffer_OEB_16_w      
                                                };                          
assign BMU_IObuffer_OEB_w               = {     BMU_IObuffer_OEB_15_w,     
                                                BMU_IObuffer_OEB_14_w,     
                                                BMU_IObuffer_OEB_13_w,     
                                                BMU_IObuffer_OEB_12_w,     
                                                BMU_IObuffer_OEB_11_w,     
                                                BMU_IObuffer_OEB_10_w,     
                                                BMU_IObuffer_OEB_09_w,     
                                                BMU_IObuffer_OEB_08_w      
                                                };                          
assign BMY_IObuffer_OEB_w               = {     BMY_IObuffer_OEB_07_w,     
                                                BMY_IObuffer_OEB_06_w,     
                                                BMY_IObuffer_OEB_05_w,     
                                                BMY_IObuffer_OEB_04_w,     
                                                BMY_IObuffer_OEB_03_w,     
                                                BMY_IObuffer_OEB_02_w,     
                                                BMY_IObuffer_OEB_01_w,     
                                                BMY_IObuffer_OEB_00_w      
                                                };                          
                                        




assign Mask_Obuffer_choose_reg_A_w      =  Mask_Obuffer_choose_reg_A_38_w;          
                                                                            
assign CurV_Ibuffer_choose_reg_A_w   = {        CurV_Ibuffer_choose_reg_A_37_w,  
                                                CurV_Ibuffer_choose_reg_A_36_w   
                                                };                          
assign CurU_Ibuffer_choose_reg_A_w   = {        CurU_Ibuffer_choose_reg_A_35_w,  
                                                CurU_Ibuffer_choose_reg_A_34_w   
                                                };                          
assign CurY_Ibuffer_choose_reg_A_w   = {        CurY_Ibuffer_choose_reg_A_33_w,  
                                                CurY_Ibuffer_choose_reg_A_32_w   
                                                };                          
assign BMW_IObuffer_choose_reg_A_w      = {     BMW_IObuffer_choose_reg_A_31_w,     
                                                BMW_IObuffer_choose_reg_A_30_w,     
                                                BMW_IObuffer_choose_reg_A_29_w,     
                                                BMW_IObuffer_choose_reg_A_28_w,     
                                                BMW_IObuffer_choose_reg_A_27_w,     
                                                BMW_IObuffer_choose_reg_A_26_w,     
                                                BMW_IObuffer_choose_reg_A_25_w,     
                                                BMW_IObuffer_choose_reg_A_24_w      
                                                };                          
assign BMV_IObuffer_choose_reg_A_w      = {     BMV_IObuffer_choose_reg_A_23_w,     
                                                BMV_IObuffer_choose_reg_A_22_w,     
                                                BMV_IObuffer_choose_reg_A_21_w,     
                                                BMV_IObuffer_choose_reg_A_20_w,     
                                                BMV_IObuffer_choose_reg_A_19_w,     
                                                BMV_IObuffer_choose_reg_A_18_w,     
                                                BMV_IObuffer_choose_reg_A_17_w,     
                                                BMV_IObuffer_choose_reg_A_16_w      
                                                };                          
assign BMU_IObuffer_choose_reg_A_w      = {     BMU_IObuffer_choose_reg_A_15_w,     
                                                BMU_IObuffer_choose_reg_A_14_w,     
                                                BMU_IObuffer_choose_reg_A_13_w,     
                                                BMU_IObuffer_choose_reg_A_12_w,     
                                                BMU_IObuffer_choose_reg_A_11_w,     
                                                BMU_IObuffer_choose_reg_A_10_w,     
                                                BMU_IObuffer_choose_reg_A_09_w,     
                                                BMU_IObuffer_choose_reg_A_08_w      
                                                };                          
assign BMY_IObuffer_choose_reg_A_w      = {     BMY_IObuffer_choose_reg_A_07_w,     
                                                BMY_IObuffer_choose_reg_A_06_w,     
                                                BMY_IObuffer_choose_reg_A_05_w,     
                                                BMY_IObuffer_choose_reg_A_04_w,     
                                                BMY_IObuffer_choose_reg_A_03_w,     
                                                BMY_IObuffer_choose_reg_A_02_w,     
                                                BMY_IObuffer_choose_reg_A_01_w,     
                                                BMY_IObuffer_choose_reg_A_00_w      
                                                };                          




            
assign Mask_Obuffer_choose_reg_B_w      =  Mask_Obuffer_choose_reg_B_38_w;          
                                                                            
assign CurV_Ibuffer_choose_reg_B_w   = {        CurV_Ibuffer_choose_reg_B_37_w,  
                                                CurV_Ibuffer_choose_reg_B_36_w   
                                                };                          
assign CurU_Ibuffer_choose_reg_B_w   = {        CurU_Ibuffer_choose_reg_B_35_w,  
                                                CurU_Ibuffer_choose_reg_B_34_w   
                                                };                          
assign CurY_Ibuffer_choose_reg_B_w   = {        CurY_Ibuffer_choose_reg_B_33_w,  
                                                CurY_Ibuffer_choose_reg_B_32_w   
                                                };                          
assign BMW_IObuffer_choose_reg_B_w      = {     BMW_IObuffer_choose_reg_B_31_w,     
                                                BMW_IObuffer_choose_reg_B_30_w,     
                                                BMW_IObuffer_choose_reg_B_29_w,     
                                                BMW_IObuffer_choose_reg_B_28_w,     
                                                BMW_IObuffer_choose_reg_B_27_w,     
                                                BMW_IObuffer_choose_reg_B_26_w,     
                                                BMW_IObuffer_choose_reg_B_25_w,     
                                                BMW_IObuffer_choose_reg_B_24_w      
                                                };                          
assign BMV_IObuffer_choose_reg_B_w      = {     BMV_IObuffer_choose_reg_B_23_w,     
                                                BMV_IObuffer_choose_reg_B_22_w,     
                                                BMV_IObuffer_choose_reg_B_21_w,     
                                                BMV_IObuffer_choose_reg_B_20_w,     
                                                BMV_IObuffer_choose_reg_B_19_w,     
                                                BMV_IObuffer_choose_reg_B_18_w,     
                                                BMV_IObuffer_choose_reg_B_17_w,     
                                                BMV_IObuffer_choose_reg_B_16_w      
                                                };                          
assign BMU_IObuffer_choose_reg_B_w      = {     BMU_IObuffer_choose_reg_B_15_w,     
                                                BMU_IObuffer_choose_reg_B_14_w,     
                                                BMU_IObuffer_choose_reg_B_13_w,     
                                                BMU_IObuffer_choose_reg_B_12_w,     
                                                BMU_IObuffer_choose_reg_B_11_w,     
                                                BMU_IObuffer_choose_reg_B_10_w,     
                                                BMU_IObuffer_choose_reg_B_09_w,     
                                                BMU_IObuffer_choose_reg_B_08_w      
                                                };                          
assign BMY_IObuffer_choose_reg_B_w      = {     BMY_IObuffer_choose_reg_B_07_w,     
                                                BMY_IObuffer_choose_reg_B_06_w,     
                                                BMY_IObuffer_choose_reg_B_05_w,     
                                                BMY_IObuffer_choose_reg_B_04_w,     
                                                BMY_IObuffer_choose_reg_B_03_w,     
                                                BMY_IObuffer_choose_reg_B_02_w,     
                                                BMY_IObuffer_choose_reg_B_01_w,     
                                                BMY_IObuffer_choose_reg_B_00_w      
                                                };                          



assign Seg_curpixelY_w  = ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd0)   &&  (pixelidx_Quarter_r >= 12'd0                  ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB32_w[7:0]    : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd1)   &&  (pixelidx_Quarter_r >= 12'd0                  ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB32_w[15:8]   : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd2)   &&  (pixelidx_Quarter_r >= 12'd0                  ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB32_w[23:16]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd3)   &&  (pixelidx_Quarter_r >= 12'd0                  ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB32_w[31:24]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd4)   &&  (pixelidx_Quarter_r >= 12'd0                  ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB32_w[39:32]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd5)   &&  (pixelidx_Quarter_r >= 12'd0                  ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB32_w[47:40]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd6)   &&  (pixelidx_Quarter_r >= 12'd0                  ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB32_w[55:48]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd7)   &&  (pixelidx_Quarter_r >= 12'd0                  ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB32_w[63:56]  : 
                                                                                                                                                                                                                               
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB33_w[7:0]    : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB33_w[15:8]   : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd2)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB33_w[23:16]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd3)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB33_w[31:24]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd4)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB33_w[39:32]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd5)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB33_w[47:40]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd6)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB33_w[55:48]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd7)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB33_w[63:56]  : 
                                                                                                                                                                                                                                 8'd0;



assign Seg_curpixelU_w = ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd0)   &&  (pixelidx_Quarter_r >= 12'd0                   ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB34_w[7:0]    : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd1)   &&  (pixelidx_Quarter_r >= 12'd0                  ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB34_w[15:8]   : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd2)   &&  (pixelidx_Quarter_r >= 12'd0                  ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB34_w[23:16]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd3)   &&  (pixelidx_Quarter_r >= 12'd0                  ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB34_w[31:24]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd4)   &&  (pixelidx_Quarter_r >= 12'd0                  ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB34_w[39:32]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd5)   &&  (pixelidx_Quarter_r >= 12'd0                  ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB34_w[47:40]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd6)   &&  (pixelidx_Quarter_r >= 12'd0                  ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB34_w[55:48]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd7)   &&  (pixelidx_Quarter_r >= 12'd0                  ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB34_w[63:56]  : 
                                                                                                                                                                                                                               
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB35_w[7:0]    : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB35_w[15:8]   : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd2)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB35_w[23:16]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd3)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB35_w[31:24]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd4)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB35_w[39:32]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd5)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB35_w[47:40]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd6)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB35_w[55:48]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd7)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB35_w[63:56]  : 
                                                                                                                                                                                                                                 8'd0;     



assign Seg_curpixelV_w = ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd0)   &&  (pixelidx_Quarter_r >= 12'd0                   ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB36_w[7:0]    : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd1)   &&  (pixelidx_Quarter_r >= 12'd0                  ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB36_w[15:8]   : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd2)   &&  (pixelidx_Quarter_r >= 12'd0                  ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB36_w[23:16]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd3)   &&  (pixelidx_Quarter_r >= 12'd0                  ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB36_w[31:24]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd4)   &&  (pixelidx_Quarter_r >= 12'd0                  ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB36_w[39:32]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd5)   &&  (pixelidx_Quarter_r >= 12'd0                  ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB36_w[47:40]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd6)   &&  (pixelidx_Quarter_r >= 12'd0                  ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB36_w[55:48]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd7)   &&  (pixelidx_Quarter_r >= 12'd0                  ) && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_CUR      ) )?            DOB36_w[63:56]  : 
                                                                                                                                                                                                                               
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB37_w[7:0]    : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB37_w[15:8]   : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd2)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB37_w[23:16]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd3)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB37_w[31:24]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd4)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB37_w[39:32]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd5)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB37_w[47:40]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd6)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB37_w[55:48]  : 
                          ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[2:0] == 3'd7)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_CUR) && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_CUR      ) )?            DOB37_w[63:56]  : 
                                                                                                                                                                                                                                 8'd0;


assign Seg_bckgndlayerY_w = (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= 12'd0)                               && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_BM         ) )                      ?   DOB00_w[31:0]:
                                                        
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_BM         ) )              ?   DOB01_w[31:0]:                     
     
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin2ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin3ELEMENT_BM         ) )              ?   DOB02_w[31:0]:      
                 
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin3ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin4ELEMENT_BM         ) )              ?   DOB03_w[31:0]:      
                     
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin4ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin5ELEMENT_BM         ) )              ?   DOB04_w[31:0]:      
                           
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin5ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin6ELEMENT_BM         ) )              ?   DOB05_w[31:0]:      
                             
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin6ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin7ELEMENT_BM         ) )              ?   DOB06_w[31:0]:      
                               
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin7ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin8ELEMENT_BM         ) )              ?   DOB07_w[31:0]:      
                           
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= 12'd0)                               && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_BM         ) )                      ?   DOB00_w[63:32]:
                                                        
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_BM         ) )              ?   DOB01_w[63:32]:                    
                           
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin2ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin3ELEMENT_BM         ) )              ?   DOB02_w[63:32]:     
                            
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin3ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin4ELEMENT_BM         ) )              ?   DOB03_w[63:32]:     
                           
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin4ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin5ELEMENT_BM         ) )              ?   DOB04_w[63:32]:     
                         
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin5ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin6ELEMENT_BM         ) )              ?   DOB05_w[63:32]:     
                              
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin6ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin7ELEMENT_BM         ) )              ?   DOB06_w[63:32]:     
                               
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin7ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin8ELEMENT_BM         ) )              ?   DOB07_w[63:32]:     
                                                                                                                                                                                                                                                                     32'd0;
                
                                   
                 
assign Seg_bckgndlayerU_w = (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= 12'd0)                               && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_BM         ) )                      ?   DOB08_w[31:0]:
                                                        
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_BM         ) )              ?   DOB09_w[31:0]:                     
                           
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin2ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin3ELEMENT_BM         ) )              ?   DOB10_w[31:0]:      
                            
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin3ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin4ELEMENT_BM         ) )              ?   DOB11_w[31:0]:      
                           
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin4ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin5ELEMENT_BM         ) )              ?   DOB12_w[31:0]:      
                           
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin5ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin6ELEMENT_BM         ) )              ?   DOB13_w[31:0]:      
                               
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin6ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin7ELEMENT_BM         ) )              ?   DOB14_w[31:0]:      
                               
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin7ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin8ELEMENT_BM         ) )              ?   DOB15_w[31:0]:      
                          
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= 12'd0)                               && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_BM         ) )                      ?   DOB08_w[63:32]:
                                                        
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_BM         ) )              ?   DOB09_w[63:32]:                    
                        
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin2ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin3ELEMENT_BM         ) )              ?   DOB10_w[63:32]:     
                        
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin3ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin4ELEMENT_BM         ) )              ?   DOB11_w[63:32]:     
                        
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin4ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin5ELEMENT_BM         ) )              ?   DOB12_w[63:32]:     
                        
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin5ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin6ELEMENT_BM         ) )              ?   DOB13_w[63:32]:     
                              
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin6ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin7ELEMENT_BM         ) )              ?   DOB14_w[63:32]:     
                               
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin7ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin8ELEMENT_BM         ) )              ?   DOB15_w[63:32]:     
                                                                                                                                                                                                                                                                    32'd0;
                
                                   
assign Seg_bckgndlayerV_w = (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= 12'd0)                               && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_BM         ) )                      ?   DOB16_w[31:0]:                                                     
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_BM         ) )              ?   DOB17_w[31:0]:                                                
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin2ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin3ELEMENT_BM         ) )              ?   DOB18_w[31:0]:      
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin3ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin4ELEMENT_BM         ) )              ?   DOB19_w[31:0]:      
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin4ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin5ELEMENT_BM         ) )              ?   DOB20_w[31:0]:      
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin5ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin6ELEMENT_BM         ) )              ?   DOB21_w[31:0]:      
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin6ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin7ELEMENT_BM         ) )              ?   DOB22_w[31:0]:      
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin7ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin8ELEMENT_BM         ) )              ?   DOB23_w[31:0]:      
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= 12'd0)                               && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_BM         ) )                      ?   DOB16_w[63:32]:
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_BM         ) )              ?   DOB17_w[63:32]:                    
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin2ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin3ELEMENT_BM         ) )              ?   DOB18_w[63:32]:     
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin3ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin4ELEMENT_BM         ) )              ?   DOB19_w[63:32]:     
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin4ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin5ELEMENT_BM         ) )              ?   DOB20_w[63:32]:     
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin5ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin6ELEMENT_BM         ) )              ?   DOB21_w[63:32]:     
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin6ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin7ELEMENT_BM         ) )              ?   DOB22_w[63:32]:     
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin7ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin8ELEMENT_BM         ) )              ?   DOB23_w[63:32]:     
                                                                                                                                                                                                                                                                      32'd0;
                
                                   
assign Seg_bckgndlayerW_w = (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= 12'd0)                               && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_BM         ) )                      ?   DOB24_w[31:0]:
                                                        
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_BM         ) )              ?   DOB25_w[31:0]:                     
                           
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin2ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin3ELEMENT_BM         ) )              ?   DOB26_w[31:0]:      
                           
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin3ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin4ELEMENT_BM         ) )              ?   DOB27_w[31:0]:      
                          
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin4ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin5ELEMENT_BM         ) )              ?   DOB28_w[31:0]:      
                         
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin5ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin6ELEMENT_BM         ) )              ?   DOB29_w[31:0]:      
                              
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin6ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin7ELEMENT_BM         ) )              ?   DOB30_w[31:0]:      
                               
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b0)   &&  (pixelidx_Quarter_r >= `PIXELNUMin7ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin8ELEMENT_BM         ) )              ?   DOB31_w[31:0]:      
                         
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= 12'd0)                               && (pixelidx_Quarter_r < `PIXELNUMin1ELEMENT_BM         ) )                      ?   DOB24_w[63:32]:
                                                        
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin1ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin2ELEMENT_BM         ) )              ?   DOB25_w[63:32]:                    
                         
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin2ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin3ELEMENT_BM         ) )              ?   DOB26_w[63:32]:     
                          
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin3ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin4ELEMENT_BM         ) )              ?   DOB27_w[63:32]:     
                         
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin4ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin5ELEMENT_BM         ) )              ?   DOB28_w[63:32]:     
                          
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin5ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin6ELEMENT_BM         ) )              ?   DOB29_w[63:32]:     
                              
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin6ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin7ELEMENT_BM         ) )              ?   DOB30_w[63:32]:     
                               
                            (   (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_r[0] == 1'b1)   &&  (pixelidx_Quarter_r >= `PIXELNUMin7ELEMENT_BM)                      && (pixelidx_Quarter_r < `PIXELNUMin8ELEMENT_BM         ) )              ?   DOB31_w[63:32]:     
                                                                                                                                                                                                                                                                     32'd0;
                
                                   
        
       
assign Seg_curpixelY_1ws = (seg_stall)?Seg_curpixelY_1r :Seg_curpixelY_w;
assign Seg_curpixelY_2ws = (seg_stall)?Seg_curpixelY_2r :Seg_curpixelY_1r;
assign Seg_curpixelU_1ws = (seg_stall)?Seg_curpixelU_1r :Seg_curpixelU_w;
assign Seg_curpixelU_2ws = (seg_stall)?Seg_curpixelU_2r :Seg_curpixelU_1r;
assign Seg_curpixelV_1ws = (seg_stall)?Seg_curpixelV_1r :Seg_curpixelV_w;
assign Seg_curpixelV_2ws = (seg_stall)?Seg_curpixelV_2r :Seg_curpixelV_1r;
assign Seg_bckgndlayerY_1ws = (seg_stall)?Seg_bckgndlayerY_1r :Seg_bckgndlayerY_w;
assign Seg_bckgndlayerY_2ws = (seg_stall)?Seg_bckgndlayerY_2r :Seg_bckgndlayerY_1r;
assign Seg_bckgndlayerU_1ws = (seg_stall)?Seg_bckgndlayerU_1r :Seg_bckgndlayerU_w;
assign Seg_bckgndlayerU_2ws = (seg_stall)?Seg_bckgndlayerU_2r :Seg_bckgndlayerU_1r;
assign Seg_bckgndlayerV_1ws = (seg_stall)?Seg_bckgndlayerV_1r :Seg_bckgndlayerV_w;
assign Seg_bckgndlayerV_2ws = (seg_stall)?Seg_bckgndlayerV_2r :Seg_bckgndlayerV_1r;
assign Seg_bckgndlayerW_1ws = (seg_stall)?Seg_bckgndlayerW_1r :Seg_bckgndlayerW_w;
assign Seg_bckgndlayerW_2ws = (seg_stall)?Seg_bckgndlayerW_2r :Seg_bckgndlayerW_1r;

always@(posedge clk or posedge reset)
begin
      if(reset)
      begin
         Seg_curpixelY_1r <= 8'd0;                            
         Seg_curpixelY_2r <= 8'd0;
         Seg_curpixelU_1r <= 8'd0;                            
         Seg_curpixelU_2r <= 8'd0;
         Seg_curpixelV_1r <= 8'd0;                            
         Seg_curpixelV_2r <= 8'd0;
         Seg_bckgndlayerY_1r <= 32'd0;                            
         Seg_bckgndlayerY_2r <= 32'd0;
         Seg_bckgndlayerU_1r <= 32'd0;                            
         Seg_bckgndlayerU_2r <= 32'd0;
         Seg_bckgndlayerV_1r <= 32'd0;                            
         Seg_bckgndlayerV_2r <= 32'd0;
         Seg_bckgndlayerW_1r <= 32'd0;                            
         Seg_bckgndlayerW_2r <= 32'd0;
      
      end
      else if(seg_enable_i)
      begin
         Seg_curpixelY_1r <=  Seg_curpixelY_1ws;
         Seg_curpixelY_2r <=  Seg_curpixelY_2ws;
         Seg_curpixelU_1r <=  Seg_curpixelU_1ws;
         Seg_curpixelU_2r <=  Seg_curpixelU_2ws;
         Seg_curpixelV_1r <=  Seg_curpixelV_1ws;
         Seg_curpixelV_2r <=  Seg_curpixelV_2ws;
         Seg_bckgndlayerY_1r <=  Seg_bckgndlayerY_1ws;
         Seg_bckgndlayerY_2r <=  Seg_bckgndlayerY_2ws;
         Seg_bckgndlayerU_1r <=  Seg_bckgndlayerU_1ws;
         Seg_bckgndlayerU_2r <=  Seg_bckgndlayerU_2ws;
         Seg_bckgndlayerV_1r <=  Seg_bckgndlayerV_1ws;
         Seg_bckgndlayerV_2r <=  Seg_bckgndlayerV_2ws;
         Seg_bckgndlayerW_1r <=  Seg_bckgndlayerW_1ws;
         Seg_bckgndlayerW_2r <=  Seg_bckgndlayerW_2ws;
        
      end
end                   

assign Updated_BMY_32to64_ws =    (seg_stall)? Updated_BMY_32to64_r:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= 12'd0)                  && (pixelidx_Quarter_4r < `PIXELNUMin1ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerY           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin1ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin2ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerY           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin2ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin3ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerY           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin3ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin4ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerY           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin4ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin5ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerY           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin5ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin6ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerY           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin6ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin7ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerY           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin7ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin8ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerY           }:
                                                                                                                                                                                                                        {Seg_updatedbckgndlayerY,        Updated_BMY_32to64_r [31:0]     };
assign Updated_BMU_32to64_ws =    (seg_stall)? Updated_BMU_32to64_r:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= 12'd0)                  && (pixelidx_Quarter_4r < `PIXELNUMin1ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerU           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin1ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin2ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerU           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin2ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin3ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerU           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin3ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin4ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerU           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin4ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin5ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerU           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin5ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin6ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerU           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin6ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin7ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerU           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin7ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin8ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerU           }:
                                                                                                                                                                                                                        {Seg_updatedbckgndlayerU,        Updated_BMU_32to64_r [31:0]     };
assign Updated_BMV_32to64_ws =    (seg_stall)?  Updated_BMV_32to64_r:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= 12'd0)                  && (pixelidx_Quarter_4r < `PIXELNUMin1ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerV           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin1ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin2ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerV           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin2ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin3ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerV           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin3ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin4ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerV           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin4ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin5ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerV           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin5ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin6ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerV           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin6ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin7ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerV           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin7ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin8ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerV           }:
                                                                                                                                                                                                                        {Seg_updatedbckgndlayerV,        Updated_BMV_32to64_r [31:0]     };
assign Updated_BMW_32to64_ws =    (seg_stall)? Updated_BMW_32to64_r:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= 12'd0)                  && (pixelidx_Quarter_4r < `PIXELNUMin1ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerW           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin1ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin2ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerW           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin2ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin3ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerW           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin3ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin4ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerW           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin4ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin5ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerW           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin5ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin6ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerW           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin6ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin7ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerW           }:
                                 ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_Quarter_4r[0] == 1'b0 ) && (pixelidx_Quarter_4r >= `PIXELNUMin7ELEMENT_BM) && (pixelidx_Quarter_4r < `PIXELNUMin8ELEMENT_BM) ) ?     {32'd0,                                 Seg_updatedbckgndlayerW           }:
                                                                                                                                                                                                                        {Seg_updatedbckgndlayerW,        Updated_BMW_32to64_r [31:0]     };

assign Mask_1to64_ws = (seg_stall)?                                                                                                                              Mask_1to64_r:
                       ( (SegState == `SEGSTATE_PROCESSING) && (pixelidx_5r >= 12'd0) && (pixelidx_5r < `PIXELNUMin1ELEMENT_MASK) )?     (Mask_1to64_r << 1) +   {63'd0, Seg_mask}:
                                                                                                                                                             Mask_1to64_r;      
                                         
                


always@(posedge clk or posedge reset)
begin
      if(reset)
      begin
        Updated_BMY_32to64_r <= 64'd0;
        Updated_BMU_32to64_r <= 64'd0;
        Updated_BMV_32to64_r <= 64'd0;
        Updated_BMW_32to64_r <= 64'd0;
        Mask_1to64_r         <= 64'd0;
      end
      else if(seg_enable_i)
      begin
         Updated_BMY_32to64_r <= Updated_BMY_32to64_ws;
         Updated_BMU_32to64_r <= Updated_BMU_32to64_ws;
         Updated_BMV_32to64_r <= Updated_BMV_32to64_ws;
         Updated_BMW_32to64_r <= Updated_BMW_32to64_ws;
         Mask_1to64_r         <=    Mask_1to64_ws;     
      end
end                              
                                         
                
assign Seg_DataOut_Sel   =  ( (SegState == `SEGSTATE_OUTPUT_BM_Y) && (Count_BMYUVW_ADDR_r >= 7'd0)               && (Count_BMYUVW_ADDR_r < `ADDRNUMin1ELEMENT))? DOB00_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_Y) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin1ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin2ELEMENT)) ? DOB01_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_Y) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin2ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin3ELEMENT)) ? DOB02_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_Y) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin3ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin4ELEMENT)) ? DOB03_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_Y) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin4ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin5ELEMENT)) ? DOB04_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_Y) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin5ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin6ELEMENT)) ? DOB05_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_Y) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin6ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin7ELEMENT)) ? DOB06_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_Y) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin7ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin8ELEMENT)) ? DOB07_w:
                                                                                                                                                               
                        ( (SegState == `SEGSTATE_OUTPUT_BM_U) && (Count_BMYUVW_ADDR_r >= 7'd0)               && (Count_BMYUVW_ADDR_r < `ADDRNUMin1ELEMENT))? DOB08_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_U) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin1ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin2ELEMENT)) ? DOB09_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_U) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin2ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin3ELEMENT)) ? DOB10_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_U) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin3ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin4ELEMENT)) ? DOB11_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_U) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin4ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin5ELEMENT)) ? DOB12_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_U) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin5ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin6ELEMENT)) ? DOB13_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_U) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin6ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin7ELEMENT)) ? DOB14_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_U) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin7ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin8ELEMENT)) ? DOB15_w:
                                                                                                                                                               
                        ( (SegState == `SEGSTATE_OUTPUT_BM_V) && (Count_BMYUVW_ADDR_r >= 7'd0)               && (Count_BMYUVW_ADDR_r < `ADDRNUMin1ELEMENT))? DOB16_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_V) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin1ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin2ELEMENT)) ? DOB17_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_V) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin2ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin3ELEMENT)) ? DOB18_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_V) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin3ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin4ELEMENT)) ? DOB19_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_V) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin4ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin5ELEMENT)) ? DOB20_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_V) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin5ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin6ELEMENT)) ? DOB21_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_V) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin6ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin7ELEMENT)) ? DOB22_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_V) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin7ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin8ELEMENT)) ? DOB23_w:
                                                                                                                                                               
                        ( (SegState == `SEGSTATE_OUTPUT_BM_W) && (Count_BMYUVW_ADDR_r >= 7'd0)               && (Count_BMYUVW_ADDR_r < `ADDRNUMin1ELEMENT))? DOB24_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_W) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin1ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin2ELEMENT)) ? DOB25_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_W) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin2ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin3ELEMENT)) ? DOB26_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_W) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin3ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin4ELEMENT)) ? DOB27_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_W) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin4ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin5ELEMENT)) ? DOB28_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_W) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin5ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin6ELEMENT)) ? DOB29_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_W) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin6ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin7ELEMENT)) ? DOB30_w:
                        ( (SegState == `SEGSTATE_OUTPUT_BM_W) && (Count_BMYUVW_ADDR_r >= `ADDRNUMin7ELEMENT) && (Count_BMYUVW_ADDR_r < `ADDRNUMin8ELEMENT)) ? DOB31_w:
                
                        ((SegState == `SEGSTATE_OUTPUT_MASK) && ( Count_MASKOUT_ADDR_r >= 4'd0) && ( Count_MASKOUT_ADDR_r<       `ADDRNUMin1ELEMENT    )) ? DOB38_w:    
                                                                                                                                                            64'd0;               
                                                         
                                         
                                         
                                         
                
                

          
/***********************************/
/*******Control when Tracking*******/
/***********************************/
  
                          
   assign reset_pazen = (~accumulation_histogram_enable) || reset;
   assign pazen_enable = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM || Mode_i == `ACCUMULATION_TARGET_HISTOGRAM || Mode_i == `ACCUMULATION_CANDIDATE_BACKGROUND_HISTOGRAM || Mode_i == `ACCUMULATION_TARGET_BACKGROUND_HISTOGRAM) && (histogram_accumulation_state_r == `BUFFER_COUNT_BU || histogram_accumulation_state_r == `BUFFER_OPER || histogram_accumulation_state_r == `BUFFER_CLEAN) ? 1'b1 : 1'b0;
   assign distance_compute_enable = (Mode_i == `COMPUTE_DISTANCE) ? 1'b1 : 1'b0;
   
   assign distanceY_w = (Mode_i == `COMPUTE_DISTANCE) ? distance_DC_Y : distanceY_r;
   assign distanceU_w = (Mode_i == `COMPUTE_DISTANCE) ? distance_DC_U : distanceU_r;
   assign distanceV_w = (Mode_i == `COMPUTE_DISTANCE) ? distance_DC_V : distanceV_r;
   assign distanceY = distanceY_r;
   assign distanceU = distanceU_r;
   assign distanceV = distanceV_r;
   
   assign total_histogram_C_y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM) ? total_histogram_pazen_y_w : total_histogram_C_y_r;
   assign total_histogram_T_y_w = (Mode_i == `ACCUMULATION_TARGET_HISTOGRAM) ? total_histogram_pazen_y_w : ((Mode_i == `SAVE_LOAD_FROM_DMA ) ? total_target_histogram_y_r : total_histogram_T_y_r);
   assign total_histogram_C_u_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM) ? total_histogram_pazen_u_w : total_histogram_C_u_r;
   assign total_histogram_T_u_w = (Mode_i == `ACCUMULATION_TARGET_HISTOGRAM) ? total_histogram_pazen_u_w : ((Mode_i == `SAVE_LOAD_FROM_DMA ) ? total_target_histogram_u_r : total_histogram_T_u_r);
   assign total_histogram_C_v_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM) ? total_histogram_pazen_v_w : total_histogram_C_v_r;
   assign total_histogram_T_v_w = (Mode_i == `ACCUMULATION_TARGET_HISTOGRAM) ? total_histogram_pazen_v_w : ((Mode_i == `SAVE_LOAD_FROM_DMA ) ? total_target_histogram_v_r : total_histogram_T_v_r);



   assign total_candidate_histogram_Y_out = total_histogram_C_y_r;
   assign total_candidate_histogram_U_out = total_histogram_C_u_r;
   assign total_candidate_histogram_V_out = total_histogram_C_v_r;
   assign total_target_histogram_Y_out = total_histogram_T_y_r;
   assign total_target_histogram_U_out = total_histogram_T_u_r;
   assign total_target_histogram_V_out = total_histogram_T_v_r;


/******************************************************************************************************************************/                                
/**********************************      Reconfigurable Memory Array RSPEs   **************************************************/
/******************************************************************************************************************************/                                
/******************************************************************************************************************************/
//                                       CONTROL OF REGISTER FILE
//Control of Two Port register file
//Axx_w(4 bits) : Address A of memory no.xx
//Bxx_w(4 bits) : Address B of memory no.xx
//DIAxx_w(64 bits) : Write data into memory no.xx by port A
//DIBxx_w(64 bits) : Write data into memory no.xx by port B
//MUXAxx_w(4 bits) : Write which part of 16 bits into memory no.xx by port A
//MUXBxx_w(4 bits) : Write which part of 16 bits into memory no.xx by port B
//WEAN_w : Write enable (42 bits) of port A, 0: write 
//WEBN_w : Write enable (42 bits) of port B, 0: write 
//OEA_w : Read enable (42 bits) of port A
//OEB_w : Read enable (42 bits) of port A
//choose_reg_w : Which registe is choosed to be actived (42 bits)
/******************************************************************************************************************************/
          
   always@(*)
   begin  
      case(Mode_i)
         `IDLE:
         begin
            A00_w = 4'd0;
            A01_w = 4'd0; 
            A02_w = 4'd0; 
            A03_w = 4'd0; 
            A04_w = 4'd0; 
            A05_w = 4'd0; 
            A06_w = 4'd0; 
            A07_w = 4'd0; 
            A08_w = 4'd0; 
            A09_w = 4'd0; 
            A10_w = 4'd0; 
            A11_w = 4'd0; 
            A12_w = 4'd0; 
            A13_w = 4'd0; 
            A14_w = 4'd0; 
            A15_w = 4'd0; 
            A16_w = 4'd0; 
            A17_w = 4'd0; 
            A18_w = 4'd0; 
            A19_w = 4'd0; 
            A20_w = 4'd0; 
            A21_w = 4'd0;
            A22_w = 4'd0;
            A23_w = 4'd0;
            A24_w = 4'd0;
            A25_w = 4'd0;
            A26_w = 4'd0;
            A27_w = 4'd0;
            A28_w = 4'd0;
            A29_w = 4'd0;
            A30_w = 4'd0;
            A31_w = 4'd0;
            A32_w = 4'd0;
            A33_w = 4'd0;
            A34_w = 4'd0;
            A35_w = 4'd0;
            A36_w = 4'd0;
            A37_w = 4'd0;
            A38_w = 4'd0;
            A39_w = 4'd0;
            A40_w = 4'd0;
            A41_w = 4'd0;
            A42_w = 4'd0;
            A43_w = 4'd0;
            A44_w = 4'd0;
            A45_w = 4'd0;
            A46_w = 4'd0;
            A47_w = 4'd0;
            B00_w = 4'd0;
            B01_w = 4'd0;
            B02_w = 4'd0;
            B03_w = 4'd0;
            B04_w = 4'd0;
            B05_w = 4'd0;
            B06_w = 4'd0;
            B07_w = 4'd0;
            B08_w = 4'd0;
            B09_w = 4'd0;
            B10_w = 4'd0;
            B11_w = 4'd0;
            B12_w = 4'd0;
            B13_w = 4'd0;
            B14_w = 4'd0;
            B15_w = 4'd0;
            B16_w = 4'd0;
            B17_w = 4'd0;
            B18_w = 4'd0;
            B19_w = 4'd0;
            B20_w = 4'd0;
            B21_w = 4'd0;                    
            B22_w = 4'd0;                    
            B23_w = 4'd0;                    
            B24_w = 4'd0;                    
            B25_w = 4'd0;                    
            B26_w = 4'd0;                    
            B27_w = 4'd0;                    
            B28_w = 4'd0;                    
            B29_w = 4'd0;                    
            B30_w = 4'd0;                    
            B31_w = 4'd0;                    
            B32_w = 4'd0;                    
            B33_w = 4'd0;                    
            B34_w = 4'd0;                    
            B35_w = 4'd0;                    
            B36_w = 4'd0;                    
            B37_w = 4'd0;                    
            B38_w = 4'd0;                    
            B39_w = 4'd0;                    
            B40_w = 4'd0;                    
            B41_w = 4'd0;                    
            B42_w = 4'd0;                    
            B43_w = 4'd0;                    
            B44_w = 4'd0;                    
            B45_w = 4'd0;                    
            B46_w = 4'd0;                    
            B47_w = 4'd0;                    
            DIA00_w = 64'd0;
            DIA01_w = 64'd0;
            DIA02_w = 64'd0;
            DIA03_w = 64'd0;
            DIA04_w = 64'd0;
            DIA05_w = 64'd0;
            DIA06_w = 64'd0;
            DIA07_w = 64'd0;
            DIA08_w = 64'd0;
            DIA09_w = 64'd0;
            DIA10_w = 64'd0;
            DIA11_w = 64'd0;
            DIA12_w = 64'd0;
            DIA13_w = 64'd0;
            DIA14_w = 64'd0;
            DIA15_w = 64'd0;
            DIA16_w = 64'd0;
            DIA17_w = 64'd0;
            DIA18_w = 64'd0;
            DIA19_w = 64'd0;
            DIA20_w = 64'd0;
            DIA21_w = 64'd0;
            DIA22_w = 64'd0;
            DIA23_w = 64'd0;
            DIA24_w = 64'd0;
            DIA25_w = 64'd0;
            DIA26_w = 64'd0;
            DIA27_w = 64'd0;
            DIA28_w = 64'd0;
            DIA29_w = 64'd0;
            DIA30_w = 64'd0;
            DIA31_w = 64'd0;
            DIA32_w = 64'd0;
            DIA33_w = 64'd0;
            DIA34_w = 64'd0;
            DIA35_w = 64'd0;
            DIA36_w = 64'd0;
            DIA37_w = 64'd0;
            DIA38_w = 64'd0;
            DIA39_w = 64'd0;
            DIA40_w = 64'd0;
            DIA41_w = 64'd0;
            DIA42_w = 64'd0;
            DIA43_w = 64'd0;
            DIA44_w = 64'd0;
            DIA45_w = 64'd0;
            DIA46_w = 64'd0;
            DIA47_w = 64'd0;
            DIB00_w = 64'd0;
            DIB01_w = 64'd0;
            DIB02_w = 64'd0;
            DIB03_w = 64'd0;
            DIB04_w = 64'd0;
            DIB05_w = 64'd0;
            DIB06_w = 64'd0;
            DIB07_w = 64'd0;
            DIB08_w = 64'd0;
            DIB09_w = 64'd0;
            DIB10_w = 64'd0;
            DIB11_w = 64'd0;
            DIB12_w = 64'd0;
            DIB13_w = 64'd0;
            DIB14_w = 64'd0;
            DIB15_w = 64'd0;
            DIB16_w = 64'd0;
            DIB17_w = 64'd0;
            DIB18_w = 64'd0;
            DIB19_w = 64'd0;
            DIB20_w = 64'd0;
            DIB21_w = 64'd0;
            DIB22_w = 64'd0;
            DIB23_w = 64'd0;
            DIB24_w = 64'd0;
            DIB25_w = 64'd0;
            DIB26_w = 64'd0;
            DIB27_w = 64'd0;
            DIB28_w = 64'd0;
            DIB29_w = 64'd0;
            DIB30_w = 64'd0;
            DIB31_w = 64'd0;
            DIB32_w = 64'd0;
            DIB33_w = 64'd0;
            DIB34_w = 64'd0;
            DIB35_w = 64'd0;
            DIB36_w = 64'd0;
            DIB37_w = 64'd0;
            DIB38_w = 64'd0;
            DIB39_w = 64'd0;
            DIB40_w = 64'd0;
            DIB41_w = 64'd0;
            DIB42_w = 64'd0;
            DIB43_w = 64'd0;
            DIB44_w = 64'd0;
            DIB45_w = 64'd0;
            DIB46_w = 64'd0;
            DIB47_w = 64'd0;
            MUXA00_w = 4'd0;
            MUXA01_w = 4'd0;
            MUXA02_w = 4'd0;
            MUXA03_w = 4'd0;
            MUXA04_w = 4'd0;
            MUXA05_w = 4'd0;
            MUXA06_w = 4'd0;
            MUXA07_w = 4'd0;
            MUXA08_w = 4'd0;
            MUXA09_w = 4'd0;
            MUXA10_w = 4'd0;
            MUXA11_w = 4'd0;
            MUXA12_w = 4'd0;
            MUXA13_w = 4'd0;
            MUXA14_w = 4'd0;
            MUXA15_w = 4'd0;
            MUXA16_w = 4'd0;
            MUXA17_w = 4'd0;
            MUXA18_w = 4'd0;
            MUXA19_w = 4'd0;
            MUXA20_w = 4'd0;
            MUXA21_w = 4'd0;
            MUXA22_w = 4'd0;
            MUXA23_w = 4'd0;
            MUXA24_w = 4'd0;
            MUXA25_w = 4'd0;
            MUXA26_w = 4'd0;
            MUXA27_w = 4'd0;
            MUXA28_w = 4'd0;
            MUXA29_w = 4'd0;
            MUXA30_w = 4'd0;
            MUXA31_w = 4'd0;
            MUXA32_w = 4'd0;
            MUXA33_w = 4'd0;
            MUXA34_w = 4'd0;
            MUXA35_w = 4'd0;
            MUXA36_w = 4'd0;
            MUXA37_w = 4'd0;
            MUXA38_w = 4'd0;
            MUXA39_w = 4'd0;
            MUXA40_w = 4'd0;
            MUXA41_w = 4'd0;
            MUXA42_w = 4'd0;
            MUXA43_w = 4'd0;
            MUXA44_w = 4'd0;
            MUXA45_w = 4'd0;
            MUXA46_w = 4'd0;
            MUXA47_w = 4'd0;
            MUXB00_w = 4'd0;
            MUXB01_w = 4'd0;
            MUXB02_w = 4'd0;
            MUXB03_w = 4'd0;
            MUXB04_w = 4'd0;
            MUXB05_w = 4'd0;
            MUXB06_w = 4'd0;
            MUXB07_w = 4'd0;
            MUXB08_w = 4'd0;
            MUXB09_w = 4'd0;
            MUXB10_w = 4'd0;
            MUXB11_w = 4'd0;
            MUXB12_w = 4'd0;
            MUXB13_w = 4'd0;
            MUXB14_w = 4'd0;
            MUXB15_w = 4'd0;
            MUXB16_w = 4'd0;
            MUXB17_w = 4'd0;
            MUXB18_w = 4'd0;
            MUXB19_w = 4'd0;
            MUXB20_w = 4'd0;
            MUXB21_w = 4'd0;
            MUXB22_w = 4'd0;
            MUXB23_w = 4'd0;
            MUXB24_w = 4'd0;
            MUXB25_w = 4'd0;
            MUXB26_w = 4'd0;
            MUXB27_w = 4'd0;
            MUXB28_w = 4'd0;
            MUXB29_w = 4'd0;
            MUXB30_w = 4'd0;
            MUXB31_w = 4'd0;
            MUXB32_w = 4'd0;
            MUXB33_w = 4'd0;
            MUXB34_w = 4'd0;
            MUXB35_w = 4'd0;
            MUXB36_w = 4'd0;
            MUXB37_w = 4'd0;
            MUXB38_w = 4'd0;
            MUXB39_w = 4'd0;
            MUXB40_w = 4'd0;
            MUXB41_w = 4'd0;
            MUXB42_w = 4'd0;
            MUXB43_w = 4'd0;
            MUXB44_w = 4'd0;
            MUXB45_w = 4'd0;
            MUXB46_w = 4'd0;
            MUXB47_w = 4'd0;
            WEAN_w = 48'hFFFFFFFFFFFF;
            WEBN_w = 48'hFFFFFFFFFFFF;
            OEA_w = 48'd0;
            OEB_w = 48'd0;
            choose_reg_A_w = 48'd0;
            choose_reg_B_w = 48'd0;
           
            
            
            
            
            
         end
         
         `SEGMENTATION_MODE://only use 8x3 = 24 basic elements as input buffers
         begin
            A00_w = BMY_IObuffer_A00_w;
            A01_w = BMY_IObuffer_A01_w; 
            A02_w = BMY_IObuffer_A02_w; 
            A03_w = BMY_IObuffer_A03_w; 
            A04_w = BMY_IObuffer_A04_w; 
            A05_w = BMY_IObuffer_A05_w; 
            A06_w = BMY_IObuffer_A06_w;           
            A07_w = BMY_IObuffer_A07_w; 
            A08_w = BMU_IObuffer_A08_w; 
            A09_w = BMU_IObuffer_A09_w; 
            A10_w = BMU_IObuffer_A10_w; 
            A11_w = BMU_IObuffer_A11_w; 
            A12_w = BMU_IObuffer_A12_w; 
            A13_w = BMU_IObuffer_A13_w; 
            A14_w = BMU_IObuffer_A14_w; 
            A15_w = BMU_IObuffer_A15_w; 
            A16_w = BMV_IObuffer_A16_w; 
            A17_w = BMV_IObuffer_A17_w; 
            A18_w = BMV_IObuffer_A18_w; 
            A19_w = BMV_IObuffer_A19_w; 
            A20_w = BMV_IObuffer_A20_w; 
            A21_w = BMV_IObuffer_A21_w;
            A22_w = BMV_IObuffer_A22_w;
            A23_w = BMV_IObuffer_A23_w;
            A24_w = BMW_IObuffer_A24_w;
            A25_w = BMW_IObuffer_A25_w;                         
            A26_w = BMW_IObuffer_A26_w;                         
            A27_w = BMW_IObuffer_A27_w;                         
            A28_w = BMW_IObuffer_A28_w;                         
            A29_w = BMW_IObuffer_A29_w;                         
            A30_w = BMW_IObuffer_A30_w;                         
            A31_w = BMW_IObuffer_A31_w;                         
            A32_w = CurY_Ibuffer_A32_w;                       
            A33_w = CurY_Ibuffer_A33_w;                       
            A34_w = CurU_Ibuffer_A34_w;                       
            A35_w = CurU_Ibuffer_A35_w;                       
            A36_w = CurV_Ibuffer_A36_w;                      
            A37_w = CurV_Ibuffer_A37_w;                      
            A38_w = Mask_Obuffer_A38_w;                       
            A39_w = 4'd0;                                     
            A40_w = 4'd0;
            A41_w = 4'd0;
            
            A42_w = 4'd0;
            A43_w = 4'd0;
            A44_w = 4'd0;
            A45_w = 4'd0;
            A46_w = 4'd0;
            A47_w = 4'd0;
            
            B00_w = BMY_IObuffer_B00_w;
            B01_w = BMY_IObuffer_B01_w;
            B02_w = BMY_IObuffer_B02_w;
            B03_w = BMY_IObuffer_B03_w;
            B04_w = BMY_IObuffer_B04_w;
            B05_w = BMY_IObuffer_B05_w;
            B06_w = BMY_IObuffer_B06_w;
            B07_w = BMY_IObuffer_B07_w;
            B08_w = BMU_IObuffer_B08_w;
            B09_w = BMU_IObuffer_B09_w;
            B10_w = BMU_IObuffer_B10_w;
            B11_w = BMU_IObuffer_B11_w;
            B12_w = BMU_IObuffer_B12_w;
            B13_w = BMU_IObuffer_B13_w;
            B14_w = BMU_IObuffer_B14_w;
            B15_w = BMU_IObuffer_B15_w;
            B16_w = BMV_IObuffer_B16_w;
            B17_w = BMV_IObuffer_B17_w;
            B18_w = BMV_IObuffer_B18_w;
            B19_w = BMV_IObuffer_B19_w;
            B20_w = BMV_IObuffer_B20_w;
            B21_w = BMV_IObuffer_B21_w;                    
            B22_w = BMV_IObuffer_B22_w;                    
            B23_w = BMV_IObuffer_B23_w;                    
            B24_w = BMW_IObuffer_B24_w;          
            B25_w = BMW_IObuffer_B25_w;            
            B26_w = BMW_IObuffer_B26_w;            
            B27_w = BMW_IObuffer_B27_w;            
            B28_w = BMW_IObuffer_B28_w;                                                 
            B29_w = BMW_IObuffer_B29_w;                                                 
            B30_w = BMW_IObuffer_B30_w;                                                 
            B31_w = BMW_IObuffer_B31_w;                                                 
            B32_w = CurY_Ibuffer_B32_w;                                                
            B33_w = CurY_Ibuffer_B33_w;                                                
            B34_w = CurU_Ibuffer_B34_w;                                                
            B35_w = CurU_Ibuffer_B35_w;                                                
            B36_w = CurV_Ibuffer_B36_w;                                                              
            B37_w = CurV_Ibuffer_B37_w;                                                              
            B38_w = Mask_Obuffer_B38_w;                                                              
            B39_w = 4'd0;                                                         
            B40_w = 4'd0;                                          
            B41_w = 4'd0;                                          
            
            B42_w = 4'd0;                    
            B43_w = 4'd0;                    
            B44_w = 4'd0;                    
            B45_w = 4'd0;                    
            B46_w = 4'd0;                    
            B47_w = 4'd0;  
             
            
                                       
            DIA00_w = BMY_IObuffer_DIA00_w;
            DIA01_w = BMY_IObuffer_DIA01_w;
            DIA02_w = BMY_IObuffer_DIA02_w;
            DIA03_w = BMY_IObuffer_DIA03_w;
            DIA04_w = BMY_IObuffer_DIA04_w;
            DIA05_w = BMY_IObuffer_DIA05_w;
            DIA06_w = BMY_IObuffer_DIA06_w;            
            DIA07_w = BMY_IObuffer_DIA07_w;
            DIA08_w = BMU_IObuffer_DIA08_w;
            DIA09_w = BMU_IObuffer_DIA09_w;
            DIA10_w = BMU_IObuffer_DIA10_w;
            DIA11_w = BMU_IObuffer_DIA11_w;
            DIA12_w = BMU_IObuffer_DIA12_w;
            DIA13_w = BMU_IObuffer_DIA13_w;
            DIA14_w = BMU_IObuffer_DIA14_w;
            DIA15_w = BMU_IObuffer_DIA15_w;
            DIA16_w = BMV_IObuffer_DIA16_w;
            DIA17_w = BMV_IObuffer_DIA17_w;
            DIA18_w = BMV_IObuffer_DIA18_w;
            DIA19_w = BMV_IObuffer_DIA19_w;
            DIA20_w = BMV_IObuffer_DIA20_w;
            DIA21_w = BMV_IObuffer_DIA21_w;
            DIA22_w = BMV_IObuffer_DIA22_w;
            DIA23_w = BMV_IObuffer_DIA23_w;
            DIA24_w = BMW_IObuffer_DIA24_w;                                                                      
            DIA25_w = BMW_IObuffer_DIA25_w;                                                                
            DIA26_w = BMW_IObuffer_DIA26_w;                                                                
            DIA27_w = BMW_IObuffer_DIA27_w;                                                                
            DIA28_w = BMW_IObuffer_DIA28_w;                                                         
            DIA29_w = BMW_IObuffer_DIA29_w;                                                             
            DIA30_w = BMW_IObuffer_DIA30_w;                                                             
            DIA31_w = BMW_IObuffer_DIA31_w;                                                             
            DIA32_w = CurY_Ibuffer_DIA32_w;                                                             
            DIA33_w = CurY_Ibuffer_DIA33_w;                                                             
            DIA34_w = CurU_Ibuffer_DIA34_w;                                                             
            DIA35_w = CurU_Ibuffer_DIA35_w;                                                             
            DIA36_w = CurV_Ibuffer_DIA36_w;                                                             
            DIA37_w = CurV_Ibuffer_DIA37_w;                                                          
            DIA38_w = Mask_Obuffer_DIA38_w;                                                          
            DIA39_w = 64'd0;
            DIA40_w = 64'd0;
            DIA41_w = 64'd0;
            
            DIA42_w = 64'd0;
            DIA43_w = 64'd0;
            DIA44_w = 64'd0;
            DIA45_w = 64'd0;
            DIA46_w = 64'd0;
            DIA47_w = 64'd0;
            
            
            
            DIB00_w = BMY_IObuffer_DIB00_w;
            DIB01_w = BMY_IObuffer_DIB01_w;
            DIB02_w = BMY_IObuffer_DIB02_w;
            DIB03_w = BMY_IObuffer_DIB03_w;
            DIB04_w = BMY_IObuffer_DIB04_w;
            DIB05_w = BMY_IObuffer_DIB05_w;
            DIB06_w = BMY_IObuffer_DIB06_w;    
            DIB07_w = BMY_IObuffer_DIB07_w;
            DIB08_w = BMU_IObuffer_DIB08_w;
            DIB09_w = BMU_IObuffer_DIB09_w;
            DIB10_w = BMU_IObuffer_DIB10_w;
            DIB11_w = BMU_IObuffer_DIB11_w;
            DIB12_w = BMU_IObuffer_DIB12_w;
            DIB13_w = BMU_IObuffer_DIB13_w;
            DIB14_w = BMU_IObuffer_DIB14_w;
            DIB15_w = BMU_IObuffer_DIB15_w;
            DIB16_w = BMV_IObuffer_DIB16_w;
            DIB17_w = BMV_IObuffer_DIB17_w;
            DIB18_w = BMV_IObuffer_DIB18_w;
            DIB19_w = BMV_IObuffer_DIB19_w;
            DIB20_w = BMV_IObuffer_DIB20_w;
            DIB21_w = BMV_IObuffer_DIB21_w;
            DIB22_w = BMV_IObuffer_DIB22_w;
            DIB23_w = BMV_IObuffer_DIB23_w;
            DIB24_w = BMW_IObuffer_DIB24_w;
            DIB25_w = BMW_IObuffer_DIB25_w;
            DIB26_w = BMW_IObuffer_DIB26_w;                                                                                                          
            DIB27_w = BMW_IObuffer_DIB27_w;                                                                                                        
            DIB28_w = BMW_IObuffer_DIB28_w;                                                                                                        
            DIB29_w = BMW_IObuffer_DIB29_w;                                                                                                        
            DIB30_w = BMW_IObuffer_DIB30_w;                                                                                                        
            DIB31_w = BMW_IObuffer_DIB31_w;                                                                                                          
            DIB32_w = CurY_Ibuffer_DIB32_w;                                                                                                          
            DIB33_w = CurY_Ibuffer_DIB33_w;                                                                                                          
            DIB34_w = CurU_Ibuffer_DIB34_w;                                                                                                          
            DIB35_w = CurU_Ibuffer_DIB35_w;                                                                                                          
            DIB36_w = CurV_Ibuffer_DIB36_w;                                                                                                           
            DIB37_w = CurV_Ibuffer_DIB37_w;                                                                                                           
            DIB38_w = Mask_Obuffer_DIB38_w;                                                                                                             
            DIB39_w = 64'd0;                                                                                                
            DIB40_w = 64'd0;                                                                                                
            DIB41_w = 64'd0;
            
            DIB42_w = 64'd0;
            DIB43_w = 64'd0;
            DIB44_w = 64'd0;
            DIB45_w = 64'd0;
            DIB46_w = 64'd0;
            DIB47_w = 64'd0;
            
            
            MUXA00_w = 4'd15;
            MUXA01_w = 4'd15;
            MUXA02_w = 4'd15;
            MUXA03_w = 4'd15;
            MUXA04_w = 4'd15;
            MUXA05_w = 4'd15;
            MUXA06_w = 4'd15;            
            MUXA07_w = 4'd15;
            MUXA08_w = 4'd15;
            MUXA09_w = 4'd15;
            MUXA10_w = 4'd15;
            MUXA11_w = 4'd15;
            MUXA12_w = 4'd15;
            MUXA13_w = 4'd15;            
            MUXA14_w = 4'd15;
            MUXA15_w = 4'd15;
            MUXA16_w = 4'd15;
            MUXA17_w = 4'd15;
            MUXA18_w = 4'd15;
            MUXA19_w = 4'd15;
            MUXA20_w = 4'd15;
            MUXA21_w = 4'd15;
            MUXA22_w = 4'd15;
            MUXA23_w = 4'd15;
            MUXA24_w = 4'd15;
            MUXA25_w = 4'd15;
            MUXA26_w = 4'd15;
            MUXA27_w = 4'd15;
            MUXA28_w = 4'd15;
            MUXA29_w = 4'd15;
            MUXA30_w = 4'd15;
            MUXA31_w = 4'd15;
            MUXA32_w = 4'd15;
            MUXA33_w = 4'd15;
            MUXA34_w = 4'd15;
            MUXA35_w = 4'd15;
            MUXA36_w = 4'd15;
            MUXA37_w = 4'd15;
            MUXA38_w = 4'd15;
            MUXA39_w = 4'd15;
            MUXA40_w = 4'd15;
            MUXA41_w = 4'd15;
            
            MUXA42_w = 4'd0;
            MUXA43_w = 4'd0;
            MUXA44_w = 4'd0;
            MUXA45_w = 4'd0;
            MUXA46_w = 4'd0;
            MUXA47_w = 4'd0;
            
            
            MUXB00_w = 4'd15;
            MUXB01_w = 4'd15;
            MUXB02_w = 4'd15;
            MUXB03_w = 4'd15;
            MUXB04_w = 4'd15;
            MUXB05_w = 4'd15;
            MUXB06_w = 4'd15;            
            MUXB07_w = 4'd15;
            MUXB08_w = 4'd15;
            MUXB09_w = 4'd15;
            MUXB10_w = 4'd15;
            MUXB11_w = 4'd15;
            MUXB12_w = 4'd15;
            MUXB13_w = 4'd15;            
            MUXB14_w = 4'd15;
            MUXB15_w = 4'd15;
            MUXB16_w = 4'd15;
            MUXB17_w = 4'd15;
            MUXB18_w = 4'd15;
            MUXB19_w = 4'd15;
            MUXB20_w = 4'd15;
            MUXB21_w = 4'd15;
            MUXB22_w = 4'd15;
            MUXB23_w = 4'd15;
            MUXB24_w = 4'd15;
            MUXB25_w = 4'd15;
            MUXB26_w = 4'd15;
            MUXB27_w = 4'd15;
            MUXB28_w = 4'd15;
            MUXB29_w = 4'd15;
            MUXB30_w = 4'd15;
            MUXB31_w = 4'd15;
            MUXB32_w = 4'd15;
            MUXB33_w = 4'd15;
            MUXB34_w = 4'd15;
            MUXB35_w = 4'd15;
            MUXB36_w = 4'd15;
            MUXB37_w = 4'd15;
            MUXB38_w = 4'd15;
            MUXB39_w = 4'd15;
            MUXB40_w = 4'd15;
            MUXB41_w = 4'd15;
            
            MUXB42_w = 4'd0;
            MUXB43_w = 4'd0;
            MUXB44_w = 4'd0;
            MUXB45_w = 4'd0;
            MUXB46_w = 4'd0;
            MUXB47_w = 4'd0;

            
            WEAN_w = {9'd0, Mask_Obuffer_WEAN_w, CurV_Ibuffer_WEAN_w,  CurU_Ibuffer_WEAN_w, CurY_Ibuffer_WEAN_w, BMW_IObuffer_WEAN_w, BMV_IObuffer_WEAN_w, BMU_IObuffer_WEAN_w, BMY_IObuffer_WEAN_w};
            
            WEBN_w = {9'd0, Mask_Obuffer_WEBN_w, CurV_Ibuffer_WEBN_w,  CurU_Ibuffer_WEBN_w, CurY_Ibuffer_WEBN_w, BMW_IObuffer_WEBN_w, BMV_IObuffer_WEBN_w, BMU_IObuffer_WEBN_w, BMY_IObuffer_WEBN_w};
            
            OEA_w =  {9'd0, Mask_Obuffer_OEA_w, CurV_Ibuffer_OEA_w,  CurU_Ibuffer_OEA_w, CurY_Ibuffer_OEA_w, BMW_IObuffer_OEA_w, BMV_IObuffer_OEA_w, BMU_IObuffer_OEA_w, BMY_IObuffer_OEA_w};
            
            OEB_w =  {9'd0, Mask_Obuffer_OEB_w, CurV_Ibuffer_OEB_w,  CurU_Ibuffer_OEB_w, CurY_Ibuffer_OEB_w, BMW_IObuffer_OEB_w, BMV_IObuffer_OEB_w, BMU_IObuffer_OEB_w, BMY_IObuffer_OEB_w};
            
            choose_reg_A_w = {9'd0, Mask_Obuffer_choose_reg_A_w, CurV_Ibuffer_choose_reg_A_w,  CurU_Ibuffer_choose_reg_A_w, CurY_Ibuffer_choose_reg_A_w,BMW_IObuffer_choose_reg_A_w, BMV_IObuffer_choose_reg_A_w, BMU_IObuffer_choose_reg_A_w, BMY_IObuffer_choose_reg_A_w};
            
            choose_reg_B_w = {9'd0, Mask_Obuffer_choose_reg_B_w, CurV_Ibuffer_choose_reg_B_w,  CurU_Ibuffer_choose_reg_B_w, CurY_Ibuffer_choose_reg_B_w,BMW_IObuffer_choose_reg_B_w, BMV_IObuffer_choose_reg_B_w, BMU_IObuffer_choose_reg_B_w, BMY_IObuffer_choose_reg_B_w};
            
         end
         `ACCUMULATION_CANDIDATE_HISTOGRAM:
         begin
            A00_w = A_memory_control_Y_w;
            A01_w = A_memory_control_Y_w; 
            A02_w = A_memory_control_Y_w; 
            A03_w = A_memory_control_Y_w; 
            A04_w = A_memory_control_Y_w; 
            A05_w = A_memory_control_Y_w; 
            A06_w = A_memory_control_Y_w; 
            A07_w = A_memory_control_U_w; 
            A08_w = A_memory_control_U_w; 
            A09_w = A_memory_control_U_w; 
            A10_w = A_memory_control_U_w; 
            A11_w = A_memory_control_U_w; 
            A12_w = A_memory_control_U_w; 
            A13_w = A_memory_control_U_w; 
            A14_w = A_memory_control_V_w; 
            A15_w = A_memory_control_V_w; 
            A16_w = A_memory_control_V_w; 
            A17_w = A_memory_control_V_w; 
            A18_w = A_memory_control_V_w; 
            A19_w = A_memory_control_V_w; 
            A20_w = A_memory_control_V_w; 
            A21_w = A_memory_control_Y_bg_w;
            A22_w = A_memory_control_Y_bg_w;
            A23_w = A_memory_control_Y_bg_w;
            A24_w = A_memory_control_Y_bg_w;
            A25_w = A_memory_control_Y_bg_w;
            A26_w = A_memory_control_Y_bg_w;
            A27_w = A_memory_control_Y_bg_w;
            A28_w = A_memory_control_U_bg_w;
            A29_w = A_memory_control_U_bg_w;
            A30_w = A_memory_control_U_bg_w;
            A31_w = A_memory_control_U_bg_w;
            A32_w = A_memory_control_U_bg_w;
            A33_w = A_memory_control_U_bg_w;
            A34_w = A_memory_control_U_bg_w;
            A35_w = A_memory_control_V_bg_w;
            A36_w = A_memory_control_V_bg_w;
            A37_w = A_memory_control_V_bg_w;
            A38_w = A_memory_control_V_bg_w;
            A39_w = A_memory_control_V_bg_w;
            A40_w = A_memory_control_V_bg_w;
            A41_w = A_memory_control_V_bg_w;
            A42_w = buffer_addr_A_w;       
            A43_w = buffer_addr_A_w;       
            A44_w = buffer_addr_A_w;       
            A45_w = Cordic_buffer_addr_A_w;
            A46_w = 4'd0;
            A47_w = MASK_buffer_A_w;
            B00_w = B_memory_control_Y_w;
            B01_w = B_memory_control_Y_w;
            B02_w = B_memory_control_Y_w;
            B03_w = B_memory_control_Y_w;
            B04_w = B_memory_control_Y_w;
            B05_w = B_memory_control_Y_w;
            B06_w = B_memory_control_Y_w;
            B07_w = B_memory_control_U_w;
            B08_w = B_memory_control_U_w;
            B09_w = B_memory_control_U_w;
            B10_w = B_memory_control_U_w;
            B11_w = B_memory_control_U_w;
            B12_w = B_memory_control_U_w;
            B13_w = B_memory_control_U_w;
            B14_w = B_memory_control_V_w;
            B15_w = B_memory_control_V_w;
            B16_w = B_memory_control_V_w;
            B17_w = B_memory_control_V_w;
            B18_w = B_memory_control_V_w;
            B19_w = B_memory_control_V_w;
            B20_w = B_memory_control_V_w;
            B21_w = B_memory_control_Y_bg_w;                    
            B22_w = B_memory_control_Y_bg_w;                    
            B23_w = B_memory_control_Y_bg_w;                    
            B24_w = B_memory_control_Y_bg_w;                    
            B25_w = B_memory_control_Y_bg_w;                    
            B26_w = B_memory_control_Y_bg_w;                    
            B27_w = B_memory_control_Y_bg_w;                    
            B28_w = B_memory_control_U_bg_w;                    
            B29_w = B_memory_control_U_bg_w;                    
            B30_w = B_memory_control_U_bg_w;                    
            B31_w = B_memory_control_U_bg_w;                    
            B32_w = B_memory_control_U_bg_w;                    
            B33_w = B_memory_control_U_bg_w;                    
            B34_w = B_memory_control_U_bg_w;                    
            B35_w = B_memory_control_V_bg_w;                    
            B36_w = B_memory_control_V_bg_w;                    
            B37_w = B_memory_control_V_bg_w;                    
            B38_w = B_memory_control_V_bg_w;                    
            B39_w = B_memory_control_V_bg_w;                    
            B40_w = B_memory_control_V_bg_w;                    
            B41_w = B_memory_control_V_bg_w;
            B42_w = 4'd0; 
            B43_w = 4'd0;
            B44_w = 4'd0;
            B45_w = 4'd0;
            B46_w = 4'd0;
            B47_w = 4'd0;
            DIA00_w = DIA_T_memory_control_Y_w;
            DIA01_w = DIA_T_memory_control_Y_w;
            DIA02_w = DIA_T_memory_control_Y_w;
            DIA03_w = DIA_T_memory_control_Y_w;
            DIA04_w = DIA_T_memory_control_Y_w;
            DIA05_w = DIA_T_memory_control_Y_w;
            DIA06_w = DIA_T_memory_control_Y_w;
            DIA07_w = DIA_T_memory_control_U_w;
            DIA08_w = DIA_T_memory_control_U_w;
            DIA09_w = DIA_T_memory_control_U_w;
            DIA10_w = DIA_T_memory_control_U_w;
            DIA11_w = DIA_T_memory_control_U_w;
            DIA12_w = DIA_T_memory_control_U_w;
            DIA13_w = DIA_T_memory_control_U_w;
            DIA14_w = DIA_T_memory_control_V_w;
            DIA15_w = DIA_T_memory_control_V_w;
            DIA16_w = DIA_T_memory_control_V_w;
            DIA17_w = DIA_T_memory_control_V_w;
            DIA18_w = DIA_T_memory_control_V_w;
            DIA19_w = DIA_T_memory_control_V_w;
            DIA20_w = DIA_T_memory_control_V_w;
            DIA21_w = 64'd0;
            DIA22_w = 64'd0;
            DIA23_w = 64'd0;
            DIA24_w = 64'd0;
            DIA25_w = 64'd0;
            DIA26_w = 64'd0;
            DIA27_w = 64'd0;
            DIA28_w = 64'd0;
            DIA29_w = 64'd0;
            DIA30_w = 64'd0;
            DIA31_w = 64'd0;
            DIA32_w = 64'd0;
            DIA33_w = 64'd0;
            DIA34_w = 64'd0;
            DIA35_w = 64'd0;
            DIA36_w = 64'd0;
            DIA37_w = 64'd0;
            DIA38_w = 64'd0;
            DIA39_w = 64'd0;
            DIA40_w = 64'd0;
            DIA41_w = 64'd0;
            DIA42_w = Y_buffer_data_write_w;
            DIA43_w = U_buffer_data_write_w;
            DIA44_w = V_buffer_data_write_w;
            DIA45_w = Cordic_buffer_data_write_w;
            DIA46_w = Weight_buffer_data_write_w;
            DIA47_w = mask_in;
            DIB00_w = DIB_T_memory_control_Y_w;
            DIB01_w = DIB_T_memory_control_Y_w;
            DIB02_w = DIB_T_memory_control_Y_w;
            DIB03_w = DIB_T_memory_control_Y_w;
            DIB04_w = DIB_T_memory_control_Y_w;
            DIB05_w = DIB_T_memory_control_Y_w;
            DIB06_w = DIB_T_memory_control_Y_w;
            DIB07_w = DIB_T_memory_control_U_w;
            DIB08_w = DIB_T_memory_control_U_w;
            DIB09_w = DIB_T_memory_control_U_w;
            DIB10_w = DIB_T_memory_control_U_w;
            DIB11_w = DIB_T_memory_control_U_w;
            DIB12_w = DIB_T_memory_control_U_w;
            DIB13_w = DIB_T_memory_control_U_w;
            DIB14_w = DIB_T_memory_control_V_w;
            DIB15_w = DIB_T_memory_control_V_w;
            DIB16_w = DIB_T_memory_control_V_w;
            DIB17_w = DIB_T_memory_control_V_w;
            DIB18_w = DIB_T_memory_control_V_w;
            DIB19_w = DIB_T_memory_control_V_w;
            DIB20_w = DIB_T_memory_control_V_w;
            DIB21_w = 64'd0;
            DIB22_w = 64'd0;
            DIB23_w = 64'd0;
            DIB24_w = 64'd0;
            DIB25_w = 64'd0;
            DIB26_w = 64'd0;
            DIB27_w = 64'd0;
            DIB28_w = 64'd0;
            DIB29_w = 64'd0;
            DIB30_w = 64'd0;
            DIB31_w = 64'd0;
            DIB32_w = 64'd0;
            DIB33_w = 64'd0;
            DIB34_w = 64'd0;
            DIB35_w = 64'd0;
            DIB36_w = 64'd0;
            DIB37_w = 64'd0;
            DIB38_w = 64'd0;
            DIB39_w = 64'd0;
            DIB40_w = 64'd0;
            DIB41_w = 64'd0;
            DIB42_w = 64'd0;
            DIB43_w = 64'd0;
            DIB44_w = 64'd0;
            DIB45_w = 64'd0;
            DIB46_w = 64'd0;
            DIB47_w = 64'd0;
            MUXA00_w = MUXA_memory_control_Y;
            MUXA01_w = MUXA_memory_control_Y;
            MUXA02_w = MUXA_memory_control_Y;
            MUXA03_w = MUXA_memory_control_Y;
            MUXA04_w = MUXA_memory_control_Y;
            MUXA05_w = MUXA_memory_control_Y;
            MUXA06_w = MUXA_memory_control_Y;
            MUXA07_w = MUXA_memory_control_U;
            MUXA08_w = MUXA_memory_control_U;
            MUXA09_w = MUXA_memory_control_U;
            MUXA10_w = MUXA_memory_control_U;
            MUXA11_w = MUXA_memory_control_U;
            MUXA12_w = MUXA_memory_control_U;
            MUXA13_w = MUXA_memory_control_U;
            MUXA14_w = MUXA_memory_control_V;
            MUXA15_w = MUXA_memory_control_V;
            MUXA16_w = MUXA_memory_control_V;
            MUXA17_w = MUXA_memory_control_V;
            MUXA18_w = MUXA_memory_control_V;
            MUXA19_w = MUXA_memory_control_V;
            MUXA20_w = MUXA_memory_control_V;
            MUXA21_w = 4'd0;
            MUXA22_w = 4'd0;
            MUXA23_w = 4'd0;
            MUXA24_w = 4'd0;
            MUXA25_w = 4'd0;
            MUXA26_w = 4'd0;
            MUXA27_w = 4'd0;
            MUXA28_w = 4'd0;
            MUXA29_w = 4'd0;
            MUXA30_w = 4'd0;
            MUXA31_w = 4'd0;
            MUXA32_w = 4'd0;
            MUXA33_w = 4'd0;
            MUXA34_w = 4'd0;
            MUXA35_w = 4'd0;
            MUXA36_w = 4'd0;
            MUXA37_w = 4'd0;
            MUXA38_w = 4'd0;
            MUXA39_w = 4'd0;
            MUXA40_w = 4'd0;
            MUXA41_w = 4'd0;
            MUXA42_w = buffer_MUXA_w;
            MUXA43_w = buffer_MUXA_w;
            MUXA44_w = buffer_MUXA_w;
            MUXA45_w = Cordic_buffer_MUXA_w;
            MUXA46_w = buffer_MUXA_w;
            MUXA47_w = 4'b1111;
            MUXB00_w = MUXB_memory_control_Y;
            MUXB01_w = MUXB_memory_control_Y;
            MUXB02_w = MUXB_memory_control_Y;
            MUXB03_w = MUXB_memory_control_Y;
            MUXB04_w = MUXB_memory_control_Y;
            MUXB05_w = MUXB_memory_control_Y;
            MUXB06_w = MUXB_memory_control_Y;
            MUXB07_w = MUXB_memory_control_U;
            MUXB08_w = MUXB_memory_control_U;
            MUXB09_w = MUXB_memory_control_U;
            MUXB10_w = MUXB_memory_control_U;
            MUXB11_w = MUXB_memory_control_U;
            MUXB12_w = MUXB_memory_control_U;
            MUXB13_w = MUXB_memory_control_U;
            MUXB14_w = MUXB_memory_control_V;
            MUXB15_w = MUXB_memory_control_V;
            MUXB16_w = MUXB_memory_control_V;
            MUXB17_w = MUXB_memory_control_V;
            MUXB18_w = MUXB_memory_control_V;
            MUXB19_w = MUXB_memory_control_V;
            MUXB20_w = MUXB_memory_control_V;
            MUXB21_w = 4'd0;
            MUXB22_w = 4'd0;
            MUXB23_w = 4'd0;
            MUXB24_w = 4'd0;
            MUXB25_w = 4'd0;
            MUXB26_w = 4'd0;
            MUXB27_w = 4'd0;
            MUXB28_w = 4'd0;
            MUXB29_w = 4'd0;
            MUXB30_w = 4'd0;
            MUXB31_w = 4'd0;
            MUXB32_w = 4'd0;
            MUXB33_w = 4'd0;
            MUXB34_w = 4'd0;
            MUXB35_w = 4'd0;
            MUXB36_w = 4'd0;
            MUXB37_w = 4'd0;
            MUXB38_w = 4'd0;
            MUXB39_w = 4'd0;
            MUXB40_w = 4'd0;
            MUXB41_w = 4'd0;
            MUXB42_w = 4'd0;
            MUXB43_w = 4'd0;
            MUXB44_w = 4'd0;
            MUXB45_w = 4'd0;
            MUXB46_w = 4'd0;
            MUXB47_w = 4'd0;
            WEAN_w = {MASK_WEAN_w,{2{Cordic_buffer_WEAN_w}}, buffer_WEAN_V_w, buffer_WEAN_U_w, buffer_WEAN_Y_w, 21'h1fffff,{7{wea_V_pazen}},{7{wea_U_pazen}},{7{wea_Y_pazen}}};
            WEBN_w = {27'h7FFFFFF,{7{web_V_pazen}},{7{web_U_pazen}},{7{web_Y_pazen}}};
            OEA_w = {1'b1,{5{buffer_OEA_w}}, 21'd0,{7{oea_V_pazen}},{7{oea_U_pazen}},{7{oea_Y_pazen}}};
            OEB_w = {27'd0,{7{oeb_V_pazen}},{7{oeb_U_pazen}},{7{oeb_Y_pazen}}};
            choose_reg_A_w = {MASK_choose_reg_A_w, {5{buffer_choose_reg_A_w}}, 21'd0, choose_reg_A_memory_control_V_w, choose_reg_A_memory_control_U_w, choose_reg_A_memory_control_Y_w};
            choose_reg_B_w = {27'd0, choose_reg_B_memory_control_V_w, choose_reg_B_memory_control_U_w, choose_reg_B_memory_control_Y_w};
            
            
         end
         `ACCUMULATION_TARGET_HISTOGRAM:
         begin
            A00_w = A_memory_control_Y_bg_w;
            A01_w = A_memory_control_Y_bg_w; 
            A02_w = A_memory_control_Y_bg_w; 
            A03_w = A_memory_control_Y_bg_w; 
            A04_w = A_memory_control_Y_bg_w; 
            A05_w = A_memory_control_Y_bg_w; 
            A06_w = A_memory_control_Y_bg_w; 
            A07_w = A_memory_control_U_bg_w; 
            A08_w = A_memory_control_U_bg_w; 
            A09_w = A_memory_control_U_bg_w; 
            A10_w = A_memory_control_U_bg_w; 
            A11_w = A_memory_control_U_bg_w; 
            A12_w = A_memory_control_U_bg_w; 
            A13_w = A_memory_control_U_bg_w; 
            A14_w = A_memory_control_V_bg_w; 
            A15_w = A_memory_control_V_bg_w; 
            A16_w = A_memory_control_V_bg_w; 
            A17_w = A_memory_control_V_bg_w; 
            A18_w = A_memory_control_V_bg_w; 
            A19_w = A_memory_control_V_bg_w; 
            A20_w = A_memory_control_V_bg_w; 
            A21_w = A_memory_control_Y_w;
            A22_w = A_memory_control_Y_w;
            A23_w = A_memory_control_Y_w;
            A24_w = A_memory_control_Y_w;
            A25_w = A_memory_control_Y_w;
            A26_w = A_memory_control_Y_w;
            A27_w = A_memory_control_Y_w;
            A28_w = A_memory_control_U_w;
            A29_w = A_memory_control_U_w;
            A30_w = A_memory_control_U_w;
            A31_w = A_memory_control_U_w;
            A32_w = A_memory_control_U_w;
            A33_w = A_memory_control_U_w;
            A34_w = A_memory_control_U_w;
            A35_w = A_memory_control_V_w;
            A36_w = A_memory_control_V_w;
            A37_w = A_memory_control_V_w;
            A38_w = A_memory_control_V_w;
            A39_w = A_memory_control_V_w;
            A40_w = A_memory_control_V_w;
            A41_w = A_memory_control_V_w;
            A42_w = buffer_addr_A_w;       
            A43_w = buffer_addr_A_w;       
            A44_w = buffer_addr_A_w;       
            A45_w = Cordic_buffer_addr_A_w;
            A46_w = 4'd0;
            A47_w = MASK_buffer_A_w;
            B00_w = B_memory_control_Y_bg_w;
            B01_w = B_memory_control_Y_bg_w;
            B02_w = B_memory_control_Y_bg_w;
            B03_w = B_memory_control_Y_bg_w;
            B04_w = B_memory_control_Y_bg_w;
            B05_w = B_memory_control_Y_bg_w;
            B06_w = B_memory_control_Y_bg_w;
            B07_w = B_memory_control_U_bg_w;
            B08_w = B_memory_control_U_bg_w;
            B09_w = B_memory_control_U_bg_w;
            B10_w = B_memory_control_U_bg_w;
            B11_w = B_memory_control_U_bg_w;
            B12_w = B_memory_control_U_bg_w;
            B13_w = B_memory_control_U_bg_w;
            B14_w = B_memory_control_V_bg_w;
            B15_w = B_memory_control_V_bg_w;
            B16_w = B_memory_control_V_bg_w;
            B17_w = B_memory_control_V_bg_w;
            B18_w = B_memory_control_V_bg_w;
            B19_w = B_memory_control_V_bg_w;
            B20_w = B_memory_control_V_bg_w;
            B21_w = B_memory_control_Y_w;                    
            B22_w = B_memory_control_Y_w;                    
            B23_w = B_memory_control_Y_w;                    
            B24_w = B_memory_control_Y_w;                    
            B25_w = B_memory_control_Y_w;                    
            B26_w = B_memory_control_Y_w;                    
            B27_w = B_memory_control_Y_w;                    
            B28_w = B_memory_control_U_w;                    
            B29_w = B_memory_control_U_w;                    
            B30_w = B_memory_control_U_w;                    
            B31_w = B_memory_control_U_w;                    
            B32_w = B_memory_control_U_w;                    
            B33_w = B_memory_control_U_w;                    
            B34_w = B_memory_control_U_w;                    
            B35_w = B_memory_control_V_w;                    
            B36_w = B_memory_control_V_w;                    
            B37_w = B_memory_control_V_w;                    
            B38_w = B_memory_control_V_w;                    
            B39_w = B_memory_control_V_w;                    
            B40_w = B_memory_control_V_w;                    
            B41_w = B_memory_control_V_w;  
            B42_w = 4'd0; 
            B43_w = 4'd0;
            B44_w = 4'd0;
            B45_w = 4'd0;
            B46_w = 4'd0;
            B47_w = 4'd0;                  
            DIA00_w = 64'd0;
            DIA01_w = 64'd0;
            DIA02_w = 64'd0;
            DIA03_w = 64'd0;
            DIA04_w = 64'd0;
            DIA05_w = 64'd0;
            DIA06_w = 64'd0;
            DIA07_w = 64'd0;
            DIA08_w = 64'd0;
            DIA09_w = 64'd0;
            DIA10_w = 64'd0;
            DIA11_w = 64'd0;
            DIA12_w = 64'd0;
            DIA13_w = 64'd0;
            DIA14_w = 64'd0;
            DIA15_w = 64'd0;
            DIA16_w = 64'd0;
            DIA17_w = 64'd0;
            DIA18_w = 64'd0;
            DIA19_w = 64'd0;
            DIA20_w = 64'd0;
            DIA21_w = DIA_T_memory_control_Y_w;
            DIA22_w = DIA_T_memory_control_Y_w;
            DIA23_w = DIA_T_memory_control_Y_w;
            DIA24_w = DIA_T_memory_control_Y_w;
            DIA25_w = DIA_T_memory_control_Y_w;
            DIA26_w = DIA_T_memory_control_Y_w;
            DIA27_w = DIA_T_memory_control_Y_w;
            DIA28_w = DIA_T_memory_control_U_w;
            DIA29_w = DIA_T_memory_control_U_w;
            DIA30_w = DIA_T_memory_control_U_w;
            DIA31_w = DIA_T_memory_control_U_w;
            DIA32_w = DIA_T_memory_control_U_w;
            DIA33_w = DIA_T_memory_control_U_w;
            DIA34_w = DIA_T_memory_control_U_w;
            DIA35_w = DIA_T_memory_control_V_w;
            DIA36_w = DIA_T_memory_control_V_w;
            DIA37_w = DIA_T_memory_control_V_w;
            DIA38_w = DIA_T_memory_control_V_w;
            DIA39_w = DIA_T_memory_control_V_w;
            DIA40_w = DIA_T_memory_control_V_w;
            DIA41_w = DIA_T_memory_control_V_w;
            DIA42_w = Y_buffer_data_write_w;
            DIA43_w = U_buffer_data_write_w;
            DIA44_w = V_buffer_data_write_w;
            DIA45_w = Cordic_buffer_data_write_w;
            DIA46_w = Weight_buffer_data_write_w;
            DIA47_w = mask_in;
            DIB00_w = 64'd0;
            DIB01_w = 64'd0;
            DIB02_w = 64'd0;
            DIB03_w = 64'd0;
            DIB04_w = 64'd0;
            DIB05_w = 64'd0;
            DIB06_w = 64'd0;
            DIB07_w = 64'd0;
            DIB08_w = 64'd0;
            DIB09_w = 64'd0;
            DIB10_w = 64'd0;
            DIB11_w = 64'd0;
            DIB12_w = 64'd0;
            DIB13_w = 64'd0;
            DIB14_w = 64'd0;
            DIB15_w = 64'd0;
            DIB16_w = 64'd0;
            DIB17_w = 64'd0;
            DIB18_w = 64'd0;
            DIB19_w = 64'd0;
            DIB20_w = 64'd0;
            DIB21_w = DIB_T_memory_control_Y_w;
            DIB22_w = DIB_T_memory_control_Y_w;
            DIB23_w = DIB_T_memory_control_Y_w;
            DIB24_w = DIB_T_memory_control_Y_w;
            DIB25_w = DIB_T_memory_control_Y_w;
            DIB26_w = DIB_T_memory_control_Y_w;
            DIB27_w = DIB_T_memory_control_Y_w;
            DIB28_w = DIB_T_memory_control_U_w;
            DIB29_w = DIB_T_memory_control_U_w;
            DIB30_w = DIB_T_memory_control_U_w;
            DIB31_w = DIB_T_memory_control_U_w;
            DIB32_w = DIB_T_memory_control_U_w;
            DIB33_w = DIB_T_memory_control_U_w;
            DIB34_w = DIB_T_memory_control_U_w;
            DIB35_w = DIB_T_memory_control_V_w;
            DIB36_w = DIB_T_memory_control_V_w;
            DIB37_w = DIB_T_memory_control_V_w;
            DIB38_w = DIB_T_memory_control_V_w;
            DIB39_w = DIB_T_memory_control_V_w;
            DIB40_w = DIB_T_memory_control_V_w;
            DIB41_w = DIB_T_memory_control_V_w;
            DIB42_w = 64'd0;
            DIB43_w = 64'd0;
            DIB44_w = 64'd0;
            DIB45_w = 64'd0;
            DIB46_w = 64'd0;
            DIB47_w = 64'd0;
            MUXA00_w = 4'd0;
            MUXA01_w = 4'd0;
            MUXA02_w = 4'd0;
            MUXA03_w = 4'd0;
            MUXA04_w = 4'd0;
            MUXA05_w = 4'd0;
            MUXA06_w = 4'd0;
            MUXA07_w = 4'd0;
            MUXA08_w = 4'd0;
            MUXA09_w = 4'd0;
            MUXA10_w = 4'd0;
            MUXA11_w = 4'd0;
            MUXA12_w = 4'd0;
            MUXA13_w = 4'd0;
            MUXA14_w = 4'd0;
            MUXA15_w = 4'd0;
            MUXA16_w = 4'd0;
            MUXA17_w = 4'd0;
            MUXA18_w = 4'd0;
            MUXA19_w = 4'd0;
            MUXA20_w = 4'd0;
            MUXA21_w = MUXA_memory_control_Y;
            MUXA22_w = MUXA_memory_control_Y;
            MUXA23_w = MUXA_memory_control_Y;
            MUXA24_w = MUXA_memory_control_Y;
            MUXA25_w = MUXA_memory_control_Y;
            MUXA26_w = MUXA_memory_control_Y;
            MUXA27_w = MUXA_memory_control_Y;
            MUXA28_w = MUXA_memory_control_U;
            MUXA29_w = MUXA_memory_control_U;
            MUXA30_w = MUXA_memory_control_U;
            MUXA31_w = MUXA_memory_control_U;
            MUXA32_w = MUXA_memory_control_U;
            MUXA33_w = MUXA_memory_control_U;
            MUXA34_w = MUXA_memory_control_U;
            MUXA35_w = MUXA_memory_control_V;
            MUXA36_w = MUXA_memory_control_V;
            MUXA37_w = MUXA_memory_control_V;
            MUXA38_w = MUXA_memory_control_V;
            MUXA39_w = MUXA_memory_control_V;
            MUXA40_w = MUXA_memory_control_V;
            MUXA41_w = MUXA_memory_control_V;
            MUXA42_w = buffer_MUXA_w;
            MUXA43_w = buffer_MUXA_w;
            MUXA44_w = buffer_MUXA_w;
            MUXA45_w = Cordic_buffer_MUXA_w;
            MUXA46_w = buffer_MUXA_w;
            MUXA47_w = 4'b1111;
            MUXB00_w = 4'd0;
            MUXB01_w = 4'd0;
            MUXB02_w = 4'd0;
            MUXB03_w = 4'd0;
            MUXB04_w = 4'd0;
            MUXB05_w = 4'd0;
            MUXB06_w = 4'd0;
            MUXB07_w = 4'd0;
            MUXB08_w = 4'd0;
            MUXB09_w = 4'd0;
            MUXB10_w = 4'd0;
            MUXB11_w = 4'd0;
            MUXB12_w = 4'd0;
            MUXB13_w = 4'd0;
            MUXB14_w = 4'd0;
            MUXB15_w = 4'd0;
            MUXB16_w = 4'd0;
            MUXB17_w = 4'd0;
            MUXB18_w = 4'd0;
            MUXB19_w = 4'd0;
            MUXB20_w = 4'd0;
            MUXB21_w = MUXB_memory_control_Y;
            MUXB22_w = MUXB_memory_control_Y;
            MUXB23_w = MUXB_memory_control_Y;
            MUXB24_w = MUXB_memory_control_Y;
            MUXB25_w = MUXB_memory_control_Y;
            MUXB26_w = MUXB_memory_control_Y;
            MUXB27_w = MUXB_memory_control_Y;
            MUXB28_w = MUXB_memory_control_U;
            MUXB29_w = MUXB_memory_control_U;
            MUXB30_w = MUXB_memory_control_U;
            MUXB31_w = MUXB_memory_control_U;
            MUXB32_w = MUXB_memory_control_U;
            MUXB33_w = MUXB_memory_control_U;
            MUXB34_w = MUXB_memory_control_U;
            MUXB35_w = MUXB_memory_control_V;
            MUXB36_w = MUXB_memory_control_V;
            MUXB37_w = MUXB_memory_control_V;
            MUXB38_w = MUXB_memory_control_V;
            MUXB39_w = MUXB_memory_control_V;
            MUXB40_w = MUXB_memory_control_V;
            MUXB41_w = MUXB_memory_control_V;
            MUXB42_w = 4'd0;
            MUXB43_w = 4'd0;
            MUXB44_w = 4'd0;
            MUXB45_w = 4'd0;
            MUXB46_w = 4'd0;
            MUXB47_w = 4'd0;
            WEAN_w = {MASK_WEAN_w,{2{Cordic_buffer_WEAN_w}}, buffer_WEAN_V_w, buffer_WEAN_U_w, buffer_WEAN_Y_w,{7{wea_V_pazen}},{7{wea_U_pazen}},{7{wea_Y_pazen}}, 21'h1fffff};
            WEBN_w = {6'd1, {7{web_V_pazen}},{7{web_U_pazen}},{7{web_Y_pazen}}, 21'h1fffff};
            OEA_w = {1'b1,{5{buffer_OEA_w}}, {7{oea_V_pazen}},{7{oea_U_pazen}},{7{oea_Y_pazen}}, 21'd0};
            OEB_w = {6'd0, {7{oeb_V_pazen}},{7{oeb_U_pazen}},{7{oeb_Y_pazen}}, 21'd0};
            choose_reg_A_w = {MASK_choose_reg_A_w, {5{buffer_choose_reg_A_w}}, choose_reg_A_memory_control_V_w, choose_reg_A_memory_control_U_w, choose_reg_A_memory_control_Y_w, 21'd0};
            choose_reg_B_w = {6'd0, choose_reg_B_memory_control_V_w, choose_reg_B_memory_control_U_w, choose_reg_B_memory_control_Y_w, 21'd0};
            
         end
         `COMPUTE_DISTANCE:
         begin
            A00_w = A_DMC_Y_C_w;
            A01_w = A_DMC_Y_C_w; 
            A02_w = A_DMC_Y_C_w; 
            A03_w = A_DMC_Y_C_w; 
            A04_w = A_DMC_Y_C_w; 
            A05_w = A_DMC_Y_C_w; 
            A06_w = A_DMC_Y_C_w; 
            
            A07_w = A_DMC_U_C_w; 
            A08_w = A_DMC_U_C_w; 
            A09_w = A_DMC_U_C_w; 
            A10_w = A_DMC_U_C_w; 
            A11_w = A_DMC_U_C_w; 
            A12_w = A_DMC_U_C_w; 
            A13_w = A_DMC_U_C_w; 
            
            A14_w = A_DMC_V_C_w; 
            A15_w = A_DMC_V_C_w; 
            A16_w = A_DMC_V_C_w; 
            A17_w = A_DMC_V_C_w; 
            A18_w = A_DMC_V_C_w; 
            A19_w = A_DMC_V_C_w; 
            A20_w = A_DMC_V_C_w; 
            
            A21_w = A_DMC_Y_T_w;
            A22_w = A_DMC_Y_T_w;
            A23_w = A_DMC_Y_T_w;
            A24_w = A_DMC_Y_T_w;
            A25_w = A_DMC_Y_T_w;
            A26_w = A_DMC_Y_T_w;
            A27_w = A_DMC_Y_T_w;
            
            A28_w = A_DMC_U_T_w;
            A29_w = A_DMC_U_T_w;
            A30_w = A_DMC_U_T_w;
            A31_w = A_DMC_U_T_w;
            A32_w = A_DMC_U_T_w;
            A33_w = A_DMC_U_T_w;
            A34_w = A_DMC_U_T_w;
            
            A35_w = A_DMC_V_T_w;
            A36_w = A_DMC_V_T_w;
            A37_w = A_DMC_V_T_w;
            A38_w = A_DMC_V_T_w;
            A39_w = A_DMC_V_T_w;
            A40_w = A_DMC_V_T_w;
            A41_w = A_DMC_V_T_w;
            
            A42_w = 4'd0;
            A43_w = 4'd0;
            A44_w = 4'd0;
            A45_w = 4'd0;
            A46_w = 4'd0;
            A47_w = 4'd0;    
            
            B00_w = B_DMC_Y_C_w;
            B01_w = B_DMC_Y_C_w;
            B02_w = B_DMC_Y_C_w;
            B03_w = B_DMC_Y_C_w;
            B04_w = B_DMC_Y_C_w;
            B05_w = B_DMC_Y_C_w;
            B06_w = B_DMC_Y_C_w;
            
            B07_w = B_DMC_U_C_w;
            B08_w = B_DMC_U_C_w;
            B09_w = B_DMC_U_C_w;
            B10_w = B_DMC_U_C_w;
            B11_w = B_DMC_U_C_w;
            B12_w = B_DMC_U_C_w;
            B13_w = B_DMC_U_C_w;
            
            B14_w = B_DMC_V_C_w;
            B15_w = B_DMC_V_C_w;
            B16_w = B_DMC_V_C_w;
            B17_w = B_DMC_V_C_w;
            B18_w = B_DMC_V_C_w;
            B19_w = B_DMC_V_C_w;
            B20_w = B_DMC_V_C_w;
            
            B21_w = B_DMC_Y_T_w;                    
            B22_w = B_DMC_Y_T_w;                    
            B23_w = B_DMC_Y_T_w;                    
            B24_w = B_DMC_Y_T_w;                    
            B25_w = B_DMC_Y_T_w;                    
            B26_w = B_DMC_Y_T_w;                    
            B27_w = B_DMC_Y_T_w;                    
            
            B28_w = B_DMC_U_T_w;                    
            B29_w = B_DMC_U_T_w;                    
            B30_w = B_DMC_U_T_w;                    
            B31_w = B_DMC_U_T_w;                    
            B32_w = B_DMC_U_T_w;                    
            B33_w = B_DMC_U_T_w;                    
            B34_w = B_DMC_U_T_w;                    
            
            B35_w = B_DMC_V_T_w;                    
            B36_w = B_DMC_V_T_w;                    
            B37_w = B_DMC_V_T_w;                    
            B38_w = B_DMC_V_T_w;                    
            B39_w = B_DMC_V_T_w;                    
            B40_w = B_DMC_V_T_w;                    
            B41_w = B_DMC_V_T_w;  
            
            B42_w = 4'd0;                    
            B43_w = 4'd0;                    
            B44_w = 4'd0;                    
            B45_w = 4'd0;                    
            B46_w = 4'd0;                    
            B47_w = 4'd0;                    
            
            DIA00_w = 64'd0;//data_write_C_A_DC_Y;
            DIA01_w = 64'd0;//data_write_C_A_DC_Y;
            DIA02_w = 64'd0;//data_write_C_A_DC_Y;
            DIA03_w = 64'd0;//data_write_C_A_DC_Y;
            DIA04_w = 64'd0;//data_write_C_A_DC_Y;
            DIA05_w = 64'd0;//data_write_C_A_DC_Y;
            DIA06_w = 64'd0;//data_write_C_A_DC_Y;
            
            DIA07_w = 64'd0;//data_write_C_A_DC_U;
            DIA08_w = 64'd0;//data_write_C_A_DC_U;
            DIA09_w = 64'd0;//data_write_C_A_DC_U;
            DIA10_w = 64'd0;//data_write_C_A_DC_U;
            DIA11_w = 64'd0;//data_write_C_A_DC_U;
            DIA12_w = 64'd0;//data_write_C_A_DC_U;
            DIA13_w = 64'd0;//data_write_C_A_DC_U;
            
            DIA14_w = 64'd0;//data_write_C_A_DC_V;
            DIA15_w = 64'd0;//data_write_C_A_DC_V;
            DIA16_w = 64'd0;//data_write_C_A_DC_V;
            DIA17_w = 64'd0;//data_write_C_A_DC_V;
            DIA18_w = 64'd0;//data_write_C_A_DC_V;
            DIA19_w = 64'd0;//data_write_C_A_DC_V;
            DIA20_w = 64'd0;//data_write_C_A_DC_V;
            
            DIA21_w = 64'd0;
            DIA22_w = 64'd0;
            DIA23_w = 64'd0;
            DIA24_w = 64'd0;
            DIA25_w = 64'd0;
            DIA26_w = 64'd0;
            DIA27_w = 64'd0;
            DIA28_w = 64'd0;
            DIA29_w = 64'd0;
            DIA30_w = 64'd0;
            DIA31_w = 64'd0;
            DIA32_w = 64'd0;
            DIA33_w = 64'd0;
            DIA34_w = 64'd0;
            DIA35_w = 64'd0;
            DIA36_w = 64'd0;
            DIA37_w = 64'd0;
            DIA38_w = 64'd0;
            DIA39_w = 64'd0;
            DIA40_w = 64'd0;
            DIA41_w = 64'd0;
            
            DIA42_w = 64'd0;
            DIA43_w = 64'd0;
            DIA44_w = 64'd0;
            DIA45_w = 64'd0;
            DIA46_w = 64'd0;
            DIA47_w = 64'd0;
            
            DIB00_w = data_write_C_B_DC_Y;
            DIB01_w = data_write_C_B_DC_Y;
            DIB02_w = data_write_C_B_DC_Y;
            DIB03_w = data_write_C_B_DC_Y;
            DIB04_w = data_write_C_B_DC_Y;
            DIB05_w = data_write_C_B_DC_Y;
            DIB06_w = data_write_C_B_DC_Y;
            
            DIB07_w = data_write_C_B_DC_U;
            DIB08_w = data_write_C_B_DC_U;
            DIB09_w = data_write_C_B_DC_U;
            DIB10_w = data_write_C_B_DC_U;
            DIB11_w = data_write_C_B_DC_U;
            DIB12_w = data_write_C_B_DC_U;
            DIB13_w = data_write_C_B_DC_U;
            
            DIB14_w = data_write_C_B_DC_V;
            DIB15_w = data_write_C_B_DC_V;
            DIB16_w = data_write_C_B_DC_V;
            DIB17_w = data_write_C_B_DC_V;
            DIB18_w = data_write_C_B_DC_V;
            DIB19_w = data_write_C_B_DC_V;
            DIB20_w = data_write_C_B_DC_V;
            DIB21_w = 64'd0;
            DIB22_w = 64'd0;
            DIB23_w = 64'd0;
            DIB24_w = 64'd0;
            DIB25_w = 64'd0;
            DIB26_w = 64'd0;
            DIB27_w = 64'd0;
            DIB28_w = 64'd0;
            DIB29_w = 64'd0;
            DIB30_w = 64'd0;
            DIB31_w = 64'd0;
            DIB32_w = 64'd0;
            DIB33_w = 64'd0;
            DIB34_w = 64'd0;
            DIB35_w = 64'd0;
            DIB36_w = 64'd0;
            DIB37_w = 64'd0;
            DIB38_w = 64'd0;
            DIB39_w = 64'd0;
            DIB40_w = 64'd0;
            DIB41_w = 64'd0;
            
            DIB42_w = 64'd0;
            DIB43_w = 64'd0;
            DIB44_w = 64'd0;
            DIB45_w = 64'd0;
            DIB46_w = 64'd0;
            DIB47_w = 64'd0;
            
            MUXA00_w = MUX_DC_Y;
            MUXA01_w = MUX_DC_Y;
            MUXA02_w = MUX_DC_Y;
            MUXA03_w = MUX_DC_Y;
            MUXA04_w = MUX_DC_Y;
            MUXA05_w = MUX_DC_Y;
            MUXA06_w = MUX_DC_Y;            
            MUXA07_w = MUX_DC_U;
            MUXA08_w = MUX_DC_U;
            MUXA09_w = MUX_DC_U;
            MUXA10_w = MUX_DC_U;
            MUXA11_w = MUX_DC_U;
            MUXA12_w = MUX_DC_U;
            MUXA13_w = MUX_DC_U;            
            MUXA14_w = MUX_DC_V;
            MUXA15_w = MUX_DC_V;
            MUXA16_w = MUX_DC_V;
            MUXA17_w = MUX_DC_V;
            MUXA18_w = MUX_DC_V;
            MUXA19_w = MUX_DC_V;
            MUXA20_w = MUX_DC_V;
            MUXA21_w = 4'd15;
            MUXA22_w = 4'd15;
            MUXA23_w = 4'd15;
            MUXA24_w = 4'd15;
            MUXA25_w = 4'd15;
            MUXA26_w = 4'd15;
            MUXA27_w = 4'd15;
            MUXA28_w = 4'd15;
            MUXA29_w = 4'd15;
            MUXA30_w = 4'd15;
            MUXA31_w = 4'd15;
            MUXA32_w = 4'd15;
            MUXA33_w = 4'd15;
            MUXA34_w = 4'd15;
            MUXA35_w = 4'd15;
            MUXA36_w = 4'd15;
            MUXA37_w = 4'd15;
            MUXA38_w = 4'd15;
            MUXA39_w = 4'd15;
            MUXA40_w = 4'd15;
            MUXA41_w = 4'd15;
            
            MUXA42_w = 4'd0;
            MUXA43_w = 4'd0;
            MUXA44_w = 4'd0;
            MUXA45_w = 4'd0;
            MUXA46_w = 4'd0;
            MUXA47_w = 4'd0;
            
            MUXB00_w = MUX_DC_Y;
            MUXB01_w = MUX_DC_Y;
            MUXB02_w = MUX_DC_Y;
            MUXB03_w = MUX_DC_Y;
            MUXB04_w = MUX_DC_Y;
            MUXB05_w = MUX_DC_Y;
            MUXB06_w = MUX_DC_Y;            
            MUXB07_w = MUX_DC_U;
            MUXB08_w = MUX_DC_U;
            MUXB09_w = MUX_DC_U;
            MUXB10_w = MUX_DC_U;
            MUXB11_w = MUX_DC_U;
            MUXB12_w = MUX_DC_U;
            MUXB13_w = MUX_DC_U;            
            MUXB14_w = MUX_DC_V;
            MUXB15_w = MUX_DC_V;
            MUXB16_w = MUX_DC_V;
            MUXB17_w = MUX_DC_V;
            MUXB18_w = MUX_DC_V;
            MUXB19_w = MUX_DC_V;
            MUXB20_w = MUX_DC_V;
            MUXB21_w = 4'd15;
            MUXB22_w = 4'd15;
            MUXB23_w = 4'd15;
            MUXB24_w = 4'd15;
            MUXB25_w = 4'd15;
            MUXB26_w = 4'd15;
            MUXB27_w = 4'd15;
            MUXB28_w = 4'd15;
            MUXB29_w = 4'd15;
            MUXB30_w = 4'd15;
            MUXB31_w = 4'd15;
            MUXB32_w = 4'd15;
            MUXB33_w = 4'd15;
            MUXB34_w = 4'd15;
            MUXB35_w = 4'd15;
            MUXB36_w = 4'd15;
            MUXB37_w = 4'd15;
            MUXB38_w = 4'd15;
            MUXB39_w = 4'd15;
            MUXB40_w = 4'd15;
            MUXB41_w = 4'd15;
            
            MUXB42_w = 4'd0;
            MUXB43_w = 4'd0;
            MUXB44_w = 4'd0;
            MUXB45_w = 4'd0;
            MUXB46_w = 4'd0;
            MUXB47_w = 4'd0;
            
            WEAN_w = 48'b111111111111111111111111111111111111111111111111;//{{7{WEAN_T_DC_V}},{7{WEAN_T_DC_U}},{7{WEAN_T_DC_Y}},{7{WEAN_C_DC_V}},{7{WEAN_C_DC_U}},{7{WEAN_C_DC_Y}}};
            WEBN_w = 48'b111111111111111111111111111000000000000000000000;//{{7{WEBN_T_DC_V}},{7{WEBN_T_DC_U}},{7{WEBN_T_DC_Y}},{7{WEBN_C_DC_V}},{7{WEBN_C_DC_U}},{7{WEBN_C_DC_Y}}};
            OEA_w =  48'b000000111111111111111111111111111111111111111111;//{{7{OEA_T_DC_V}},{7{OEA_T_DC_U}},{7{OEA_T_DC_Y}},{7{OEA_C_DC_V}},{7{OEA_C_DC_U}},{7{OEA_C_DC_Y}}};
            OEB_w =  48'd0;//{{7{OEB_T_DC_V}},{7{OEB_T_DC_U}},{7{OEB_T_DC_Y}},{7{OEB_C_DC_V}},{7{OEB_C_DC_U}},{7{OEB_C_DC_Y}}};
            choose_reg_A_w = {6'd0, choose_reg_A_DMC_T_V_w, choose_reg_A_DMC_T_U_w, choose_reg_A_DMC_T_Y_w, choose_reg_A_DMC_C_V_w, choose_reg_A_DMC_C_U_w, choose_reg_A_DMC_C_Y_w};
            choose_reg_B_w = {6'd0, choose_reg_B_DMC_T_V_w, choose_reg_B_DMC_T_U_w, choose_reg_B_DMC_T_Y_w, choose_reg_B_DMC_C_V_w, choose_reg_B_DMC_C_U_w, choose_reg_B_DMC_C_Y_w};
            
         end
         `SAVE_LOAD_FROM_DMA:
         begin
            A00_w = Address_from_DMA_r;
            A01_w = Address_from_DMA_r; 
            A02_w = Address_from_DMA_r; 
            A03_w = Address_from_DMA_r; 
            A04_w = Address_from_DMA_r; 
            A05_w = Address_from_DMA_r; 
            A06_w = Address_from_DMA_r; 
            A07_w = Address_from_DMA_r; 
            A08_w = Address_from_DMA_r; 
            A09_w = Address_from_DMA_r; 
            A10_w = Address_from_DMA_r; 
            A11_w = Address_from_DMA_r; 
            A12_w = Address_from_DMA_r; 
            A13_w = Address_from_DMA_r; 
            A14_w = Address_from_DMA_r; 
            A15_w = Address_from_DMA_r; 
            A16_w = Address_from_DMA_r; 
            A17_w = Address_from_DMA_r; 
            A18_w = Address_from_DMA_r; 
            A19_w = Address_from_DMA_r; 
            A20_w = Address_from_DMA_r; 
            A21_w = Address_from_DMA_r;
            A22_w = Address_from_DMA_r;
            A23_w = Address_from_DMA_r;
            A24_w = Address_from_DMA_r;
            A25_w = Address_from_DMA_r;
            A26_w = Address_from_DMA_r;
            A27_w = Address_from_DMA_r;
            A28_w = Address_from_DMA_r;
            A29_w = Address_from_DMA_r;
            A30_w = Address_from_DMA_r;
            A31_w = Address_from_DMA_r;
            A32_w = Address_from_DMA_r;
            A33_w = Address_from_DMA_r;
            A34_w = Address_from_DMA_r;
            A35_w = Address_from_DMA_r;
            A36_w = Address_from_DMA_r;
            A37_w = Address_from_DMA_r;
            A38_w = Address_from_DMA_r;
            A39_w = Address_from_DMA_r;
            A40_w = Address_from_DMA_r;
            A41_w = Address_from_DMA_r;
            A42_w = Address_from_DMA_r;
            A43_w = Address_from_DMA_r;
            A44_w = Address_from_DMA_r;
            A45_w = Address_from_DMA_r;
            A46_w = Address_from_DMA_r;
            A47_w = Address_from_DMA_r;
            
            B00_w = 4'd0;
            B01_w = 4'd0;
            B02_w = 4'd0;
            B03_w = 4'd0;
            B04_w = 4'd0;
            B05_w = 4'd0;
            B06_w = 4'd0;
            B07_w = 4'd0;
            B08_w = 4'd0;
            B09_w = 4'd0;
            B10_w = 4'd0;
            B11_w = 4'd0;
            B12_w = 4'd0;
            B13_w = 4'd0;
            B14_w = 4'd0;
            B15_w = 4'd0;
            B16_w = 4'd0;
            B17_w = 4'd0;
            B18_w = 4'd0;
            B19_w = 4'd0;
            B20_w = 4'd0;
            B21_w = 4'd0;                    
            B22_w = 4'd0;                    
            B23_w = 4'd0;                    
            B24_w = 4'd0;                    
            B25_w = 4'd0;                    
            B26_w = 4'd0;                    
            B27_w = 4'd0;                    
            B28_w = 4'd0;                    
            B29_w = 4'd0;                    
            B30_w = 4'd0;                    
            B31_w = 4'd0;                    
            B32_w = 4'd0;                    
            B33_w = 4'd0;                    
            B34_w = 4'd0;                    
            B35_w = 4'd0;                    
            B36_w = 4'd0;                    
            B37_w = 4'd0;                    
            B38_w = 4'd0;                    
            B39_w = 4'd0;                    
            B40_w = 4'd0;                    
            B41_w = 4'd0;      
            
            B42_w = 4'd0;                    
            B43_w = 4'd0;                    
            B44_w = 4'd0;                    
            B45_w = 4'd0;                    
            B46_w = 4'd0;                    
            B47_w = 4'd0;  
                          
            DIA00_w = Data_from_DMA_r;
            DIA01_w = Data_from_DMA_r;
            DIA02_w = Data_from_DMA_r;
            DIA03_w = Data_from_DMA_r;
            DIA04_w = Data_from_DMA_r;
            DIA05_w = Data_from_DMA_r;
            DIA06_w = Data_from_DMA_r;
            DIA07_w = Data_from_DMA_r;
            DIA08_w = Data_from_DMA_r;
            DIA09_w = Data_from_DMA_r;
            DIA10_w = Data_from_DMA_r;
            DIA11_w = Data_from_DMA_r;
            DIA12_w = Data_from_DMA_r;
            DIA13_w = Data_from_DMA_r;
            DIA14_w = Data_from_DMA_r;
            DIA15_w = Data_from_DMA_r;
            DIA16_w = Data_from_DMA_r;
            DIA17_w = Data_from_DMA_r;
            DIA18_w = Data_from_DMA_r;
            DIA19_w = Data_from_DMA_r;
            DIA20_w = Data_from_DMA_r;
            DIA21_w = Data_from_DMA_r;
            DIA22_w = Data_from_DMA_r;
            DIA23_w = Data_from_DMA_r;
            DIA24_w = Data_from_DMA_r;
            DIA25_w = Data_from_DMA_r;
            DIA26_w = Data_from_DMA_r;
            DIA27_w = Data_from_DMA_r;
            DIA28_w = Data_from_DMA_r;
            DIA29_w = Data_from_DMA_r;
            DIA30_w = Data_from_DMA_r;
            DIA31_w = Data_from_DMA_r;
            DIA32_w = Data_from_DMA_r;
            DIA33_w = Data_from_DMA_r;
            DIA34_w = Data_from_DMA_r;
            DIA35_w = Data_from_DMA_r;
            DIA36_w = Data_from_DMA_r;
            DIA37_w = Data_from_DMA_r;
            DIA38_w = Data_from_DMA_r;
            DIA39_w = Data_from_DMA_r;
            DIA40_w = Data_from_DMA_r;
            DIA41_w = Data_from_DMA_r;
            DIA42_w = Data_from_DMA_r;
            DIA43_w = Data_from_DMA_r;
            DIA44_w = Data_from_DMA_r;
            DIA45_w = Data_from_DMA_r;
            DIA46_w = Data_from_DMA_r;
            DIA47_w = Data_from_DMA_r;
            
            DIB00_w = 64'd0;
            DIB01_w = 64'd0;
            DIB02_w = 64'd0;
            DIB03_w = 64'd0;
            DIB04_w = 64'd0;
            DIB05_w = 64'd0;
            DIB06_w = 64'd0;
            DIB07_w = 64'd0;
            DIB08_w = 64'd0;
            DIB09_w = 64'd0;
            DIB10_w = 64'd0;
            DIB11_w = 64'd0;
            DIB12_w = 64'd0;
            DIB13_w = 64'd0;
            DIB14_w = 64'd0;
            DIB15_w = 64'd0;
            DIB16_w = 64'd0;
            DIB17_w = 64'd0;
            DIB18_w = 64'd0;
            DIB19_w = 64'd0;
            DIB20_w = 64'd0;
            DIB21_w = 64'd0;
            DIB22_w = 64'd0;
            DIB23_w = 64'd0;
            DIB24_w = 64'd0;
            DIB25_w = 64'd0;
            DIB26_w = 64'd0;
            DIB27_w = 64'd0;
            DIB28_w = 64'd0;
            DIB29_w = 64'd0;
            DIB30_w = 64'd0;
            DIB31_w = 64'd0;
            DIB32_w = 64'd0;
            DIB33_w = 64'd0;
            DIB34_w = 64'd0;
            DIB35_w = 64'd0;
            DIB36_w = 64'd0;
            DIB37_w = 64'd0;
            DIB38_w = 64'd0;
            DIB39_w = 64'd0;
            DIB40_w = 64'd0;
            DIB41_w = 64'd0;
            
            DIB42_w = 64'd0;
            DIB43_w = 64'd0;
            DIB44_w = 64'd0;
            DIB45_w = 64'd0;
            DIB46_w = 64'd0;
            DIB47_w = 64'd0;
            
            MUXA00_w = MUXA_from_DMA_r;
            MUXA01_w = MUXA_from_DMA_r;
            MUXA02_w = MUXA_from_DMA_r;
            MUXA03_w = MUXA_from_DMA_r;
            MUXA04_w = MUXA_from_DMA_r;
            MUXA05_w = MUXA_from_DMA_r;
            MUXA06_w = MUXA_from_DMA_r;
            MUXA07_w = MUXA_from_DMA_r;
            MUXA08_w = MUXA_from_DMA_r;
            MUXA09_w = MUXA_from_DMA_r;
            MUXA10_w = MUXA_from_DMA_r;
            MUXA11_w = MUXA_from_DMA_r;
            MUXA12_w = MUXA_from_DMA_r;
            MUXA13_w = MUXA_from_DMA_r;
            MUXA14_w = MUXA_from_DMA_r;
            MUXA15_w = MUXA_from_DMA_r;
            MUXA16_w = MUXA_from_DMA_r;
            MUXA17_w = MUXA_from_DMA_r;
            MUXA18_w = MUXA_from_DMA_r;
            MUXA19_w = MUXA_from_DMA_r;
            MUXA20_w = MUXA_from_DMA_r;
            MUXA21_w = MUXA_from_DMA_r;
            MUXA22_w = MUXA_from_DMA_r;
            MUXA23_w = MUXA_from_DMA_r;
            MUXA24_w = MUXA_from_DMA_r;
            MUXA25_w = MUXA_from_DMA_r;
            MUXA26_w = MUXA_from_DMA_r;
            MUXA27_w = MUXA_from_DMA_r;
            MUXA28_w = MUXA_from_DMA_r;
            MUXA29_w = MUXA_from_DMA_r;
            MUXA30_w = MUXA_from_DMA_r;
            MUXA31_w = MUXA_from_DMA_r;
            MUXA32_w = MUXA_from_DMA_r;
            MUXA33_w = MUXA_from_DMA_r;
            MUXA34_w = MUXA_from_DMA_r;
            MUXA35_w = MUXA_from_DMA_r;
            MUXA36_w = MUXA_from_DMA_r;
            MUXA37_w = MUXA_from_DMA_r;
            MUXA38_w = MUXA_from_DMA_r;
            MUXA39_w = MUXA_from_DMA_r;
            MUXA40_w = MUXA_from_DMA_r;
            MUXA41_w = MUXA_from_DMA_r;
            MUXA42_w = MUXA_from_DMA_r;
            MUXA43_w = MUXA_from_DMA_r;
            MUXA44_w = MUXA_from_DMA_r;
            MUXA45_w = MUXA_from_DMA_r;
            MUXA46_w = MUXA_from_DMA_r;
            MUXA47_w = MUXA_from_DMA_r;
            
            MUXB00_w = 4'd0;
            MUXB01_w = 4'd0;
            MUXB02_w = 4'd0;
            MUXB03_w = 4'd0;
            MUXB04_w = 4'd0;
            MUXB05_w = 4'd0;
            MUXB06_w = 4'd0;
            MUXB07_w = 4'd0;
            MUXB08_w = 4'd0;
            MUXB09_w = 4'd0;
            MUXB10_w = 4'd0;
            MUXB11_w = 4'd0;
            MUXB12_w = 4'd0;
            MUXB13_w = 4'd0;
            MUXB14_w = 4'd0;
            MUXB15_w = 4'd0;
            MUXB16_w = 4'd0;
            MUXB17_w = 4'd0;
            MUXB18_w = 4'd0;
            MUXB19_w = 4'd0;
            MUXB20_w = 4'd0;
            MUXB21_w = 4'd0;
            MUXB22_w = 4'd0;
            MUXB23_w = 4'd0;
            MUXB24_w = 4'd0;
            MUXB25_w = 4'd0;
            MUXB26_w = 4'd0;
            MUXB27_w = 4'd0;
            MUXB28_w = 4'd0;
            MUXB29_w = 4'd0;
            MUXB30_w = 4'd0;
            MUXB31_w = 4'd0;
            MUXB32_w = 4'd0;
            MUXB33_w = 4'd0;
            MUXB34_w = 4'd0;
            MUXB35_w = 4'd0;
            MUXB36_w = 4'd0;
            MUXB37_w = 4'd0;
            MUXB38_w = 4'd0;
            MUXB39_w = 4'd0;
            MUXB40_w = 4'd0;
            MUXB41_w = 4'd0;
            
            MUXB42_w = 4'd0;
            MUXB43_w = 4'd0;
            MUXB44_w = 4'd0;
            MUXB45_w = 4'd0;
            MUXB46_w = 4'd0;
            MUXB47_w = 4'd0;
            
            WEAN_w = {48{WEAN_from_DMA_r}};
            WEBN_w = 48'hFFFFFFFFFFFF;
            OEA_w = 48'hFFFFFFFFFFFF;
            OEB_w = 48'd0;
            choose_reg_A_w = choose_reg_from_DMA;
            choose_reg_B_w = 42'h0;
         end
         `ACCUMULATION_CANDIDATE_BACKGROUND_HISTOGRAM:
         begin
         
            A00_w = 4'd0;
            A01_w = 4'd0; 
            A02_w = 4'd0; 
            A03_w = 4'd0; 
            A04_w = 4'd0; 
            A05_w = 4'd0; 
            A06_w = 4'd0; 
            A07_w = 4'd0; 
            A08_w = 4'd0; 
            A09_w = 4'd0; 
            A10_w = 4'd0; 
            A11_w = 4'd0; 
            A12_w = 4'd0; 
            A13_w = 4'd0; 
            A14_w = 4'd0; 
            A15_w = 4'd0; 
            A16_w = 4'd0; 
            A17_w = 4'd0; 
            A18_w = 4'd0; 
            A19_w = 4'd0; 
            A20_w = 4'd0; 
            A21_w = A_memory_control_Y_w;
            A22_w = A_memory_control_Y_w;
            A23_w = A_memory_control_Y_w;
            A24_w = A_memory_control_Y_w;
            A25_w = A_memory_control_Y_w;
            A26_w = A_memory_control_Y_w;
            A27_w = A_memory_control_Y_w;
            A28_w = A_memory_control_U_w;
            A29_w = A_memory_control_U_w;
            A30_w = A_memory_control_U_w;
            A31_w = A_memory_control_U_w;
            A32_w = A_memory_control_U_w;
            A33_w = A_memory_control_U_w;
            A34_w = A_memory_control_U_w;
            A35_w = A_memory_control_V_w;
            A36_w = A_memory_control_V_w;
            A37_w = A_memory_control_V_w;
            A38_w = A_memory_control_V_w;
            A39_w = A_memory_control_V_w;
            A40_w = A_memory_control_V_w;
            A41_w = A_memory_control_V_w;
            A42_w = buffer_addr_A_w;       
            A43_w = buffer_addr_A_w;       
            A44_w = buffer_addr_A_w;       
            A45_w = Cordic_buffer_addr_A_w;
            A46_w = 4'd0;
            A47_w = MASK_buffer_A_w;
            B00_w = 4'd0;
            B01_w = 4'd0;
            B02_w = 4'd0;
            B03_w = 4'd0;
            B04_w = 4'd0;
            B05_w = 4'd0;
            B06_w = 4'd0;
            B07_w = 4'd0;
            B08_w = 4'd0;
            B09_w = 4'd0;
            B10_w = 4'd0;
            B11_w = 4'd0;
            B12_w = 4'd0;
            B13_w = 4'd0;
            B14_w = 4'd0;
            B15_w = 4'd0;
            B16_w = 4'd0;
            B17_w = 4'd0;
            B18_w = 4'd0;
            B19_w = 4'd0;
            B20_w = 4'd0;
            B21_w = B_memory_control_Y_w;                    
            B22_w = B_memory_control_Y_w;                    
            B23_w = B_memory_control_Y_w;                    
            B24_w = B_memory_control_Y_w;                    
            B25_w = B_memory_control_Y_w;                    
            B26_w = B_memory_control_Y_w;                    
            B27_w = B_memory_control_Y_w;                    
            B28_w = B_memory_control_U_w;                    
            B29_w = B_memory_control_U_w;                    
            B30_w = B_memory_control_U_w;                    
            B31_w = B_memory_control_U_w;                    
            B32_w = B_memory_control_U_w;                    
            B33_w = B_memory_control_U_w;                    
            B34_w = B_memory_control_U_w;                    
            B35_w = B_memory_control_V_w;                    
            B36_w = B_memory_control_V_w;                    
            B37_w = B_memory_control_V_w;                    
            B38_w = B_memory_control_V_w;                    
            B39_w = B_memory_control_V_w;                    
            B40_w = B_memory_control_V_w;                    
            B41_w = B_memory_control_V_w;  
            B42_w = 4'd0; 
            B43_w = 4'd0;
            B44_w = 4'd0;
            B45_w = 4'd0;
            B46_w = 4'd0;
            B47_w = 4'd0;                  
            DIA00_w = 64'd0;
            DIA01_w = 64'd0;
            DIA02_w = 64'd0;
            DIA03_w = 64'd0;
            DIA04_w = 64'd0;
            DIA05_w = 64'd0;
            DIA06_w = 64'd0;
            DIA07_w = 64'd0;
            DIA08_w = 64'd0;
            DIA09_w = 64'd0;
            DIA10_w = 64'd0;
            DIA11_w = 64'd0;
            DIA12_w = 64'd0;
            DIA13_w = 64'd0;
            DIA14_w = 64'd0;
            DIA15_w = 64'd0;
            DIA16_w = 64'd0;
            DIA17_w = 64'd0;
            DIA18_w = 64'd0;
            DIA19_w = 64'd0;
            DIA20_w = 64'd0;
            DIA21_w = DIA_T_memory_control_Y_w;
            DIA22_w = DIA_T_memory_control_Y_w;
            DIA23_w = DIA_T_memory_control_Y_w;
            DIA24_w = DIA_T_memory_control_Y_w;
            DIA25_w = DIA_T_memory_control_Y_w;
            DIA26_w = DIA_T_memory_control_Y_w;
            DIA27_w = DIA_T_memory_control_Y_w;
            DIA28_w = DIA_T_memory_control_U_w;
            DIA29_w = DIA_T_memory_control_U_w;
            DIA30_w = DIA_T_memory_control_U_w;
            DIA31_w = DIA_T_memory_control_U_w;
            DIA32_w = DIA_T_memory_control_U_w;
            DIA33_w = DIA_T_memory_control_U_w;
            DIA34_w = DIA_T_memory_control_U_w;
            DIA35_w = DIA_T_memory_control_V_w;
            DIA36_w = DIA_T_memory_control_V_w;
            DIA37_w = DIA_T_memory_control_V_w;
            DIA38_w = DIA_T_memory_control_V_w;
            DIA39_w = DIA_T_memory_control_V_w;
            DIA40_w = DIA_T_memory_control_V_w;
            DIA41_w = DIA_T_memory_control_V_w;
            DIA42_w = Y_buffer_data_write_w;
            DIA43_w = U_buffer_data_write_w;
            DIA44_w = V_buffer_data_write_w;
            DIA45_w = Cordic_buffer_data_write_w;
            DIA46_w = Weight_buffer_data_write_w;
            DIA47_w = mask_in;
            DIB00_w = 64'd0;
            DIB01_w = 64'd0;
            DIB02_w = 64'd0;
            DIB03_w = 64'd0;
            DIB04_w = 64'd0;
            DIB05_w = 64'd0;
            DIB06_w = 64'd0;
            DIB07_w = 64'd0;
            DIB08_w = 64'd0;
            DIB09_w = 64'd0;
            DIB10_w = 64'd0;
            DIB11_w = 64'd0;
            DIB12_w = 64'd0;
            DIB13_w = 64'd0;
            DIB14_w = 64'd0;
            DIB15_w = 64'd0;
            DIB16_w = 64'd0;
            DIB17_w = 64'd0;
            DIB18_w = 64'd0;
            DIB19_w = 64'd0;
            DIB20_w = 64'd0;
            DIB21_w = DIB_T_memory_control_Y_w;
            DIB22_w = DIB_T_memory_control_Y_w;
            DIB23_w = DIB_T_memory_control_Y_w;
            DIB24_w = DIB_T_memory_control_Y_w;
            DIB25_w = DIB_T_memory_control_Y_w;
            DIB26_w = DIB_T_memory_control_Y_w;
            DIB27_w = DIB_T_memory_control_Y_w;
            DIB28_w = DIB_T_memory_control_U_w;
            DIB29_w = DIB_T_memory_control_U_w;
            DIB30_w = DIB_T_memory_control_U_w;
            DIB31_w = DIB_T_memory_control_U_w;
            DIB32_w = DIB_T_memory_control_U_w;
            DIB33_w = DIB_T_memory_control_U_w;
            DIB34_w = DIB_T_memory_control_U_w;
            DIB35_w = DIB_T_memory_control_V_w;
            DIB36_w = DIB_T_memory_control_V_w;
            DIB37_w = DIB_T_memory_control_V_w;
            DIB38_w = DIB_T_memory_control_V_w;
            DIB39_w = DIB_T_memory_control_V_w;
            DIB40_w = DIB_T_memory_control_V_w;
            DIB41_w = DIB_T_memory_control_V_w;
            DIB42_w = 64'd0;
            DIB43_w = 64'd0;
            DIB44_w = 64'd0;
            DIB45_w = 64'd0;
            DIB46_w = 64'd0;
            DIB47_w = 64'd0;
            MUXA00_w = 4'd0;
            MUXA01_w = 4'd0;
            MUXA02_w = 4'd0;
            MUXA03_w = 4'd0;
            MUXA04_w = 4'd0;
            MUXA05_w = 4'd0;
            MUXA06_w = 4'd0;
            MUXA07_w = 4'd0;
            MUXA08_w = 4'd0;
            MUXA09_w = 4'd0;
            MUXA10_w = 4'd0;
            MUXA11_w = 4'd0;
            MUXA12_w = 4'd0;
            MUXA13_w = 4'd0;
            MUXA14_w = 4'd0;
            MUXA15_w = 4'd0;
            MUXA16_w = 4'd0;
            MUXA17_w = 4'd0;
            MUXA18_w = 4'd0;
            MUXA19_w = 4'd0;
            MUXA20_w = 4'd0;
            MUXA21_w = MUXA_memory_control_Y;
            MUXA22_w = MUXA_memory_control_Y;
            MUXA23_w = MUXA_memory_control_Y;
            MUXA24_w = MUXA_memory_control_Y;
            MUXA25_w = MUXA_memory_control_Y;
            MUXA26_w = MUXA_memory_control_Y;
            MUXA27_w = MUXA_memory_control_Y;
            MUXA28_w = MUXA_memory_control_U;
            MUXA29_w = MUXA_memory_control_U;
            MUXA30_w = MUXA_memory_control_U;
            MUXA31_w = MUXA_memory_control_U;
            MUXA32_w = MUXA_memory_control_U;
            MUXA33_w = MUXA_memory_control_U;
            MUXA34_w = MUXA_memory_control_U;
            MUXA35_w = MUXA_memory_control_V;
            MUXA36_w = MUXA_memory_control_V;
            MUXA37_w = MUXA_memory_control_V;
            MUXA38_w = MUXA_memory_control_V;
            MUXA39_w = MUXA_memory_control_V;
            MUXA40_w = MUXA_memory_control_V;
            MUXA41_w = MUXA_memory_control_V;
            MUXA42_w = buffer_MUXA_w;
            MUXA43_w = buffer_MUXA_w;
            MUXA44_w = buffer_MUXA_w;
            MUXA45_w = Cordic_buffer_MUXA_w;
            MUXA46_w = buffer_MUXA_w;
            MUXA47_w = 4'b1111;
            MUXB00_w = 4'd0;
            MUXB01_w = 4'd0;
            MUXB02_w = 4'd0;
            MUXB03_w = 4'd0;
            MUXB04_w = 4'd0;
            MUXB05_w = 4'd0;
            MUXB06_w = 4'd0;
            MUXB07_w = 4'd0;
            MUXB08_w = 4'd0;
            MUXB09_w = 4'd0;
            MUXB10_w = 4'd0;
            MUXB11_w = 4'd0;
            MUXB12_w = 4'd0;
            MUXB13_w = 4'd0;
            MUXB14_w = 4'd0;
            MUXB15_w = 4'd0;
            MUXB16_w = 4'd0;
            MUXB17_w = 4'd0;
            MUXB18_w = 4'd0;
            MUXB19_w = 4'd0;
            MUXB20_w = 4'd0;
            MUXB21_w = MUXB_memory_control_Y;
            MUXB22_w = MUXB_memory_control_Y;
            MUXB23_w = MUXB_memory_control_Y;
            MUXB24_w = MUXB_memory_control_Y;
            MUXB25_w = MUXB_memory_control_Y;
            MUXB26_w = MUXB_memory_control_Y;
            MUXB27_w = MUXB_memory_control_Y;
            MUXB28_w = MUXB_memory_control_U;
            MUXB29_w = MUXB_memory_control_U;
            MUXB30_w = MUXB_memory_control_U;
            MUXB31_w = MUXB_memory_control_U;
            MUXB32_w = MUXB_memory_control_U;
            MUXB33_w = MUXB_memory_control_U;
            MUXB34_w = MUXB_memory_control_U;
            MUXB35_w = MUXB_memory_control_V;
            MUXB36_w = MUXB_memory_control_V;
            MUXB37_w = MUXB_memory_control_V;
            MUXB38_w = MUXB_memory_control_V;
            MUXB39_w = MUXB_memory_control_V;
            MUXB40_w = MUXB_memory_control_V;
            MUXB41_w = MUXB_memory_control_V;
            MUXB42_w = 4'd0;
            MUXB43_w = 4'd0;
            MUXB44_w = 4'd0;
            MUXB45_w = 4'd0;
            MUXB46_w = 4'd0;
            MUXB47_w = 4'd0;
            WEAN_w = {MASK_WEAN_w,{2{Cordic_buffer_WEAN_w}}, buffer_WEAN_V_w, buffer_WEAN_U_w, buffer_WEAN_Y_w,{7{wea_V_pazen}},{7{wea_U_pazen}},{7{wea_Y_pazen}}, 21'h1fffff};
            WEBN_w = {6'd1, {7{web_V_pazen}},{7{web_U_pazen}},{7{web_Y_pazen}}, 21'h1fffff};
            OEA_w = {1'b1,{5{buffer_OEA_w}}, {7{oea_V_pazen}},{7{oea_U_pazen}},{7{oea_Y_pazen}}, 21'd0};
            OEB_w = {6'd0, {7{oeb_V_pazen}},{7{oeb_U_pazen}},{7{oeb_Y_pazen}}, 21'd0};
            choose_reg_A_w = {MASK_choose_reg_A_w, {5{buffer_choose_reg_A_w}}, choose_reg_A_memory_control_V_w, choose_reg_A_memory_control_U_w, choose_reg_A_memory_control_Y_w, 21'd0};
            choose_reg_B_w = {6'd0, choose_reg_B_memory_control_V_w, choose_reg_B_memory_control_U_w, choose_reg_B_memory_control_Y_w, 21'd0};
            
         
         end
         `ACCUMULATION_TARGET_BACKGROUND_HISTOGRAM:
         begin
            A00_w = A_memory_control_Y_w;
            A01_w = A_memory_control_Y_w; 
            A02_w = A_memory_control_Y_w; 
            A03_w = A_memory_control_Y_w; 
            A04_w = A_memory_control_Y_w; 
            A05_w = A_memory_control_Y_w; 
            A06_w = A_memory_control_Y_w; 
            A07_w = A_memory_control_U_w; 
            A08_w = A_memory_control_U_w; 
            A09_w = A_memory_control_U_w; 
            A10_w = A_memory_control_U_w; 
            A11_w = A_memory_control_U_w; 
            A12_w = A_memory_control_U_w; 
            A13_w = A_memory_control_U_w; 
            A14_w = A_memory_control_V_w; 
            A15_w = A_memory_control_V_w; 
            A16_w = A_memory_control_V_w; 
            A17_w = A_memory_control_V_w; 
            A18_w = A_memory_control_V_w; 
            A19_w = A_memory_control_V_w; 
            A20_w = A_memory_control_V_w; 
            A21_w = 4'd0;
            A22_w = 4'd0;
            A23_w = 4'd0;
            A24_w = 4'd0;
            A25_w = 4'd0;
            A26_w = 4'd0;
            A27_w = 4'd0;
            A28_w = 4'd0;
            A29_w = 4'd0;
            A30_w = 4'd0;
            A31_w = 4'd0;
            A32_w = 4'd0;
            A33_w = 4'd0;
            A34_w = 4'd0;
            A35_w = 4'd0;
            A36_w = 4'd0;
            A37_w = 4'd0;
            A38_w = 4'd0;
            A39_w = 4'd0;
            A40_w = 4'd0;
            A41_w = 4'd0;
            A42_w = buffer_addr_A_w;       
            A43_w = buffer_addr_A_w;       
            A44_w = buffer_addr_A_w;       
            A45_w = Cordic_buffer_addr_A_w;
            A46_w = 4'd0;
            A47_w = MASK_buffer_A_w;
            B00_w = B_memory_control_Y_w;
            B01_w = B_memory_control_Y_w;
            B02_w = B_memory_control_Y_w;
            B03_w = B_memory_control_Y_w;
            B04_w = B_memory_control_Y_w;
            B05_w = B_memory_control_Y_w;
            B06_w = B_memory_control_Y_w;
            B07_w = B_memory_control_U_w;
            B08_w = B_memory_control_U_w;
            B09_w = B_memory_control_U_w;
            B10_w = B_memory_control_U_w;
            B11_w = B_memory_control_U_w;
            B12_w = B_memory_control_U_w;
            B13_w = B_memory_control_U_w;
            B14_w = B_memory_control_V_w;
            B15_w = B_memory_control_V_w;
            B16_w = B_memory_control_V_w;
            B17_w = B_memory_control_V_w;
            B18_w = B_memory_control_V_w;
            B19_w = B_memory_control_V_w;
            B20_w = B_memory_control_V_w;
            B21_w = 4'd0;                    
            B22_w = 4'd0;                    
            B23_w = 4'd0;                    
            B24_w = 4'd0;                    
            B25_w = 4'd0;                    
            B26_w = 4'd0;                    
            B27_w = 4'd0;                    
            B28_w = 4'd0;                    
            B29_w = 4'd0;                    
            B30_w = 4'd0;                    
            B31_w = 4'd0;                    
            B32_w = 4'd0;                    
            B33_w = 4'd0;                    
            B34_w = 4'd0;                    
            B35_w = 4'd0;                    
            B36_w = 4'd0;                    
            B37_w = 4'd0;                    
            B38_w = 4'd0;                    
            B39_w = 4'd0;                    
            B40_w = 4'd0;                    
            B41_w = 4'd0;
            B42_w = 4'd0; 
            B43_w = 4'd0;
            B44_w = 4'd0;
            B45_w = 4'd0;
            B46_w = 4'd0;
            B47_w = 4'd0;
            DIA00_w = DIA_T_memory_control_Y_w;
            DIA01_w = DIA_T_memory_control_Y_w;
            DIA02_w = DIA_T_memory_control_Y_w;
            DIA03_w = DIA_T_memory_control_Y_w;
            DIA04_w = DIA_T_memory_control_Y_w;
            DIA05_w = DIA_T_memory_control_Y_w;
            DIA06_w = DIA_T_memory_control_Y_w;
            DIA07_w = DIA_T_memory_control_U_w;
            DIA08_w = DIA_T_memory_control_U_w;
            DIA09_w = DIA_T_memory_control_U_w;
            DIA10_w = DIA_T_memory_control_U_w;
            DIA11_w = DIA_T_memory_control_U_w;
            DIA12_w = DIA_T_memory_control_U_w;
            DIA13_w = DIA_T_memory_control_U_w;
            DIA14_w = DIA_T_memory_control_V_w;
            DIA15_w = DIA_T_memory_control_V_w;
            DIA16_w = DIA_T_memory_control_V_w;
            DIA17_w = DIA_T_memory_control_V_w;
            DIA18_w = DIA_T_memory_control_V_w;
            DIA19_w = DIA_T_memory_control_V_w;
            DIA20_w = DIA_T_memory_control_V_w;
            DIA21_w = 64'd0;
            DIA22_w = 64'd0;
            DIA23_w = 64'd0;
            DIA24_w = 64'd0;
            DIA25_w = 64'd0;
            DIA26_w = 64'd0;
            DIA27_w = 64'd0;
            DIA28_w = 64'd0;
            DIA29_w = 64'd0;
            DIA30_w = 64'd0;
            DIA31_w = 64'd0;
            DIA32_w = 64'd0;
            DIA33_w = 64'd0;
            DIA34_w = 64'd0;
            DIA35_w = 64'd0;
            DIA36_w = 64'd0;
            DIA37_w = 64'd0;
            DIA38_w = 64'd0;
            DIA39_w = 64'd0;
            DIA40_w = 64'd0;
            DIA41_w = 64'd0;
            DIA42_w = Y_buffer_data_write_w;
            DIA43_w = U_buffer_data_write_w;
            DIA44_w = V_buffer_data_write_w;
            DIA45_w = Cordic_buffer_data_write_w;
            DIA46_w = Weight_buffer_data_write_w;
            DIA47_w = mask_in;
            DIB00_w = DIB_T_memory_control_Y_w;
            DIB01_w = DIB_T_memory_control_Y_w;
            DIB02_w = DIB_T_memory_control_Y_w;
            DIB03_w = DIB_T_memory_control_Y_w;
            DIB04_w = DIB_T_memory_control_Y_w;
            DIB05_w = DIB_T_memory_control_Y_w;
            DIB06_w = DIB_T_memory_control_Y_w;
            DIB07_w = DIB_T_memory_control_U_w;
            DIB08_w = DIB_T_memory_control_U_w;
            DIB09_w = DIB_T_memory_control_U_w;
            DIB10_w = DIB_T_memory_control_U_w;
            DIB11_w = DIB_T_memory_control_U_w;
            DIB12_w = DIB_T_memory_control_U_w;
            DIB13_w = DIB_T_memory_control_U_w;
            DIB14_w = DIB_T_memory_control_V_w;
            DIB15_w = DIB_T_memory_control_V_w;
            DIB16_w = DIB_T_memory_control_V_w;
            DIB17_w = DIB_T_memory_control_V_w;
            DIB18_w = DIB_T_memory_control_V_w;
            DIB19_w = DIB_T_memory_control_V_w;
            DIB20_w = DIB_T_memory_control_V_w;
            DIB21_w = 64'd0;
            DIB22_w = 64'd0;
            DIB23_w = 64'd0;
            DIB24_w = 64'd0;
            DIB25_w = 64'd0;
            DIB26_w = 64'd0;
            DIB27_w = 64'd0;
            DIB28_w = 64'd0;
            DIB29_w = 64'd0;
            DIB30_w = 64'd0;
            DIB31_w = 64'd0;
            DIB32_w = 64'd0;
            DIB33_w = 64'd0;
            DIB34_w = 64'd0;
            DIB35_w = 64'd0;
            DIB36_w = 64'd0;
            DIB37_w = 64'd0;
            DIB38_w = 64'd0;
            DIB39_w = 64'd0;
            DIB40_w = 64'd0;
            DIB41_w = 64'd0;
            DIB42_w = 64'd0;
            DIB43_w = 64'd0;
            DIB44_w = 64'd0;
            DIB45_w = 64'd0;
            DIB46_w = 64'd0;
            DIB47_w = 64'd0;
            MUXA00_w = MUXA_memory_control_Y;
            MUXA01_w = MUXA_memory_control_Y;
            MUXA02_w = MUXA_memory_control_Y;
            MUXA03_w = MUXA_memory_control_Y;
            MUXA04_w = MUXA_memory_control_Y;
            MUXA05_w = MUXA_memory_control_Y;
            MUXA06_w = MUXA_memory_control_Y;
            MUXA07_w = MUXA_memory_control_U;
            MUXA08_w = MUXA_memory_control_U;
            MUXA09_w = MUXA_memory_control_U;
            MUXA10_w = MUXA_memory_control_U;
            MUXA11_w = MUXA_memory_control_U;
            MUXA12_w = MUXA_memory_control_U;
            MUXA13_w = MUXA_memory_control_U;
            MUXA14_w = MUXA_memory_control_V;
            MUXA15_w = MUXA_memory_control_V;
            MUXA16_w = MUXA_memory_control_V;
            MUXA17_w = MUXA_memory_control_V;
            MUXA18_w = MUXA_memory_control_V;
            MUXA19_w = MUXA_memory_control_V;
            MUXA20_w = MUXA_memory_control_V;
            MUXA21_w = 4'd0;
            MUXA22_w = 4'd0;
            MUXA23_w = 4'd0;
            MUXA24_w = 4'd0;
            MUXA25_w = 4'd0;
            MUXA26_w = 4'd0;
            MUXA27_w = 4'd0;
            MUXA28_w = 4'd0;
            MUXA29_w = 4'd0;
            MUXA30_w = 4'd0;
            MUXA31_w = 4'd0;
            MUXA32_w = 4'd0;
            MUXA33_w = 4'd0;
            MUXA34_w = 4'd0;
            MUXA35_w = 4'd0;
            MUXA36_w = 4'd0;
            MUXA37_w = 4'd0;
            MUXA38_w = 4'd0;
            MUXA39_w = 4'd0;
            MUXA40_w = 4'd0;
            MUXA41_w = 4'd0;
            MUXA42_w = buffer_MUXA_w;
            MUXA43_w = buffer_MUXA_w;
            MUXA44_w = buffer_MUXA_w;
            MUXA45_w = Cordic_buffer_MUXA_w;
            MUXA46_w = buffer_MUXA_w;
            MUXA47_w = 4'b1111;
            MUXB00_w = MUXB_memory_control_Y;
            MUXB01_w = MUXB_memory_control_Y;
            MUXB02_w = MUXB_memory_control_Y;
            MUXB03_w = MUXB_memory_control_Y;
            MUXB04_w = MUXB_memory_control_Y;
            MUXB05_w = MUXB_memory_control_Y;
            MUXB06_w = MUXB_memory_control_Y;
            MUXB07_w = MUXB_memory_control_U;
            MUXB08_w = MUXB_memory_control_U;
            MUXB09_w = MUXB_memory_control_U;
            MUXB10_w = MUXB_memory_control_U;
            MUXB11_w = MUXB_memory_control_U;
            MUXB12_w = MUXB_memory_control_U;
            MUXB13_w = MUXB_memory_control_U;
            MUXB14_w = MUXB_memory_control_V;
            MUXB15_w = MUXB_memory_control_V;
            MUXB16_w = MUXB_memory_control_V;
            MUXB17_w = MUXB_memory_control_V;
            MUXB18_w = MUXB_memory_control_V;
            MUXB19_w = MUXB_memory_control_V;
            MUXB20_w = MUXB_memory_control_V;
            MUXB21_w = 4'd0;
            MUXB22_w = 4'd0;
            MUXB23_w = 4'd0;
            MUXB24_w = 4'd0;
            MUXB25_w = 4'd0;
            MUXB26_w = 4'd0;
            MUXB27_w = 4'd0;
            MUXB28_w = 4'd0;
            MUXB29_w = 4'd0;
            MUXB30_w = 4'd0;
            MUXB31_w = 4'd0;
            MUXB32_w = 4'd0;
            MUXB33_w = 4'd0;
            MUXB34_w = 4'd0;
            MUXB35_w = 4'd0;
            MUXB36_w = 4'd0;
            MUXB37_w = 4'd0;
            MUXB38_w = 4'd0;
            MUXB39_w = 4'd0;
            MUXB40_w = 4'd0;
            MUXB41_w = 4'd0;
            MUXB42_w = 4'd0;
            MUXB43_w = 4'd0;
            MUXB44_w = 4'd0;
            MUXB45_w = 4'd0;
            MUXB46_w = 4'd0;
            MUXB47_w = 4'd0;
            WEAN_w = {MASK_WEAN_w,{2{Cordic_buffer_WEAN_w}}, buffer_WEAN_V_w, buffer_WEAN_U_w, buffer_WEAN_Y_w, 21'h1fffff,{7{wea_V_pazen}},{7{wea_U_pazen}},{7{wea_Y_pazen}}};
            WEBN_w = {27'h7FFFFFF,{7{web_V_pazen}},{7{web_U_pazen}},{7{web_Y_pazen}}};
            OEA_w = {1'b1,{5{buffer_OEA_w}}, 21'd0,{7{oea_V_pazen}},{7{oea_U_pazen}},{7{oea_Y_pazen}}};
            OEB_w = {27'd0,{7{oeb_V_pazen}},{7{oeb_U_pazen}},{7{oeb_Y_pazen}}};
            choose_reg_A_w = {MASK_choose_reg_A_w, {5{buffer_choose_reg_A_w}}, 21'd0, choose_reg_A_memory_control_V_w, choose_reg_A_memory_control_U_w, choose_reg_A_memory_control_Y_w};
            choose_reg_B_w = {27'd0, choose_reg_B_memory_control_V_w, choose_reg_B_memory_control_U_w, choose_reg_B_memory_control_Y_w};
            
         end
         `CONNECT_COMPONENT_ANALYSIS:
         begin
            A00_w = CCA_D_A_w;
            A01_w = CCA_D_A_w; 
            A02_w = CCA_D_A_w; 
            A03_w = CCA_D_A_w; 
            A04_w = CCA_D_A_w; 
            A05_w = CCA_D_A_w; 
            A06_w = CCA_D_A_w; 
            A07_w = CCA_D_A_w; 
            A08_w = CCA_D_A_w; 
            A09_w = CCA_D_A_w; 
            A10_w = CCA_D_A_w; 
            A11_w = CCA_D_A_w; 
            A12_w = CCA_D_A_w; 
            A13_w = CCA_D_A_w; 
            A14_w = CCA_D_A_w; 
            A15_w = CCA_D_A_w; 
            A16_w = CCA_D_A_w; 
            A17_w = CCA_D_A_w; 
            A18_w = CCA_D_A_w; 
            A19_w = CCA_D_A_w; 
            A20_w = CCA_I_A_w; 
            A21_w = CCA_I_A_w;
            A22_w = 4'd0;
            A23_w = 4'd0;
            A24_w = 4'd0;
            A25_w = 4'd0;
            A26_w = 4'd0;
            A27_w = 4'd0;
            A28_w = 4'd0;
            A29_w = 4'd0;
            A30_w = 4'd0;
            A31_w = 4'd0;
            A32_w = 4'd0;
            A33_w = 4'd0;
            A34_w = 4'd0;
            A35_w = 4'd0;
            A36_w = 4'd0;
            A37_w = 4'd0;
            A38_w = 4'd0;
            A39_w = 4'd0;
            A40_w = 4'd0;
            A41_w = 4'd0;
            
            A42_w = 4'd0;
            A43_w = 4'd0;
            A44_w = 4'd0;
            A45_w = 4'd0;
            A46_w = 4'd0;
            A47_w = 4'd0;
            
            B00_w = 4'd0;
            B01_w = 4'd0;
            B02_w = 4'd0;
            B03_w = 4'd0;
            B04_w = 4'd0;
            B05_w = 4'd0;
            B06_w = 4'd0;
            B07_w = 4'd0;
            B08_w = 4'd0;
            B09_w = 4'd0;
            B10_w = 4'd0;
            B11_w = 4'd0;
            B12_w = 4'd0;
            B13_w = 4'd0;
            B14_w = 4'd0;
            B15_w = 4'd0;
            B16_w = 4'd0;
            B17_w = 4'd0;
            B18_w = 4'd0;
            B19_w = 4'd0;
            B20_w = 4'd0;
            B21_w = 4'd0;                    
            B22_w = 4'd0;                    
            B23_w = 4'd0;                    
            B24_w = 4'd0;                    
            B25_w = 4'd0;                    
            B26_w = 4'd0;                    
            B27_w = 4'd0;                    
            B28_w = 4'd0;                    
            B29_w = 4'd0;                    
            B30_w = 4'd0;                    
            B31_w = 4'd0;                    
            B32_w = 4'd0;                    
            B33_w = 4'd0;                    
            B34_w = 4'd0;                    
            B35_w = 4'd0;                    
            B36_w = 4'd0;                    
            B37_w = 4'd0;                    
            B38_w = 4'd0;                    
            B39_w = 4'd0;                    
            B40_w = 4'd0;                    
            B41_w = 4'd0;      
            
            B42_w = 4'd0;                    
            B43_w = 4'd0;                    
            B44_w = 4'd0;                    
            B45_w = 4'd0;                    
            B46_w = 4'd0;                    
            B47_w = 4'd0;  
                          
            DIA00_w = CCA_D_DIA_00_w;
            DIA01_w = CCA_D_DIA_01_w;
            DIA02_w = CCA_D_DIA_02_w;
            DIA03_w = CCA_D_DIA_03_w;
            DIA04_w = CCA_D_DIA_04_w;
            DIA05_w = CCA_D_DIA_05_w;
            DIA06_w = CCA_D_DIA_06_w;
            DIA07_w = CCA_D_DIA_07_w;
            DIA08_w = CCA_D_DIA_08_w;
            DIA09_w = CCA_D_DIA_09_w;
            DIA10_w = CCA_D_DIA_10_w;
            DIA11_w = CCA_D_DIA_11_w;
            DIA12_w = CCA_D_DIA_12_w;
            DIA13_w = CCA_D_DIA_13_w;
            DIA14_w = CCA_D_DIA_14_w;
            DIA15_w = CCA_D_DIA_15_w;
            DIA16_w = CCA_D_DIA_16_w;
            DIA17_w = CCA_D_DIA_17_w;
            DIA18_w = CCA_D_DIA_18_w;
            DIA19_w = CCA_D_DIA_19_w;
            DIA20_w = CCA_I_DIA_0_w;
            DIA21_w = CCA_I_DIA_1_w;
            DIA22_w = 64'd0;
            DIA23_w = 64'd0;
            DIA24_w = 64'd0;
            DIA25_w = 64'd0;
            DIA26_w = 64'd0;
            DIA27_w = 64'd0;
            DIA28_w = 64'd0;
            DIA29_w = 64'd0;
            DIA30_w = 64'd0;
            DIA31_w = 64'd0;
            DIA32_w = 64'd0;
            DIA33_w = 64'd0;
            DIA34_w = 64'd0;
            DIA35_w = 64'd0;
            DIA36_w = 64'd0;
            DIA37_w = 64'd0;
            DIA38_w = 64'd0;
            DIA39_w = 64'd0;
            DIA40_w = 64'd0;
            DIA41_w = 64'd0;
            
            DIA42_w = 64'd0;
            DIA43_w = 64'd0;
            DIA44_w = 64'd0;
            DIA45_w = 64'd0;
            DIA46_w = 64'd0;
            DIA47_w = 64'd0;
            
            DIB00_w = 64'd0;
            DIB01_w = 64'd0;
            DIB02_w = 64'd0;
            DIB03_w = 64'd0;
            DIB04_w = 64'd0;
            DIB05_w = 64'd0;
            DIB06_w = 64'd0;
            DIB07_w = 64'd0;
            DIB08_w = 64'd0;
            DIB09_w = 64'd0;
            DIB10_w = 64'd0;
            DIB11_w = 64'd0;
            DIB12_w = 64'd0;
            DIB13_w = 64'd0;
            DIB14_w = 64'd0;
            DIB15_w = 64'd0;
            DIB16_w = 64'd0;
            DIB17_w = 64'd0;
            DIB18_w = 64'd0;
            DIB19_w = 64'd0;
            DIB20_w = 64'd0;
            DIB21_w = 64'd0;
            DIB22_w = 64'd0;
            DIB23_w = 64'd0;
            DIB24_w = 64'd0;
            DIB25_w = 64'd0;
            DIB26_w = 64'd0;
            DIB27_w = 64'd0;
            DIB28_w = 64'd0;
            DIB29_w = 64'd0;
            DIB30_w = 64'd0;
            DIB31_w = 64'd0;
            DIB32_w = 64'd0;
            DIB33_w = 64'd0;
            DIB34_w = 64'd0;
            DIB35_w = 64'd0;
            DIB36_w = 64'd0;
            DIB37_w = 64'd0;
            DIB38_w = 64'd0;
            DIB39_w = 64'd0;
            DIB40_w = 64'd0;
            DIB41_w = 64'd0;
            
            DIB42_w = 64'd0;
            DIB43_w = 64'd0;
            DIB44_w = 64'd0;
            DIB45_w = 64'd0;
            DIB46_w = 64'd0;
            DIB47_w = 64'd0;
            
            MUXA00_w = DIA_D_MUX_w;
            MUXA01_w = DIA_D_MUX_w;
            MUXA02_w = DIA_D_MUX_w;
            MUXA03_w = DIA_D_MUX_w;
            MUXA04_w = DIA_D_MUX_w;
            MUXA05_w = DIA_D_MUX_w;
            MUXA06_w = DIA_D_MUX_w;
            MUXA07_w = DIA_D_MUX_w;
            MUXA08_w = DIA_D_MUX_w;
            MUXA09_w = DIA_D_MUX_w;
            MUXA10_w = DIA_D_MUX_w;
            MUXA11_w = DIA_D_MUX_w;
            MUXA12_w = DIA_D_MUX_w;
            MUXA13_w = DIA_D_MUX_w;
            MUXA14_w = DIA_D_MUX_w;
            MUXA15_w = DIA_D_MUX_w;
            MUXA16_w = DIA_D_MUX_w;
            MUXA17_w = DIA_D_MUX_w;
            MUXA18_w = DIA_D_MUX_w;
            MUXA19_w = DIA_D_MUX_w;
            MUXA20_w = 4'b1111;
            MUXA21_w = 4'b1111;
            MUXA22_w = 4'd0;
            MUXA23_w = 4'd0;
            MUXA24_w = 4'd0;
            MUXA25_w = 4'd0;
            MUXA26_w = 4'd0;
            MUXA27_w = 4'd0;
            MUXA28_w = 4'd0;
            MUXA29_w = 4'd0;
            MUXA30_w = 4'd0;
            MUXA31_w = 4'd0;
            MUXA32_w = 4'd0;
            MUXA33_w = 4'd0;
            MUXA34_w = 4'd0;
            MUXA35_w = 4'd0;
            MUXA36_w = 4'd0;
            MUXA37_w = 4'd0;
            MUXA38_w = 4'd0;
            MUXA39_w = 4'd0;
            MUXA40_w = 4'd0;
            MUXA41_w = 4'd0;
            
            MUXA42_w = 4'd0;
            MUXA43_w = 4'd0;
            MUXA44_w = 4'd0;
            MUXA45_w = 4'd0;
            MUXA46_w = 4'd0;
            MUXA47_w = 4'd0;
            
            MUXB00_w = 4'd0;
            MUXB01_w = 4'd0;
            MUXB02_w = 4'd0;
            MUXB03_w = 4'd0;
            MUXB04_w = 4'd0;
            MUXB05_w = 4'd0;
            MUXB06_w = 4'd0;
            MUXB07_w = 4'd0;
            MUXB08_w = 4'd0;
            MUXB09_w = 4'd0;
            MUXB10_w = 4'd0;
            MUXB11_w = 4'd0;
            MUXB12_w = 4'd0;
            MUXB13_w = 4'd0;
            MUXB14_w = 4'd0;
            MUXB15_w = 4'd0;
            MUXB16_w = 4'd0;
            MUXB17_w = 4'd0;
            MUXB18_w = 4'd0;
            MUXB19_w = 4'd0;
            MUXB20_w = 4'd0;
            MUXB21_w = 4'd0;
            MUXB22_w = 4'd0;
            MUXB23_w = 4'd0;
            MUXB24_w = 4'd0;
            MUXB25_w = 4'd0;
            MUXB26_w = 4'd0;
            MUXB27_w = 4'd0;
            MUXB28_w = 4'd0;
            MUXB29_w = 4'd0;
            MUXB30_w = 4'd0;
            MUXB31_w = 4'd0;
            MUXB32_w = 4'd0;
            MUXB33_w = 4'd0;
            MUXB34_w = 4'd0;
            MUXB35_w = 4'd0;
            MUXB36_w = 4'd0;
            MUXB37_w = 4'd0;
            MUXB38_w = 4'd0;
            MUXB39_w = 4'd0;
            MUXB40_w = 4'd0;
            MUXB41_w = 4'd0;
            
            MUXB42_w = 4'd0;
            MUXB43_w = 4'd0;
            MUXB44_w = 4'd0;
            MUXB45_w = 4'd0;
            MUXB46_w = 4'd0;
            MUXB47_w = 4'd0;
            
            WEAN_w = {26'h3FFFFFF,CCA_I_WEAN_w, CCA_I_WEAN_w, {10{CCA_D_WEAN_w}}, {10{CCA_D_up_WEAN_w}}};
            WEBN_w = 48'hFFFFFFFFFFFF;
            OEA_w = {26'd0,22'h3FFFFF};
            OEB_w = 48'd0;
            choose_reg_A_w = {26'd0, 2'b11, CCA_choose_reg_w, CCA_choose_reg_w};
            choose_reg_B_w = 48'd0;
         end
         default:
         begin
            A00_w = 4'd0;
            A01_w = 4'd0; 
            A02_w = 4'd0; 
            A03_w = 4'd0; 
            A04_w = 4'd0; 
            A05_w = 4'd0; 
            A06_w = 4'd0; 
            A07_w = 4'd0; 
            A08_w = 4'd0; 
            A09_w = 4'd0; 
            A10_w = 4'd0; 
            A11_w = 4'd0; 
            A12_w = 4'd0; 
            A13_w = 4'd0; 
            A14_w = 4'd0; 
            A15_w = 4'd0; 
            A16_w = 4'd0; 
            A17_w = 4'd0; 
            A18_w = 4'd0; 
            A19_w = 4'd0; 
            A20_w = 4'd0; 
            A21_w = 4'd0;
            A22_w = 4'd0;
            A23_w = 4'd0;
            A24_w = 4'd0;
            A25_w = 4'd0;
            A26_w = 4'd0;
            A27_w = 4'd0;
            A28_w = 4'd0;
            A29_w = 4'd0;
            A30_w = 4'd0;
            A31_w = 4'd0;
            A32_w = 4'd0;
            A33_w = 4'd0;
            A34_w = 4'd0;
            A35_w = 4'd0;
            A36_w = 4'd0;
            A37_w = 4'd0;
            A38_w = 4'd0;
            A39_w = 4'd0;
            A40_w = 4'd0;
            A41_w = 4'd0;
            
            A42_w = 4'd0;
            A43_w = 4'd0;
            A44_w = 4'd0;
            A45_w = 4'd0;
            A46_w = 4'd0;
            A47_w = 4'd0;
            
            B00_w = 4'd0;
            B01_w = 4'd0;
            B02_w = 4'd0;
            B03_w = 4'd0;
            B04_w = 4'd0;
            B05_w = 4'd0;
            B06_w = 4'd0;
            B07_w = 4'd0;
            B08_w = 4'd0;
            B09_w = 4'd0;
            B10_w = 4'd0;
            B11_w = 4'd0;
            B12_w = 4'd0;
            B13_w = 4'd0;
            B14_w = 4'd0;
            B15_w = 4'd0;
            B16_w = 4'd0;
            B17_w = 4'd0;
            B18_w = 4'd0;
            B19_w = 4'd0;
            B20_w = 4'd0;
            B21_w = 4'd0;                    
            B22_w = 4'd0;                    
            B23_w = 4'd0;                    
            B24_w = 4'd0;                    
            B25_w = 4'd0;                    
            B26_w = 4'd0;                    
            B27_w = 4'd0;                    
            B28_w = 4'd0;                    
            B29_w = 4'd0;                    
            B30_w = 4'd0;                    
            B31_w = 4'd0;                    
            B32_w = 4'd0;                    
            B33_w = 4'd0;                    
            B34_w = 4'd0;                    
            B35_w = 4'd0;                    
            B36_w = 4'd0;                    
            B37_w = 4'd0;                    
            B38_w = 4'd0;                    
            B39_w = 4'd0;                    
            B40_w = 4'd0;                    
            B41_w = 4'd0;      
            
            B42_w = 4'd0;                    
            B43_w = 4'd0;                    
            B44_w = 4'd0;                    
            B45_w = 4'd0;                    
            B46_w = 4'd0;                    
            B47_w = 4'd0;  
                          
            DIA00_w = 64'd0;
            DIA01_w = 64'd0;
            DIA02_w = 64'd0;
            DIA03_w = 64'd0;
            DIA04_w = 64'd0;
            DIA05_w = 64'd0;
            DIA06_w = 64'd0;
            DIA07_w = 64'd0;
            DIA08_w = 64'd0;
            DIA09_w = 64'd0;
            DIA10_w = 64'd0;
            DIA11_w = 64'd0;
            DIA12_w = 64'd0;
            DIA13_w = 64'd0;
            DIA14_w = 64'd0;
            DIA15_w = 64'd0;
            DIA16_w = 64'd0;
            DIA17_w = 64'd0;
            DIA18_w = 64'd0;
            DIA19_w = 64'd0;
            DIA20_w = 64'd0;
            DIA21_w = 64'd0;
            DIA22_w = 64'd0;
            DIA23_w = 64'd0;
            DIA24_w = 64'd0;
            DIA25_w = 64'd0;
            DIA26_w = 64'd0;
            DIA27_w = 64'd0;
            DIA28_w = 64'd0;
            DIA29_w = 64'd0;
            DIA30_w = 64'd0;
            DIA31_w = 64'd0;
            DIA32_w = 64'd0;
            DIA33_w = 64'd0;
            DIA34_w = 64'd0;
            DIA35_w = 64'd0;
            DIA36_w = 64'd0;
            DIA37_w = 64'd0;
            DIA38_w = 64'd0;
            DIA39_w = 64'd0;
            DIA40_w = 64'd0;
            DIA41_w = 64'd0;
            
            DIA42_w = 64'd0;
            DIA43_w = 64'd0;
            DIA44_w = 64'd0;
            DIA45_w = 64'd0;
            DIA46_w = 64'd0;
            DIA47_w = 64'd0;
            
            DIB00_w = 64'd0;
            DIB01_w = 64'd0;
            DIB02_w = 64'd0;
            DIB03_w = 64'd0;
            DIB04_w = 64'd0;
            DIB05_w = 64'd0;
            DIB06_w = 64'd0;
            DIB07_w = 64'd0;
            DIB08_w = 64'd0;
            DIB09_w = 64'd0;
            DIB10_w = 64'd0;
            DIB11_w = 64'd0;
            DIB12_w = 64'd0;
            DIB13_w = 64'd0;
            DIB14_w = 64'd0;
            DIB15_w = 64'd0;
            DIB16_w = 64'd0;
            DIB17_w = 64'd0;
            DIB18_w = 64'd0;
            DIB19_w = 64'd0;
            DIB20_w = 64'd0;
            DIB21_w = 64'd0;
            DIB22_w = 64'd0;
            DIB23_w = 64'd0;
            DIB24_w = 64'd0;
            DIB25_w = 64'd0;
            DIB26_w = 64'd0;
            DIB27_w = 64'd0;
            DIB28_w = 64'd0;
            DIB29_w = 64'd0;
            DIB30_w = 64'd0;
            DIB31_w = 64'd0;
            DIB32_w = 64'd0;
            DIB33_w = 64'd0;
            DIB34_w = 64'd0;
            DIB35_w = 64'd0;
            DIB36_w = 64'd0;
            DIB37_w = 64'd0;
            DIB38_w = 64'd0;
            DIB39_w = 64'd0;
            DIB40_w = 64'd0;
            DIB41_w = 64'd0;
            
            DIB42_w = 64'd0;
            DIB43_w = 64'd0;
            DIB44_w = 64'd0;
            DIB45_w = 64'd0;
            DIB46_w = 64'd0;
            DIB47_w = 64'd0;
            
            MUXA00_w = 4'd0;
            MUXA01_w = 4'd0;
            MUXA02_w = 4'd0;
            MUXA03_w = 4'd0;
            MUXA04_w = 4'd0;
            MUXA05_w = 4'd0;
            MUXA06_w = 4'd0;
            MUXA07_w = 4'd0;
            MUXA08_w = 4'd0;
            MUXA09_w = 4'd0;
            MUXA10_w = 4'd0;
            MUXA11_w = 4'd0;
            MUXA12_w = 4'd0;
            MUXA13_w = 4'd0;
            MUXA14_w = 4'd0;
            MUXA15_w = 4'd0;
            MUXA16_w = 4'd0;
            MUXA17_w = 4'd0;
            MUXA18_w = 4'd0;
            MUXA19_w = 4'd0;
            MUXA20_w = 4'd0;
            MUXA21_w = 4'd0;
            MUXA22_w = 4'd0;
            MUXA23_w = 4'd0;
            MUXA24_w = 4'd0;
            MUXA25_w = 4'd0;
            MUXA26_w = 4'd0;
            MUXA27_w = 4'd0;
            MUXA28_w = 4'd0;
            MUXA29_w = 4'd0;
            MUXA30_w = 4'd0;
            MUXA31_w = 4'd0;
            MUXA32_w = 4'd0;
            MUXA33_w = 4'd0;
            MUXA34_w = 4'd0;
            MUXA35_w = 4'd0;
            MUXA36_w = 4'd0;
            MUXA37_w = 4'd0;
            MUXA38_w = 4'd0;
            MUXA39_w = 4'd0;
            MUXA40_w = 4'd0;
            MUXA41_w = 4'd0;
            
            MUXA42_w = 4'd0;
            MUXA43_w = 4'd0;
            MUXA44_w = 4'd0;
            MUXA45_w = 4'd0;
            MUXA46_w = 4'd0;
            MUXA47_w = 4'd0;
            
            MUXB00_w = 4'd0;
            MUXB01_w = 4'd0;
            MUXB02_w = 4'd0;
            MUXB03_w = 4'd0;
            MUXB04_w = 4'd0;
            MUXB05_w = 4'd0;
            MUXB06_w = 4'd0;
            MUXB07_w = 4'd0;
            MUXB08_w = 4'd0;
            MUXB09_w = 4'd0;
            MUXB10_w = 4'd0;
            MUXB11_w = 4'd0;
            MUXB12_w = 4'd0;
            MUXB13_w = 4'd0;
            MUXB14_w = 4'd0;
            MUXB15_w = 4'd0;
            MUXB16_w = 4'd0;
            MUXB17_w = 4'd0;
            MUXB18_w = 4'd0;
            MUXB19_w = 4'd0;
            MUXB20_w = 4'd0;
            MUXB21_w = 4'd0;
            MUXB22_w = 4'd0;
            MUXB23_w = 4'd0;
            MUXB24_w = 4'd0;
            MUXB25_w = 4'd0;
            MUXB26_w = 4'd0;
            MUXB27_w = 4'd0;
            MUXB28_w = 4'd0;
            MUXB29_w = 4'd0;
            MUXB30_w = 4'd0;
            MUXB31_w = 4'd0;
            MUXB32_w = 4'd0;
            MUXB33_w = 4'd0;
            MUXB34_w = 4'd0;
            MUXB35_w = 4'd0;
            MUXB36_w = 4'd0;
            MUXB37_w = 4'd0;
            MUXB38_w = 4'd0;
            MUXB39_w = 4'd0;
            MUXB40_w = 4'd0;
            MUXB41_w = 4'd0;
            
            MUXB42_w = 4'd0;
            MUXB43_w = 4'd0;
            MUXB44_w = 4'd0;
            MUXB45_w = 4'd0;
            MUXB46_w = 4'd0;
            MUXB47_w = 4'd0;
            
            WEAN_w = 48'hFFFFFFFFFFFF;
            WEBN_w = 48'hFFFFFFFFFFFF;
            OEA_w = 48'd0;
            OEB_w = 48'd0;
            choose_reg_A_w = 48'h0;
            choose_reg_B_w = 48'h0;
            
         end
       
      
      endcase
   end

    
/******************************************************************************************************************************/
//                                       END CONTROL OF REGISTER FILE
/******************************************************************************************************************************/



//RSPE Module
   
   
   register_file m00(clk, reset_register, A00_w, B00_w, DIA00_w, DIB00_w, DOA00_w, DOB00_w, WEAN_w[00], WEBN_w[00], choose_reg_A_w[00], choose_reg_B_w[00], OEA_w[00], OEB_w[00], MUXA00_w, MUXB00_w);
   register_file m01(clk, reset_register, A01_w, B01_w, DIA01_w, DIB01_w, DOA01_w, DOB01_w, WEAN_w[01], WEBN_w[01], choose_reg_A_w[01], choose_reg_B_w[01], OEA_w[01], OEB_w[01], MUXA01_w, MUXB01_w);
   register_file m02(clk, reset_register, A02_w, B02_w, DIA02_w, DIB02_w, DOA02_w, DOB02_w, WEAN_w[02], WEBN_w[02], choose_reg_A_w[02], choose_reg_B_w[02], OEA_w[02], OEB_w[02], MUXA02_w, MUXB02_w);
   register_file m03(clk, reset_register, A03_w, B03_w, DIA03_w, DIB03_w, DOA03_w, DOB03_w, WEAN_w[03], WEBN_w[03], choose_reg_A_w[03], choose_reg_B_w[03], OEA_w[03], OEB_w[03], MUXA03_w, MUXB03_w);
   register_file m04(clk, reset_register, A04_w, B04_w, DIA04_w, DIB04_w, DOA04_w, DOB04_w, WEAN_w[04], WEBN_w[04], choose_reg_A_w[04], choose_reg_B_w[04], OEA_w[04], OEB_w[04], MUXA04_w, MUXB04_w);
   register_file m05(clk, reset_register, A05_w, B05_w, DIA05_w, DIB05_w, DOA05_w, DOB05_w, WEAN_w[05], WEBN_w[05], choose_reg_A_w[05], choose_reg_B_w[05], OEA_w[05], OEB_w[05], MUXA05_w, MUXB05_w);
   register_file m06(clk, reset_register, A06_w, B06_w, DIA06_w, DIB06_w, DOA06_w, DOB06_w, WEAN_w[06], WEBN_w[06], choose_reg_A_w[06], choose_reg_B_w[06], OEA_w[06], OEB_w[06], MUXA06_w, MUXB06_w);
   register_file m07(clk, reset_register, A07_w, B07_w, DIA07_w, DIB07_w, DOA07_w, DOB07_w, WEAN_w[07], WEBN_w[07], choose_reg_A_w[07], choose_reg_B_w[07], OEA_w[07], OEB_w[07], MUXA07_w, MUXB07_w);
   register_file m08(clk, reset_register, A08_w, B08_w, DIA08_w, DIB08_w, DOA08_w, DOB08_w, WEAN_w[08], WEBN_w[08], choose_reg_A_w[08], choose_reg_B_w[08], OEA_w[08], OEB_w[08], MUXA08_w, MUXB08_w);
   register_file m09(clk, reset_register, A09_w, B09_w, DIA09_w, DIB09_w, DOA09_w, DOB09_w, WEAN_w[09], WEBN_w[09], choose_reg_A_w[09], choose_reg_B_w[09], OEA_w[09], OEB_w[09], MUXA09_w, MUXB09_w);
   register_file m10(clk, reset_register, A10_w, B10_w, DIA10_w, DIB10_w, DOA10_w, DOB10_w, WEAN_w[10], WEBN_w[10], choose_reg_A_w[10], choose_reg_B_w[10], OEA_w[10], OEB_w[10], MUXA10_w, MUXB10_w);
   register_file m11(clk, reset_register, A11_w, B11_w, DIA11_w, DIB11_w, DOA11_w, DOB11_w, WEAN_w[11], WEBN_w[11], choose_reg_A_w[11], choose_reg_B_w[11], OEA_w[11], OEB_w[11], MUXA11_w, MUXB11_w);
   register_file m12(clk, reset_register, A12_w, B12_w, DIA12_w, DIB12_w, DOA12_w, DOB12_w, WEAN_w[12], WEBN_w[12], choose_reg_A_w[12], choose_reg_B_w[12], OEA_w[12], OEB_w[12], MUXA12_w, MUXB12_w);
   register_file m13(clk, reset_register, A13_w, B13_w, DIA13_w, DIB13_w, DOA13_w, DOB13_w, WEAN_w[13], WEBN_w[13], choose_reg_A_w[13], choose_reg_B_w[13], OEA_w[13], OEB_w[13], MUXA13_w, MUXB13_w);
   register_file m14(clk, reset_register, A14_w, B14_w, DIA14_w, DIB14_w, DOA14_w, DOB14_w, WEAN_w[14], WEBN_w[14], choose_reg_A_w[14], choose_reg_B_w[14], OEA_w[14], OEB_w[14], MUXA14_w, MUXB14_w);
   register_file m15(clk, reset_register, A15_w, B15_w, DIA15_w, DIB15_w, DOA15_w, DOB15_w, WEAN_w[15], WEBN_w[15], choose_reg_A_w[15], choose_reg_B_w[15], OEA_w[15], OEB_w[15], MUXA15_w, MUXB15_w);
   register_file m16(clk, reset_register, A16_w, B16_w, DIA16_w, DIB16_w, DOA16_w, DOB16_w, WEAN_w[16], WEBN_w[16], choose_reg_A_w[16], choose_reg_B_w[16], OEA_w[16], OEB_w[16], MUXA16_w, MUXB16_w);
   register_file m17(clk, reset_register, A17_w, B17_w, DIA17_w, DIB17_w, DOA17_w, DOB17_w, WEAN_w[17], WEBN_w[17], choose_reg_A_w[17], choose_reg_B_w[17], OEA_w[17], OEB_w[17], MUXA17_w, MUXB17_w);
   register_file m18(clk, reset_register, A18_w, B18_w, DIA18_w, DIB18_w, DOA18_w, DOB18_w, WEAN_w[18], WEBN_w[18], choose_reg_A_w[18], choose_reg_B_w[18], OEA_w[18], OEB_w[18], MUXA18_w, MUXB18_w);
   register_file m19(clk, reset_register, A19_w, B19_w, DIA19_w, DIB19_w, DOA19_w, DOB19_w, WEAN_w[19], WEBN_w[19], choose_reg_A_w[19], choose_reg_B_w[19], OEA_w[19], OEB_w[19], MUXA19_w, MUXB19_w);
   register_file m20(clk, reset_register, A20_w, B20_w, DIA20_w, DIB20_w, DOA20_w, DOB20_w, WEAN_w[20], WEBN_w[20], choose_reg_A_w[20], choose_reg_B_w[20], OEA_w[20], OEB_w[20], MUXA20_w, MUXB20_w);
   register_file m21(clk, reset_register, A21_w, B21_w, DIA21_w, DIB21_w, DOA21_w, DOB21_w, WEAN_w[21], WEBN_w[21], choose_reg_A_w[21], choose_reg_B_w[21], OEA_w[21], OEB_w[21], MUXA21_w, MUXB21_w);
   register_file m22(clk, reset_register, A22_w, B22_w, DIA22_w, DIB22_w, DOA22_w, DOB22_w, WEAN_w[22], WEBN_w[22], choose_reg_A_w[22], choose_reg_B_w[22], OEA_w[22], OEB_w[22], MUXA22_w, MUXB22_w);
   register_file m23(clk, reset_register, A23_w, B23_w, DIA23_w, DIB23_w, DOA23_w, DOB23_w, WEAN_w[23], WEBN_w[23], choose_reg_A_w[23], choose_reg_B_w[23], OEA_w[23], OEB_w[23], MUXA23_w, MUXB23_w);
   register_file m24(clk, reset_register, A24_w, B24_w, DIA24_w, DIB24_w, DOA24_w, DOB24_w, WEAN_w[24], WEBN_w[24], choose_reg_A_w[24], choose_reg_B_w[24], OEA_w[24], OEB_w[24], MUXA24_w, MUXB24_w);
   register_file m25(clk, reset_register, A25_w, B25_w, DIA25_w, DIB25_w, DOA25_w, DOB25_w, WEAN_w[25], WEBN_w[25], choose_reg_A_w[25], choose_reg_B_w[25], OEA_w[25], OEB_w[25], MUXA25_w, MUXB25_w);
   register_file m26(clk, reset_register, A26_w, B26_w, DIA26_w, DIB26_w, DOA26_w, DOB26_w, WEAN_w[26], WEBN_w[26], choose_reg_A_w[26], choose_reg_B_w[26], OEA_w[26], OEB_w[26], MUXA26_w, MUXB26_w);
   register_file m27(clk, reset_register, A27_w, B27_w, DIA27_w, DIB27_w, DOA27_w, DOB27_w, WEAN_w[27], WEBN_w[27], choose_reg_A_w[27], choose_reg_B_w[27], OEA_w[27], OEB_w[27], MUXA27_w, MUXB27_w);
   register_file m28(clk, reset_register, A28_w, B28_w, DIA28_w, DIB28_w, DOA28_w, DOB28_w, WEAN_w[28], WEBN_w[28], choose_reg_A_w[28], choose_reg_B_w[28], OEA_w[28], OEB_w[28], MUXA28_w, MUXB28_w);
   register_file m29(clk, reset_register, A29_w, B29_w, DIA29_w, DIB29_w, DOA29_w, DOB29_w, WEAN_w[29], WEBN_w[29], choose_reg_A_w[29], choose_reg_B_w[29], OEA_w[29], OEB_w[29], MUXA29_w, MUXB29_w);
   register_file m30(clk, reset_register, A30_w, B30_w, DIA30_w, DIB30_w, DOA30_w, DOB30_w, WEAN_w[30], WEBN_w[30], choose_reg_A_w[30], choose_reg_B_w[30], OEA_w[30], OEB_w[30], MUXA30_w, MUXB30_w);
   register_file m31(clk, reset_register, A31_w, B31_w, DIA31_w, DIB31_w, DOA31_w, DOB31_w, WEAN_w[31], WEBN_w[31], choose_reg_A_w[31], choose_reg_B_w[31], OEA_w[31], OEB_w[31], MUXA31_w, MUXB31_w);
   register_file m32(clk, reset_register, A32_w, B32_w, DIA32_w, DIB32_w, DOA32_w, DOB32_w, WEAN_w[32], WEBN_w[32], choose_reg_A_w[32], choose_reg_B_w[32], OEA_w[32], OEB_w[32], MUXA32_w, MUXB32_w);
   register_file m33(clk, reset_register, A33_w, B33_w, DIA33_w, DIB33_w, DOA33_w, DOB33_w, WEAN_w[33], WEBN_w[33], choose_reg_A_w[33], choose_reg_B_w[33], OEA_w[33], OEB_w[33], MUXA33_w, MUXB33_w);
   register_file m34(clk, reset_register, A34_w, B34_w, DIA34_w, DIB34_w, DOA34_w, DOB34_w, WEAN_w[34], WEBN_w[34], choose_reg_A_w[34], choose_reg_B_w[34], OEA_w[34], OEB_w[34], MUXA34_w, MUXB34_w);
   register_file m35(clk, reset_register, A35_w, B35_w, DIA35_w, DIB35_w, DOA35_w, DOB35_w, WEAN_w[35], WEBN_w[35], choose_reg_A_w[35], choose_reg_B_w[35], OEA_w[35], OEB_w[35], MUXA35_w, MUXB35_w);
   register_file m36(clk, reset_register, A36_w, B36_w, DIA36_w, DIB36_w, DOA36_w, DOB36_w, WEAN_w[36], WEBN_w[36], choose_reg_A_w[36], choose_reg_B_w[36], OEA_w[36], OEB_w[36], MUXA36_w, MUXB36_w);
   register_file m37(clk, reset_register, A37_w, B37_w, DIA37_w, DIB37_w, DOA37_w, DOB37_w, WEAN_w[37], WEBN_w[37], choose_reg_A_w[37], choose_reg_B_w[37], OEA_w[37], OEB_w[37], MUXA37_w, MUXB37_w);
   register_file m38(clk, reset_register, A38_w, B38_w, DIA38_w, DIB38_w, DOA38_w, DOB38_w, WEAN_w[38], WEBN_w[38], choose_reg_A_w[38], choose_reg_B_w[38], OEA_w[38], OEB_w[38], MUXA38_w, MUXB38_w);
   register_file m39(clk, reset_register, A39_w, B39_w, DIA39_w, DIB39_w, DOA39_w, DOB39_w, WEAN_w[39], WEBN_w[39], choose_reg_A_w[39], choose_reg_B_w[39], OEA_w[39], OEB_w[39], MUXA39_w, MUXB39_w);
   register_file m40(clk, reset_register, A40_w, B40_w, DIA40_w, DIB40_w, DOA40_w, DOB40_w, WEAN_w[40], WEBN_w[40], choose_reg_A_w[40], choose_reg_B_w[40], OEA_w[40], OEB_w[40], MUXA40_w, MUXB40_w);
   register_file m41(clk, reset_register, A41_w, B41_w, DIA41_w, DIB41_w, DOA41_w, DOB41_w, WEAN_w[41], WEBN_w[41], choose_reg_A_w[41], choose_reg_B_w[41], OEA_w[41], OEB_w[41], MUXA41_w, MUXB41_w);
   register_file m42(clk, reset_buffer, A42_w, B42_w, DIA42_w, DIB42_w, DOA42_w, DOB42_w, WEAN_w[42], WEBN_w[42], choose_reg_A_w[42], choose_reg_B_w[42], OEA_w[42], OEB_w[42], MUXA42_w, MUXB42_w);
   register_file m43(clk, reset_buffer, A43_w, B43_w, DIA43_w, DIB43_w, DOA43_w, DOB43_w, WEAN_w[43], WEBN_w[43], choose_reg_A_w[43], choose_reg_B_w[43], OEA_w[43], OEB_w[43], MUXA43_w, MUXB43_w);
   register_file m44(clk, reset_buffer, A44_w, B44_w, DIA44_w, DIB44_w, DOA44_w, DOB44_w, WEAN_w[44], WEBN_w[44], choose_reg_A_w[44], choose_reg_B_w[44], OEA_w[44], OEB_w[44], MUXA44_w, MUXB44_w);
   register_file m45(clk, reset_buffer, A45_w, B45_w, DIA45_w, DIB45_w, DOA45_w, DOB45_w, WEAN_w[45], WEBN_w[45], choose_reg_A_w[45], choose_reg_B_w[45], OEA_w[45], OEB_w[45], MUXA45_w, MUXB45_w);
   register_file m46(clk, reset_buffer, A46_w, B46_w, DIA46_w, DIB46_w, DOA46_w, DOB46_w, WEAN_w[46], WEBN_w[46], choose_reg_A_w[46], choose_reg_B_w[46], OEA_w[46], OEB_w[46], MUXA46_w, MUXB46_w);
   register_file m47(clk, reset_buffer, A47_w, B47_w, DIA47_w, DIB47_w, DOA47_w, DOB47_w, WEAN_w[47], WEBN_w[47], choose_reg_A_w[47], choose_reg_B_w[47], OEA_w[47], OEB_w[47], MUXA47_w, MUXB47_w);
   



/******************************************************************************************************************************/                                
/***************************************               MinMax RSPEs              **********************************************/
/******************************************************************************************************************************/                                

//input selector                                
assign RSPE_minmax0_data_00_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, Seg_bckgndlayerW_w[7:0]}      :
                                                                 9'd0                   ;
assign RSPE_minmax0_data_01_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, Seg_bckgndlayerW_w[15:8]}:
                                                                 9'd0                   ;
assign RSPE_minmax0_data_02_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, Seg_bckgndlayerW_w[23:16]}:
                                                                 9'd0                   ;
assign RSPE_minmax0_data_03_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, Seg_bckgndlayerW_w[31:24]}:
                                                                 9'd0                   ;
assign RSPE_minmax0_data_04_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, 8'd255 }              :
                                                                 9'd0                   ;
assign RSPE_minmax0_data_05_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, 8'd255 }              :
                                                                 9'd0                   ;
assign RSPE_minmax0_data_06_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, 8'd255 }              :
                                                                 9'd0                   ;
assign RSPE_minmax0_data_07_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, 8'd255 }              :
                                                                 9'd0                   ;
assign RSPE_minmax0_data_08_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, 8'd255 }              :
                                                                 9'd0                   ;
assign RSPE_minmax0_data_09_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, 8'd255 }              :
                                                                 9'd0                   ;
assign RSPE_minmax0_data_10_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, 8'd255 }              :
                                                                 9'd0                   ;
assign RSPE_minmax0_data_11_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, 8'd255 }              :
                                                                 9'd0                   ;
assign RSPE_minmax0_data_12_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, 8'd255 }              :
                                                                 9'd0                   ;
assign RSPE_minmax0_data_13_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, 8'd255 }              :
                                                                 9'd0                   ;
assign RSPE_minmax0_data_14_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, 8'd255 }              :
                                                                 9'd0                   ;
assign RSPE_minmax0_data_15_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, 8'd255 }              :
                                                                 9'd0                   ;
assign RSPE_minmax0_data_16_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, 8'd255 }              :
                                                                 9'd0                   ;
assign RSPE_minmax0_data_17_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, 8'd255 }              :
                                                                 9'd0                   ;
assign RSPE_minmax0_data_18_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, 8'd255 }              :
                                                                 9'd0                   ;
assign RSPE_minmax0_data_19_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, 8'd255 }              :
                                                                 9'd0                   ;
assign RSPE_minmax0_data_20_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, 8'd255 }              :
                                                                 9'd0                   ;
assign RSPE_minmax0_data_21_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, 8'd255 }              :
                                                                 9'd0                   ;
assign RSPE_minmax0_data_22_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, 8'd255 }              :
                                                                 9'd0                   ;
assign RSPE_minmax0_data_23_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, 8'd255 }              :
                                                                 9'd0                   ;
assign RSPE_minmax0_data_24_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, 8'd255 }              :
                                                                 9'd0                   ;
assign RSPE_minmax0_data_25_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, 8'd255 }              :
                                                                 9'd0                   ;
assign RSPE_minmax0_data_26_in  =       (Mode_i == `SEGMENTATION_MODE)?    {1'b0, 8'd255 }              :
                                                                 9'd0                   ;
assign RSPE_minmax0_enable_w = seg_enable_i ;

//RSPE Modules
minmax   RSPE_minmax0(
.clk(clk), 
.reset(reset),
.data_00_in(RSPE_minmax0_data_00_in),
.data_01_in(RSPE_minmax0_data_01_in),
.data_02_in(RSPE_minmax0_data_02_in),
.data_03_in(RSPE_minmax0_data_03_in),
.data_04_in(RSPE_minmax0_data_04_in),
.data_05_in(RSPE_minmax0_data_05_in),
.data_06_in(RSPE_minmax0_data_06_in),
.data_07_in(RSPE_minmax0_data_07_in),
.data_08_in(RSPE_minmax0_data_08_in),
.data_09_in(RSPE_minmax0_data_09_in),
.data_10_in(RSPE_minmax0_data_10_in),
.data_11_in(RSPE_minmax0_data_11_in),
.data_12_in(RSPE_minmax0_data_12_in),
.data_13_in(RSPE_minmax0_data_13_in),
.data_14_in(RSPE_minmax0_data_14_in),
.data_15_in(RSPE_minmax0_data_15_in),
.data_16_in(RSPE_minmax0_data_16_in),
.data_17_in(RSPE_minmax0_data_17_in),
.data_18_in(RSPE_minmax0_data_18_in),
.data_19_in(RSPE_minmax0_data_19_in),
.data_20_in(RSPE_minmax0_data_20_in),
.data_21_in(RSPE_minmax0_data_21_in),
.data_22_in(RSPE_minmax0_data_22_in),
.data_23_in(RSPE_minmax0_data_23_in),
.data_24_in(RSPE_minmax0_data_24_in),
.data_25_in(RSPE_minmax0_data_25_in),
.data_26_in(RSPE_minmax0_data_26_in),
.min_out(RSPE_minmax0_min_out), .max_out(RSPE_minmax0_max_out), .which_min_out(RSPE_minmax0_which_min_out), .which_max_out(RSPE_minmax0_which_max_out), .minmax_enable(RSPE_minmax0_enable_w)
);




                                
/******************************************************************************************************************************/                                
/**************************************              Segmentation RSPE              *******************************************/
/******************************************************************************************************************************/                                

//input selector                                



//RSPE Module
RSPE_Segmentation  RSPE_Segmentation0(
.clk(clk),
.reset(reset),
.ctrl_gateCLK(seg_enable_i), 
.stall(seg_stall),

.which_min_i(RSPE_minmax0_which_min_out),
.lineidx_i(lineidx_r), .pixelidx_i(pixelidx_2r), 
.BDthY_default_i(BDthY_default_i), .BDthU_default_i(BDthU_default_i), .BDthV_default_i(BDthV_default_i),  .Bth_default_i(Bth_default_i), .BckGndBuildTH_default_i(BckGndBuildTH_default_i),
.box1xmax_i(box1xmax_i),  .box1ymax_i(box1ymax_i),  .box1xmin_i(box1xmin_i),  .box1ymin_i(box1ymin_i),  .BDthY_box1_i(BDthY_box1_i),  .BDthU_box1_i(BDthU_box1_i),  .BDthV_box1_i(BDthV_box1_i),   .update_box1_i(update_box1_i),   .Bth_box1_i(Bth_box1_i),  .BckGndBuildTH_box1_i(BckGndBuildTH_box1_i),
.box2xmax_i(box2xmax_i),  .box2ymax_i(box2ymax_i),  .box2xmin_i(box2xmin_i),  .box2ymin_i(box2ymin_i),  .BDthY_box2_i(BDthY_box2_i),  .BDthU_box2_i(BDthU_box2_i),  .BDthV_box2_i(BDthV_box2_i),   .update_box2_i(update_box2_i),   .Bth_box2_i(Bth_box2_i),  .BckGndBuildTH_box2_i(BckGndBuildTH_box2_i),
.box3xmax_i(box3xmax_i),  .box3ymax_i(box3ymax_i),  .box3xmin_i(box3xmin_i),  .box3ymin_i(box3ymin_i),  .BDthY_box3_i(BDthY_box3_i),  .BDthU_box3_i(BDthU_box3_i),  .BDthV_box3_i(BDthV_box3_i),   .update_box3_i(update_box3_i),   .Bth_box3_i(Bth_box3_i),  .BckGndBuildTH_box3_i(BckGndBuildTH_box3_i),
.box4xmax_i(box4xmax_i),  .box4ymax_i(box4ymax_i),  .box4xmin_i(box4xmin_i),  .box4ymin_i(box4ymin_i),  .BDthY_box4_i(BDthY_box4_i),  .BDthU_box4_i(BDthU_box4_i),  .BDthV_box4_i(BDthV_box4_i),   .update_box4_i(update_box4_i),   .Bth_box4_i(Bth_box4_i),  .BckGndBuildTH_box4_i(BckGndBuildTH_box4_i),
.box5xmax_i(box5xmax_i),  .box5ymax_i(box5ymax_i),  .box5xmin_i(box5xmin_i),  .box5ymin_i(box5ymin_i),  .BDthY_box5_i(BDthY_box5_i),  .BDthU_box5_i(BDthU_box5_i),  .BDthV_box5_i(BDthV_box5_i),   .update_box5_i(update_box5_i),   .Bth_box5_i(Bth_box5_i),  .BckGndBuildTH_box5_i(BckGndBuildTH_box5_i),
.box6xmax_i(box6xmax_i),  .box6ymax_i(box6ymax_i),  .box6xmin_i(box6xmin_i),  .box6ymin_i(box6ymin_i),  .BDthY_box6_i(BDthY_box6_i),  .BDthU_box6_i(BDthU_box6_i),  .BDthV_box6_i(BDthV_box6_i),   .update_box6_i(update_box6_i),   .Bth_box6_i(Bth_box6_i),  .BckGndBuildTH_box6_i(BckGndBuildTH_box6_i),
.box7xmax_i(box7xmax_i),  .box7ymax_i(box7ymax_i),  .box7xmin_i(box7xmin_i),  .box7ymin_i(box7ymin_i),  .BDthY_box7_i(BDthY_box7_i),  .BDthU_box7_i(BDthU_box7_i),  .BDthV_box7_i(BDthV_box7_i),   .update_box7_i(update_box7_i),   .Bth_box7_i(Bth_box7_i),  .BckGndBuildTH_box7_i(BckGndBuildTH_box7_i),
.box8xmax_i(box8xmax_i),  .box8ymax_i(box8ymax_i),  .box8xmin_i(box8xmin_i),  .box8ymin_i(box8ymin_i),  .BDthY_box8_i(BDthY_box8_i),  .BDthU_box8_i(BDthU_box8_i),  .BDthV_box8_i(BDthV_box8_i),   .update_box8_i(update_box8_i),   .Bth_box8_i(Bth_box8_i),  .BckGndBuildTH_box8_i(BckGndBuildTH_box8_i),
.box9xmax_i(box9xmax_i),  .box9ymax_i(box9ymax_i),  .box9xmin_i(box9xmin_i),  .box9ymin_i(box9ymin_i),  .BDthY_box9_i(BDthY_box9_i),  .BDthU_box9_i(BDthU_box9_i),  .BDthV_box9_i(BDthV_box9_i),   .update_box9_i(update_box9_i),   .Bth_box9_i(Bth_box9_i),  .BckGndBuildTH_box9_i(BckGndBuildTH_box9_i),
.box10xmax_i(box10xmax_i), .box10ymax_i(box10ymax_i), .box10xmin_i(box10xmin_i), .box10ymin_i(box10ymin_i), .BDthY_box10_i(BDthY_box10_i), .BDthU_box10_i(BDthU_box10_i), .BDthV_box10_i(BDthV_box10_i),  .update_box10_i(update_box10_i),  .Bth_box10_i(Bth_box10_i), .BckGndBuildTH_box10_i(BckGndBuildTH_box10_i),

.curpixelY_i(Seg_curpixelY_2r), 
.curpixelU_i(Seg_curpixelU_2r), 
.curpixelV_i(Seg_curpixelV_2r), 
.bckgndlayerY_i(Seg_bckgndlayerY_2r), 
.bckgndlayerU_i(Seg_bckgndlayerU_2r),  
.bckgndlayerV_i(Seg_bckgndlayerV_2r),  
.bckgndlayerW_i(Seg_bckgndlayerW_2r),
.updatedbckgndlayerY_o(Seg_updatedbckgndlayerY),
.updatedbckgndlayerU_o(Seg_updatedbckgndlayerU),
.updatedbckgndlayerV_o(Seg_updatedbckgndlayerV),
.updatedbckgndlayerW_o(Seg_updatedbckgndlayerW),
.mask_o(Seg_mask)
                                );



                                
/******************************************************************************************************************************/
//                                            CONTROL OF CORDIC && DONE
//x_cordic_in, y_cordic_in, z_cordic_in (32 bits): The input x, y, z of cordic
//choose_cordic_0_in: 0: Rotate to 0 degree  1: Rotate to z_cordic_in degree
/******************************************************************************************************************************/
   
   assign differencex0_w = (positionx_0_w > centerx_in_r) ? (positionx_0_w - centerx_in_r) : (centerx_in_r - positionx_0_w);
   assign differencex1_w = (positionx_1_w > centerx_in_r) ? (positionx_1_w - centerx_in_r) : (centerx_in_r - positionx_1_w);
   assign differencex2_w = (positionx_2_w > centerx_in_r) ? (positionx_2_w - centerx_in_r) : (centerx_in_r - positionx_2_w);
   assign differencex3_w = (positionx_3_w > centerx_in_r) ? (positionx_3_w - centerx_in_r) : (centerx_in_r - positionx_3_w);
   assign differencex4_w = (positionx_4_w > centerx_in_r) ? (positionx_4_w - centerx_in_r) : (centerx_in_r - positionx_4_w);
   assign differencex5_w = (positionx_5_w > centerx_in_r) ? (positionx_5_w - centerx_in_r) : (centerx_in_r - positionx_5_w);
   assign differencex6_w = (positionx_6_w > centerx_in_r) ? (positionx_6_w - centerx_in_r) : (centerx_in_r - positionx_6_w);
   assign differencex7_w = (positionx_7_w > centerx_in_r) ? (positionx_7_w - centerx_in_r) : (centerx_in_r - positionx_7_w);
   assign differencey0_w = (positiony_0_w > centery_in_r) ? (positiony_0_w - centery_in_r) : (centery_in_r - positiony_0_w);
   assign differencey1_w = (positiony_1_w > centery_in_r) ? (positiony_1_w - centery_in_r) : (centery_in_r - positiony_1_w);
   assign differencey2_w = (positiony_2_w > centery_in_r) ? (positiony_2_w - centery_in_r) : (centery_in_r - positiony_2_w);
   assign differencey3_w = (positiony_3_w > centery_in_r) ? (positiony_3_w - centery_in_r) : (centery_in_r - positiony_3_w);
   assign differencey4_w = (positiony_4_w > centery_in_r) ? (positiony_4_w - centery_in_r) : (centery_in_r - positiony_4_w);
   assign differencey5_w = (positiony_5_w > centery_in_r) ? (positiony_5_w - centery_in_r) : (centery_in_r - positiony_5_w);
   assign differencey6_w = (positiony_6_w > centery_in_r) ? (positiony_6_w - centery_in_r) : (centery_in_r - positiony_6_w);
   assign differencey7_w = (positiony_7_w > centery_in_r) ? (positiony_7_w - centery_in_r) : (centery_in_r - positiony_7_w);


   
   
   
   always@(*)
   begin  
      case(Mode_i)
         `IDLE:
         begin
            
            done = 1'b0;
            reset_cordic_0_in = 1'b0;
            x_cordic_0_in = 32'd0;
            y_cordic_0_in = 32'd0;
            z_cordic_0_in = 32'd0;
            choose_cordic_0_in = 1'b0;
            enable_cordic_0_in = 1'b0;
            reset_cordic_1_in = 1'b0;
            x_cordic_1_in = 32'd0;
            y_cordic_1_in = 32'd0;
            z_cordic_1_in = 32'd0;
            choose_cordic_1_in = 1'b0;
            enable_cordic_1_in = 1'b0;
            reset_cordic_2_in = 1'b0;
            x_cordic_2_in = 32'd0;
            y_cordic_2_in = 32'd0;
            z_cordic_2_in = 32'd0;
            choose_cordic_2_in = 1'b0;
            enable_cordic_2_in = 1'b0;
            reset_cordic_3_in = 1'b0;
            x_cordic_3_in = 32'd0;
            y_cordic_3_in = 32'd0;
            z_cordic_3_in = 32'd0;
            choose_cordic_3_in = 1'b0;
            enable_cordic_3_in = 1'b0;
            reset_cordic_4_in = 1'b0;
            x_cordic_4_in = 32'd0;
            y_cordic_4_in = 32'd0;
            z_cordic_4_in = 32'd0;
            choose_cordic_4_in = 1'b0;
            enable_cordic_4_in = 1'b0;
            reset_cordic_5_in = 1'b0;
            x_cordic_5_in = 32'd0;
            y_cordic_5_in = 32'd0;
            z_cordic_5_in = 32'd0;
            choose_cordic_5_in = 1'b0;
            enable_cordic_5_in = 1'b0;
            reset_cordic_6_in = 1'b0;
            x_cordic_6_in = 32'd0;
            y_cordic_6_in = 32'd0;
            z_cordic_6_in = 32'd0;
            choose_cordic_6_in = 1'b0;
            enable_cordic_6_in = 1'b0;
            reset_cordic_7_in = 1'b0;
            x_cordic_7_in = 32'd0;
            y_cordic_7_in = 32'd0;
            z_cordic_7_in = 32'd0;
            choose_cordic_7_in = 1'b0;
            enable_cordic_7_in = 1'b0;
            
            
            
            
            
            
         end
         `ACCUMULATION_CANDIDATE_HISTOGRAM:
         begin
            
            done = 1'b0;
            reset_cordic_0_in = reset_pazen;
            x_cordic_0_in = {6'd0, differencex0_w, 16'd0};
            y_cordic_0_in = {7'd0, differencey0_w, 16'd0};
            z_cordic_0_in = 32'd0;
            choose_cordic_0_in = 1'b1;
            enable_cordic_0_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_1_in = reset_pazen;
            x_cordic_1_in = {6'd0, differencex1_w, 16'd0};
            y_cordic_1_in = {7'd0, differencey1_w, 16'd0};
            z_cordic_1_in = 32'd0;
            choose_cordic_1_in = 1'b1;
            enable_cordic_1_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_2_in = reset_pazen;
            x_cordic_2_in = {6'd0, differencex2_w, 16'd0};
            y_cordic_2_in = {7'd0, differencey2_w, 16'd0};
            z_cordic_2_in = 32'd0;
            choose_cordic_2_in = 1'b1;
            enable_cordic_2_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_3_in = reset_pazen;
            x_cordic_3_in = {6'd0, differencex3_w, 16'd0};
            y_cordic_3_in = {7'd0, differencey3_w, 16'd0};
            z_cordic_3_in = 32'd0;
            choose_cordic_3_in = 1'b1;
            enable_cordic_3_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_4_in = reset_pazen;
            x_cordic_4_in = {6'd0, differencex4_w, 16'd0};
            y_cordic_4_in = {7'd0, differencey4_w, 16'd0};
            z_cordic_4_in = 32'd0;
            choose_cordic_4_in = 1'b1;
            enable_cordic_4_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_5_in = reset_pazen;
            x_cordic_5_in = {6'd0, differencex5_w, 16'd0};
            y_cordic_5_in = {7'd0, differencey5_w, 16'd0};
            z_cordic_5_in = 32'd0;
            choose_cordic_5_in = 1'b1;
            enable_cordic_5_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_6_in = reset_pazen;
            x_cordic_6_in = {6'd0, differencex6_w, 16'd0};
            y_cordic_6_in = {7'd0, differencey6_w, 16'd0};
            z_cordic_6_in = 32'd0;
            choose_cordic_6_in = 1'b1;
            enable_cordic_6_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_7_in = reset_pazen;
            x_cordic_7_in = {6'd0, differencex7_w, 16'd0};
            y_cordic_7_in = {7'd0, differencey7_w, 16'd0};
            z_cordic_7_in = 32'd0;
            choose_cordic_7_in = 1'b1;
            enable_cordic_7_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            
         end
         `ACCUMULATION_TARGET_HISTOGRAM:
         begin
            
            done = 1'b0;
            reset_cordic_0_in = reset_pazen;
            x_cordic_0_in = {6'd0, differencex0_w, 16'd0};
            y_cordic_0_in = {7'd0, differencey0_w, 16'd0};
            z_cordic_0_in = 32'd0;
            choose_cordic_0_in = 1'b1;
            enable_cordic_0_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_1_in = reset_pazen;
            x_cordic_1_in = {6'd0, differencex1_w, 16'd0};
            y_cordic_1_in = {7'd0, differencey1_w, 16'd0};
            z_cordic_1_in = 32'd0;
            choose_cordic_1_in = 1'b1;
            enable_cordic_1_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_2_in = reset_pazen;
            x_cordic_2_in = {6'd0, differencex2_w, 16'd0};
            y_cordic_2_in = {7'd0, differencey2_w, 16'd0};
            z_cordic_2_in = 32'd0;
            choose_cordic_2_in = 1'b1;
            enable_cordic_2_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_3_in = reset_pazen;
            x_cordic_3_in = {6'd0, differencex3_w, 16'd0};
            y_cordic_3_in = {7'd0, differencey3_w, 16'd0};
            z_cordic_3_in = 32'd0;
            choose_cordic_3_in = 1'b1;
            enable_cordic_3_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_4_in = reset_pazen;
            x_cordic_4_in = {6'd0, differencex4_w, 16'd0};
            y_cordic_4_in = {7'd0, differencey4_w, 16'd0};
            z_cordic_4_in = 32'd0;
            choose_cordic_4_in = 1'b1;
            enable_cordic_4_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_5_in = reset_pazen;
            x_cordic_5_in = {6'd0, differencex5_w, 16'd0};
            y_cordic_5_in = {7'd0, differencey5_w, 16'd0};
            z_cordic_5_in = 32'd0;
            choose_cordic_5_in = 1'b1;
            enable_cordic_5_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_6_in = reset_pazen;
            x_cordic_6_in = {6'd0, differencex6_w, 16'd0};
            y_cordic_6_in = {7'd0, differencey6_w, 16'd0};
            z_cordic_6_in = 32'd0;
            choose_cordic_6_in = 1'b1;
            enable_cordic_6_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_7_in = reset_pazen;
            x_cordic_7_in = {6'd0, differencex7_w, 16'd0};
            y_cordic_7_in = {7'd0, differencey7_w, 16'd0};
            z_cordic_7_in = 32'd0;
            choose_cordic_7_in = 1'b1;
            enable_cordic_7_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
         end
         `ACCUMULATION_CANDIDATE_BACKGROUND_HISTOGRAM:
         begin
            
            done = 1'b0;
            reset_cordic_0_in = reset_pazen;
            x_cordic_0_in = {6'd0, differencex0_w, 16'd0};
            y_cordic_0_in = {7'd0, differencey0_w, 16'd0};
            z_cordic_0_in = 32'd0;
            choose_cordic_0_in = 1'b1;
            enable_cordic_0_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_1_in = reset_pazen;
            x_cordic_1_in = {6'd0, differencex1_w, 16'd0};
            y_cordic_1_in = {7'd0, differencey1_w, 16'd0};
            z_cordic_1_in = 32'd0;
            choose_cordic_1_in = 1'b1;
            enable_cordic_1_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_2_in = reset_pazen;
            x_cordic_2_in = {6'd0, differencex2_w, 16'd0};
            y_cordic_2_in = {7'd0, differencey2_w, 16'd0};
            z_cordic_2_in = 32'd0;
            choose_cordic_2_in = 1'b1;
            enable_cordic_2_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_3_in = reset_pazen;
            x_cordic_3_in = {6'd0, differencex3_w, 16'd0};
            y_cordic_3_in = {7'd0, differencey3_w, 16'd0};
            z_cordic_3_in = 32'd0;
            choose_cordic_3_in = 1'b1;
            enable_cordic_3_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_4_in = reset_pazen;
            x_cordic_4_in = {6'd0, differencex4_w, 16'd0};
            y_cordic_4_in = {7'd0, differencey4_w, 16'd0};
            z_cordic_4_in = 32'd0;
            choose_cordic_4_in = 1'b1;
            enable_cordic_4_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_5_in = reset_pazen;
            x_cordic_5_in = {6'd0, differencex5_w, 16'd0};
            y_cordic_5_in = {7'd0, differencey5_w, 16'd0};
            z_cordic_5_in = 32'd0;
            choose_cordic_5_in = 1'b1;
            enable_cordic_5_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_6_in = reset_pazen;
            x_cordic_6_in = {6'd0, differencex6_w, 16'd0};
            y_cordic_6_in = {7'd0, differencey6_w, 16'd0};
            z_cordic_6_in = 32'd0;
            choose_cordic_6_in = 1'b1;
            enable_cordic_6_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_7_in = reset_pazen;
            x_cordic_7_in = {6'd0, differencex7_w, 16'd0};
            y_cordic_7_in = {7'd0, differencey7_w, 16'd0};
            z_cordic_7_in = 32'd0;
            choose_cordic_7_in = 1'b1;
            enable_cordic_7_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            
         end
         `ACCUMULATION_TARGET_BACKGROUND_HISTOGRAM:
         begin
            
            done = 1'b0;
            reset_cordic_0_in = reset_pazen;
            x_cordic_0_in = {6'd0, differencex0_w, 16'd0};
            y_cordic_0_in = {7'd0, differencey0_w, 16'd0};
            z_cordic_0_in = 32'd0;
            choose_cordic_0_in = 1'b1;
            enable_cordic_0_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_1_in = reset_pazen;
            x_cordic_1_in = {6'd0, differencex1_w, 16'd0};
            y_cordic_1_in = {7'd0, differencey1_w, 16'd0};
            z_cordic_1_in = 32'd0;
            choose_cordic_1_in = 1'b1;
            enable_cordic_1_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_2_in = reset_pazen;
            x_cordic_2_in = {6'd0, differencex2_w, 16'd0};
            y_cordic_2_in = {7'd0, differencey2_w, 16'd0};
            z_cordic_2_in = 32'd0;
            choose_cordic_2_in = 1'b1;
            enable_cordic_2_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_3_in = reset_pazen;
            x_cordic_3_in = {6'd0, differencex3_w, 16'd0};
            y_cordic_3_in = {7'd0, differencey3_w, 16'd0};
            z_cordic_3_in = 32'd0;
            choose_cordic_3_in = 1'b1;
            enable_cordic_3_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_4_in = reset_pazen;
            x_cordic_4_in = {6'd0, differencex4_w, 16'd0};
            y_cordic_4_in = {7'd0, differencey4_w, 16'd0};
            z_cordic_4_in = 32'd0;
            choose_cordic_4_in = 1'b1;
            enable_cordic_4_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_5_in = reset_pazen;
            x_cordic_5_in = {6'd0, differencex5_w, 16'd0};
            y_cordic_5_in = {7'd0, differencey5_w, 16'd0};
            z_cordic_5_in = 32'd0;
            choose_cordic_5_in = 1'b1;
            enable_cordic_5_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_6_in = reset_pazen;
            x_cordic_6_in = {6'd0, differencex6_w, 16'd0};
            y_cordic_6_in = {7'd0, differencey6_w, 16'd0};
            z_cordic_6_in = 32'd0;
            choose_cordic_6_in = 1'b1;
            enable_cordic_6_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
            reset_cordic_7_in = reset_pazen;
            x_cordic_7_in = {6'd0, differencex7_w, 16'd0};
            y_cordic_7_in = {7'd0, differencey7_w, 16'd0};
            z_cordic_7_in = 32'd0;
            choose_cordic_7_in = 1'b1;
            enable_cordic_7_in = histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER;
         end
         `COMPUTE_DISTANCE:
         begin
            
            done = done_DC_Y && done_DC_U && done_DC_V;
            reset_cordic_0_in = reset_pazen;
            x_cordic_0_in = 32'd0;
            y_cordic_0_in = 32'd0;
            z_cordic_0_in = 32'd0;
            choose_cordic_0_in = 1'b0;
            enable_cordic_0_in = 1'b0;
            reset_cordic_1_in = 1'b0;
            x_cordic_1_in = 32'd0;
            y_cordic_1_in = 32'd0;
            z_cordic_1_in = 32'd0;
            choose_cordic_1_in = 1'b0;
            enable_cordic_1_in = 1'b0;
            reset_cordic_2_in = 1'b0;
            x_cordic_2_in = 32'd0;
            y_cordic_2_in = 32'd0;
            z_cordic_2_in = 32'd0;
            choose_cordic_2_in = 1'b0;
            enable_cordic_2_in = 1'b0;
            reset_cordic_3_in = 1'b0;
            x_cordic_3_in = 32'd0;
            y_cordic_3_in = 32'd0;
            z_cordic_3_in = 32'd0;
            choose_cordic_3_in = 1'b0;
            enable_cordic_3_in = 1'b0;
            reset_cordic_4_in = 1'b0;
            x_cordic_4_in = 32'd0;
            y_cordic_4_in = 32'd0;
            z_cordic_4_in = 32'd0;
            choose_cordic_4_in = 1'b0;
            enable_cordic_4_in = 1'b0;
            reset_cordic_5_in = 1'b0;
            x_cordic_5_in = 32'd0;
            y_cordic_5_in = 32'd0;
            z_cordic_5_in = 32'd0;
            choose_cordic_5_in = 1'b0;
            enable_cordic_5_in = 1'b0;
            reset_cordic_6_in = 1'b0;
            x_cordic_6_in = 32'd0;
            y_cordic_6_in = 32'd0;
            z_cordic_6_in = 32'd0;
            choose_cordic_6_in = 1'b0;
            enable_cordic_6_in = 1'b0;
            reset_cordic_7_in = 1'b0;
            x_cordic_7_in = 32'd0;
            y_cordic_7_in = 32'd0;
            z_cordic_7_in = 32'd0;
            choose_cordic_7_in = 1'b0;
            enable_cordic_7_in = 1'b0;
         end
         //`SAVE_LOAD_FROM_DMA:
         //begin
         
         //end
         default:
         begin
            reset_cordic_0_in = 1'b0;
            done = 1'b0;
            x_cordic_0_in = 32'd0;
            y_cordic_0_in = 32'd0;
            z_cordic_0_in = 32'hFFFFFFFF;
            choose_cordic_0_in = 1'b0;
            enable_cordic_0_in = 1'b0;
            reset_cordic_1_in = 1'b0;
            x_cordic_1_in = 32'd0;
            y_cordic_1_in = 32'd0;
            z_cordic_1_in = 32'hFFFFFFFF;
            choose_cordic_1_in = 1'b0;
            enable_cordic_1_in = 1'd0;
            reset_cordic_2_in = 1'b0;
            x_cordic_2_in = 32'd0;
            y_cordic_2_in = 32'd0;
            z_cordic_2_in = 32'hFFFFFFFF;
            choose_cordic_2_in = 1'b0;
            enable_cordic_2_in = 1'b0;
            reset_cordic_3_in = 1'b0;
            x_cordic_3_in = 32'd0;
            y_cordic_3_in = 32'd0;
            z_cordic_3_in = 32'hFFFFFFFF;
            choose_cordic_3_in = 1'b0;
            enable_cordic_3_in = 1'b0;
            reset_cordic_4_in = 1'b0;
            x_cordic_4_in = 32'd0;
            y_cordic_4_in = 32'd0;
            z_cordic_4_in = 32'hFFFFFFFF;
            choose_cordic_4_in = 1'b0;
            enable_cordic_4_in = 1'b0;
            reset_cordic_5_in = 1'b0;
            x_cordic_5_in = 32'd0;
            y_cordic_5_in = 32'd0;
            z_cordic_5_in = 32'hFFFFFFFF;
            choose_cordic_5_in = 1'b0;
            enable_cordic_5_in = 1'b0;
            reset_cordic_6_in = 1'b0;
            x_cordic_6_in = 32'd0;
            y_cordic_6_in = 32'd0;
            z_cordic_6_in = 32'hFFFFFFFF;
            choose_cordic_6_in = 1'b0;
            enable_cordic_6_in = 1'b0;
            reset_cordic_7_in = 1'b0;
            x_cordic_7_in = 32'd0;
            y_cordic_7_in = 32'd0;
            z_cordic_7_in = 32'hFFFFFFFF;
            choose_cordic_7_in = 1'b0;
            enable_cordic_7_in = 1'b0;
         end
       
      
      endcase
   end
   
/******************************************************************************************************************************/
//                                       END CONTROL OF CORDIC
/******************************************************************************************************************************/   
   

/********************************************************/
//                   CORDIC
//x, y, z (32 bits) : inputs of cordic (x, y: coordinate, z: degrees)
//xn, yn, zn (32 bits) : output of cordic
//choose (1 bits) : 0: rotate to 0 degree,  1: rotate to z degree
/********************************************************/

   cordic c0(.clk(clk), 
             .reset(reset), 
             .x(x_cordic_0_in), 
             .y(y_cordic_0_in), 
             .z(z_cordic_0_in), 
             .xn(xn_cordic_0_out), 
             .yn(yn_cordic_0_out), 
             .zn(zn_cordic_0_out), 
             .choose(choose_cordic_0_in), 
             .cordic_enable(enable_cordic_0_in));
             
   cordic c1(.clk(clk), 
             .reset(reset), 
             .x(x_cordic_1_in), 
             .y(y_cordic_1_in), 
             .z(z_cordic_1_in), 
             .xn(xn_cordic_1_out), 
             .yn(yn_cordic_1_out), 
             .zn(zn_cordic_1_out), 
             .choose(choose_cordic_1_in), 
             .cordic_enable(enable_cordic_1_in));
   cordic c2(.clk(clk), 
             .reset(reset), 
             .x(x_cordic_2_in), 
             .y(y_cordic_2_in), 
             .z(z_cordic_2_in), 
             .xn(xn_cordic_2_out), 
             .yn(yn_cordic_2_out), 
             .zn(zn_cordic_2_out), 
             .choose(choose_cordic_2_in), 
             .cordic_enable(enable_cordic_2_in));
   cordic c3(.clk(clk), 
             .reset(reset), 
             .x(x_cordic_3_in), 
             .y(y_cordic_3_in), 
             .z(z_cordic_3_in), 
             .xn(xn_cordic_3_out), 
             .yn(yn_cordic_3_out), 
             .zn(zn_cordic_3_out), 
             .choose(choose_cordic_3_in), 
             .cordic_enable(enable_cordic_3_in)); 
   cordic c4(.clk(clk), 
             .reset(reset), 
             .x(x_cordic_4_in), 
             .y(y_cordic_4_in), 
             .z(z_cordic_4_in), 
             .xn(xn_cordic_4_out), 
             .yn(yn_cordic_4_out), 
             .zn(zn_cordic_4_out), 
             .choose(choose_cordic_4_in), 
             .cordic_enable(enable_cordic_4_in));
   cordic c5(.clk(clk), 
             .reset(reset), 
             .x(x_cordic_5_in), 
             .y(y_cordic_5_in), 
             .z(z_cordic_5_in), 
             .xn(xn_cordic_5_out), 
             .yn(yn_cordic_5_out), 
             .zn(zn_cordic_5_out), 
             .choose(choose_cordic_5_in), 
             .cordic_enable(enable_cordic_5_in));
   cordic c6(.clk(clk), 
             .reset(reset), 
             .x(x_cordic_6_in), 
             .y(y_cordic_6_in), 
             .z(z_cordic_6_in), 
             .xn(xn_cordic_6_out), 
             .yn(yn_cordic_6_out), 
             .zn(zn_cordic_6_out), 
             .choose(choose_cordic_6_in), 
             .cordic_enable(enable_cordic_6_in));
   cordic c7(.clk(clk), 
             .reset(reset), 
             .x(x_cordic_7_in), 
             .y(y_cordic_7_in), 
             .z(z_cordic_7_in), 
             .xn(xn_cordic_7_out), 
             .yn(yn_cordic_7_out), 
             .zn(zn_cordic_7_out), 
             .choose(choose_cordic_7_in), 
             .cordic_enable(enable_cordic_7_in));         
             
/*
   cordic_shell cs00(.clk(clk), 
                     .reset(reset_cordic_0_in), 
                     .x(x_cordic_0_in), 
                     .y(y_cordic_0_in), 
                     .z(z_cordic_0_in), 
                     .xn(xn_cordic_0_out), 
                     .yn(yn_cordic_0_out), 
                     .zn(zn_cordic_0_out), 
                     .choose(choose_cordic_0_in), 
                     .cordic_enable(enable_cordic_0_in), 
                     .done(done_cordic_0_out)
                     );
   
   cordic_shell cs01(.clk(clk), 
                     .reset(reset_cordic_1_in), 
                     .x(x_cordic_1_in), 
                     .y(y_cordic_1_in), 
                     .z(z_cordic_1_in), 
                     .xn(xn_cordic_1_out), 
                     .yn(yn_cordic_1_out), 
                     .zn(zn_cordic_1_out), 
                     .choose(choose_cordic_1_in), 
                     .cordic_enable(enable_cordic_1_in), 
                     .done(done_cordic_1_out)
                     );
*/   
   
             
          
          
          
          
          
          
          
/******************************************************************************************************************************/                                                
/****************************************               MAC RSPEs            **************************************************/
/******************************************************************************************************************************/                                

//input selector









/******************************************************************************************************************************/                                
/******************************************             ALU RSPE             **************************************************/
/******************************************************************************************************************************/                                

//input selector                                

   always@(*)               
   begin                    
      if(Mode_i == `CONNECT_COMPONENT_ANALYSIS)
      begin                 
         ALU_nobuffer_0_data_1_in_w = {Iup_0_in, Dup_0_in};         
         ALU_nobuffer_0_data_2_in_w = {Ileft_0_in, Dleft_0_in};         
         ALU_nobuffer_1_data_1_in_w = {1'b0, Dmid_0_in};         
         ALU_nobuffer_1_data_2_in_w = {1'b0, PE_temp_0_w};         
         ALU_nobuffer_2_data_1_in_w = {Iup_1_in, Dup_1_in};         
         ALU_nobuffer_2_data_2_in_w = {Imid_0_in, Dout_0_out_w};         
         ALU_nobuffer_3_data_1_in_w = {1'b0, Dmid_1_in};         
         ALU_nobuffer_3_data_2_in_w = {1'b0, PE_temp_1_w};         
         ALU_nobuffer_0_input_selector_in_w = 1'b0; 
         ALU_nobuffer_1_input_selector_in_w = 1'b0; 
         ALU_nobuffer_2_input_selector_in_w = 1'b0; 
         ALU_nobuffer_3_input_selector_in_w = 1'b0; 
         ALU_nobuffer_0_selector_w = 4'd9;          
         ALU_nobuffer_1_selector_w = 4'd9;          
         ALU_nobuffer_2_selector_w = 4'd9;          
         ALU_nobuffer_3_selector_w = 4'd9;  
                            
      end                   
      else                  
      begin                 
         ALU_nobuffer_0_data_1_in_w = 8'd255;  
         ALU_nobuffer_0_data_2_in_w = 8'd255;      
         ALU_nobuffer_1_data_1_in_w = 8'd255;
         ALU_nobuffer_1_data_2_in_w = 8'd255; 
         ALU_nobuffer_2_data_1_in_w = 8'd255;  
         ALU_nobuffer_2_data_2_in_w = 8'd255;       
         ALU_nobuffer_3_data_1_in_w = 8'd255;
         ALU_nobuffer_3_data_2_in_w = 8'd255; 
         ALU_nobuffer_0_input_selector_in_w = 1'b1; 
         ALU_nobuffer_1_input_selector_in_w = 1'b1; 
         ALU_nobuffer_2_input_selector_in_w = 1'b1; 
         ALU_nobuffer_3_input_selector_in_w = 1'b1; 
         ALU_nobuffer_0_selector_w = 4'd0;          
         ALU_nobuffer_1_selector_w = 4'd0;          
         ALU_nobuffer_2_selector_w = 4'd0;          
         ALU_nobuffer_3_selector_w = 4'd0;    
                            
                            
      end                   
                            
   end 

   ALU_nobuffer alu0(.clk(clk), 
          .reset(reset),    
          .data_1_in(ALU_nobuffer_0_data_1_in_w), 
          .data_2_in(ALU_nobuffer_0_data_2_in_w), 
          .input_select(ALU_nobuffer_0_input_selector_in_w), 
          .selector(ALU_nobuffer_0_selector_w), 
          .data_out(ALU_nobuffer_0_data_out_w), 
          .ALU_enable(ALU_enable)
          );                
   ALU_nobuffer alu1(.clk(clk), 
          .reset(reset),    
          .data_1_in(ALU_nobuffer_1_data_1_in_w), 
          .data_2_in(ALU_nobuffer_1_data_2_in_w), 
          .input_select(ALU_nobuffer_1_input_selector_in_w), 
          .selector(ALU_nobuffer_1_selector_w), 
          .data_out(ALU_nobuffer_1_data_out_w), 
          .ALU_enable(ALU_enable)
          );                
   ALU_nobuffer alu2(.clk(clk), 
          .reset(reset),    
          .data_1_in(ALU_nobuffer_2_data_1_in_w), 
          .data_2_in(ALU_nobuffer_2_data_2_in_w), 
          .input_select(ALU_nobuffer_2_input_selector_in_w), 
          .selector(ALU_nobuffer_2_selector_w), 
          .data_out(ALU_nobuffer_2_data_out_w), 
          .ALU_enable(ALU_enable)
          );                
   ALU_nobuffer alu3(.clk(clk), 
          .reset(reset),    
          .data_1_in(ALU_nobuffer_3_data_1_in_w), 
          .data_2_in(ALU_nobuffer_3_data_2_in_w), 
          .input_select(ALU_nobuffer_3_input_selector_in_w), 
          .selector(ALU_nobuffer_3_selector_w), 
          .data_out(ALU_nobuffer_3_data_out_w), 
          .ALU_enable(ALU_enable)
          );  





   
/******************************************************************************************************************************/   
//                                       Histogram Accumulation
//pazen: Accumulate histogram data
//pazen memory controller: bin maps to addresses of register file   
/******************************************************************************************************************************/

/*************************************************************/   
//             POSITION COMPUTATION
/*************************************************************/    
   
   assign temp_accumulate_how_many_w = (Mode_i == `ACCUMULATION_CANDIDATE_BACKGROUND_HISTOGRAM || Mode_i == `ACCUMULATION_TARGET_BACKGROUND_HISTOGRAM) ? {2'd0, accumulate_how_many_in_r[3:2]} : accumulate_how_many_in_r;
   assign position_counter_x_w = (histogram_accumulation_state_r == `BUFFER_WAIT) ?
                                    start_position_x_in :
                                    (accumulation_histogram_enable == 1'b1 && 
                                       position_counter_x_r + {6'd0, temp_accumulate_how_many_w} < start_position_x_in + width_in) ? 
                                         ((histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC || 
                                         histogram_accumulation_state_r == `BUFFER_WRITE_BUFFER)? 
                                            position_counter_x_r + {6'd0, accumulate_how_many_in_r} : 
                                            position_counter_x_r ) : 
                                         position_counter_x_r;
   assign position_counter_y_w = start_position_y_in;//(accumulation_histogram_enable == 1'b1 && position_counter_y_r + 9'd1 < start_position_y_in + height_in)? (((histogram_accumulation_state_r == `BUFFER_CLEAN) && position_counter_x_r + {6'd0, accumulate_how_many_in_r} >= start_position_x_in + width_in )? position_counter_y_r + 9'd1 : position_counter_y_r ) : start_position_y_in;
   
   assign positionx_0_w  = position_counter_x_r + 10'd0;
   assign positionx_1_w  = (Mode_i == `ACCUMULATION_CANDIDATE_BACKGROUND_HISTOGRAM || Mode_i == `ACCUMULATION_TARGET_BACKGROUND_HISTOGRAM) ? position_counter_x_r + 10'd0 : position_counter_x_r + 10'd1;
   assign positionx_2_w  = (Mode_i == `ACCUMULATION_CANDIDATE_BACKGROUND_HISTOGRAM || Mode_i == `ACCUMULATION_TARGET_BACKGROUND_HISTOGRAM) ? position_counter_x_r + 10'd0 : position_counter_x_r + 10'd2;
   assign positionx_3_w  = (Mode_i == `ACCUMULATION_CANDIDATE_BACKGROUND_HISTOGRAM || Mode_i == `ACCUMULATION_TARGET_BACKGROUND_HISTOGRAM) ? position_counter_x_r + 10'd0 : position_counter_x_r + 10'd3;
   assign positionx_4_w  = (Mode_i == `ACCUMULATION_CANDIDATE_BACKGROUND_HISTOGRAM || Mode_i == `ACCUMULATION_TARGET_BACKGROUND_HISTOGRAM) ? position_counter_x_r + 10'd1 : position_counter_x_r + 10'd4;
   assign positionx_5_w  = (Mode_i == `ACCUMULATION_CANDIDATE_BACKGROUND_HISTOGRAM || Mode_i == `ACCUMULATION_TARGET_BACKGROUND_HISTOGRAM) ? position_counter_x_r + 10'd1 : position_counter_x_r + 10'd5;
   assign positionx_6_w  = (Mode_i == `ACCUMULATION_CANDIDATE_BACKGROUND_HISTOGRAM || Mode_i == `ACCUMULATION_TARGET_BACKGROUND_HISTOGRAM) ? position_counter_x_r + 10'd1 : position_counter_x_r + 10'd6;
   assign positionx_7_w  = (Mode_i == `ACCUMULATION_CANDIDATE_BACKGROUND_HISTOGRAM || Mode_i == `ACCUMULATION_TARGET_BACKGROUND_HISTOGRAM) ? position_counter_x_r + 10'd1 : position_counter_x_r + 10'd7;
   assign positiony_0_w  = position_counter_y_r;
   assign positiony_1_w  = position_counter_y_r;
   assign positiony_2_w  = position_counter_y_r;
   assign positiony_3_w  = position_counter_y_r;
   assign positiony_4_w  = position_counter_y_r;
   assign positiony_5_w  = position_counter_y_r;
   assign positiony_6_w  = position_counter_y_r;
   assign positiony_7_w  = position_counter_y_r;
   
 

/*************************************************************/   
//             HISTOGRAM ACCUMULATION BUFFER
/*************************************************************/    
   
   assign Y_buffer_DOA_w = (buffer_count_read_r[1] == 1'b0) ? ( (buffer_count_read_r[0] == 1'b0)?DOA42_w[15:0]:DOA42_w[31:16] ) : ( (buffer_count_read_r[0] == 1'b0)?DOA42_w[47:32]:DOA42_w[63:48] );
   assign U_buffer_DOA_w = (buffer_count_read_r[1] == 1'b0) ? ( (buffer_count_read_r[0] == 1'b0)?DOA43_w[15:0]:DOA43_w[31:16] ) : ( (buffer_count_read_r[0] == 1'b0)?DOA43_w[47:32]:DOA43_w[63:48] );
   assign V_buffer_DOA_w = (buffer_count_read_r[1] == 1'b0) ? ( (buffer_count_read_r[0] == 1'b0)?DOA44_w[15:0]:DOA44_w[31:16] ) : ( (buffer_count_read_r[0] == 1'b0)?DOA44_w[47:32]:DOA44_w[63:48] );   
   assign MASK_buffer_DOA_w = DOA47_w;
   assign Cordic_buffer_DOA_w = (buffer_count_read_r[1] == 1'b0) ? ( (buffer_count_read_r[0] == 1'b0)?DOA45_w[15:0]:DOA45_w[31:16] ) : ( (buffer_count_read_r[0] == 1'b0)?DOA45_w[47:32]:DOA45_w[63:48] );//(Mode_i == `ACCUMULATION_CANDIDATE_BACKGROUND_HISTOGRAM || Mode_i == `ACCUMULATION_TARGET_BACKGROUND_HISTOGRAM) ? ( (buffer_count_read_r[2] == 1'b0) ? ( (buffer_count_read_r[1] == 1'b0)?DOA45_w[15:0]:DOA45_w[31:16] ) : ( (buffer_count_read_r[1] == 1'b0)?DOA45_w[47:32]:DOA45_w[63:48] ) ) : ( (buffer_count_read_r[1] == 1'b0) ? ( (buffer_count_read_r[0] == 1'b0)?DOA45_w[15:0]:DOA45_w[31:16] ) : ( (buffer_count_read_r[0] == 1'b0)?DOA45_w[47:32]:DOA45_w[63:48] ) );
   assign Weight_buffer_DOA_w = (buffer_count_read_r[1] == 1'b0) ? ( (buffer_count_read_r[0] == 1'b0)?DOA46_w[15:0]:DOA46_w[31:16] ) : ( (buffer_count_read_r[0] == 1'b0)?DOA46_w[47:32]:DOA46_w[63:48] );
   assign buffer_cordic_count_w = (histogram_accumulation_state_r == `BUFFER_COMPUTE_CORDIC) ? ( (accumulation_histogram_enable == 1'b1) ? buffer_cordic_count_r + 3'd1 : buffer_cordic_count_r ): (3'd0);
   assign MASK_buffer_data_write_w = mask_in;
   assign Y_buffer_data_write_w = accumulate_how_many_in_r == 4'd8 ? 
                                    {color_7_in_9d_r, color_6_in_9d_r, color_5_in_9d_r, color_4_in_9d_r, color_3_in_9d_r, color_2_in_9d_r, color_1_in_9d_r, color_0_in_9d_r}
                                  : accumulate_how_many_in_r == 4'd4 ?
                                    {color_3_in_9d_r, color_2_in_9d_r, color_1_in_9d_r, color_0_in_9d_r, color_3_in_9d_r, color_2_in_9d_r, color_1_in_9d_r, color_0_in_9d_r}
                                  : accumulate_how_many_in_r == 4'd2 ?
                                    {color_1_in_9d_r, color_0_in_9d_r, color_1_in_9d_r, color_0_in_9d_r, color_1_in_9d_r, color_0_in_9d_r, color_1_in_9d_r, color_0_in_9d_r}
                                  : {color_7_in_9d_r, color_6_in_9d_r, color_5_in_9d_r, color_4_in_9d_r, color_3_in_9d_r, color_2_in_9d_r, color_1_in_9d_r, color_0_in_9d_r};
   assign U_buffer_data_write_w = accumulate_how_many_in_r == 4'd8 ? 
                                    {color_7_in_9d_r, color_6_in_9d_r, color_5_in_9d_r, color_4_in_9d_r, color_3_in_9d_r, color_2_in_9d_r, color_1_in_9d_r, color_0_in_9d_r}
                                  : accumulate_how_many_in_r == 4'd4 ?
                                    {color_3_in_9d_r, color_2_in_9d_r, color_1_in_9d_r, color_0_in_9d_r, color_3_in_9d_r, color_2_in_9d_r, color_1_in_9d_r, color_0_in_9d_r}
                                  : accumulate_how_many_in_r == 4'd2 ?
                                    {color_1_in_9d_r, color_0_in_9d_r, color_1_in_9d_r, color_0_in_9d_r, color_1_in_9d_r, color_0_in_9d_r, color_1_in_9d_r, color_0_in_9d_r}
                                  : {color_7_in_9d_r, color_6_in_9d_r, color_5_in_9d_r, color_4_in_9d_r, color_3_in_9d_r, color_2_in_9d_r, color_1_in_9d_r, color_0_in_9d_r};
   assign V_buffer_data_write_w = accumulate_how_many_in_r == 4'd8 ? 
                                    {color_7_in_9d_r, color_6_in_9d_r, color_5_in_9d_r, color_4_in_9d_r, color_3_in_9d_r, color_2_in_9d_r, color_1_in_9d_r, color_0_in_9d_r}
                                  : accumulate_how_many_in_r == 4'd4 ?
                                    {color_3_in_9d_r, color_2_in_9d_r, color_1_in_9d_r, color_0_in_9d_r, color_3_in_9d_r, color_2_in_9d_r, color_1_in_9d_r, color_0_in_9d_r}
                                  : accumulate_how_many_in_r == 4'd2 ?
                                    {color_1_in_9d_r, color_0_in_9d_r, color_1_in_9d_r, color_0_in_9d_r, color_1_in_9d_r, color_0_in_9d_r, color_1_in_9d_r, color_0_in_9d_r}
                                  : {color_7_in_9d_r, color_6_in_9d_r, color_5_in_9d_r, color_4_in_9d_r, color_3_in_9d_r, color_2_in_9d_r, color_1_in_9d_r, color_0_in_9d_r};
   assign Cordic_buffer_data_write_w = {normalize_difference7_w, normalize_difference6_w, normalize_difference5_w, normalize_difference4_w, normalize_difference3_w, normalize_difference2_w, normalize_difference1_w, normalize_difference0_w};
   assign Weight_buffer_data_write_w = {background_weight_7_in_r, background_weight_6_in_r, background_weight_5_in_r, background_weight_4_in_r, background_weight_3_in_r, background_weight_2_in_r, background_weight_1_in_r, background_weight_0_in_r};
   
   assign normalize_difference0_w = diag_r[23:16] - xn_cordic_0_out[23:16] + 8'd1;
   assign normalize_difference1_w = diag_r[23:16] - xn_cordic_1_out[23:16] + 8'd1;
   assign normalize_difference2_w = diag_r[23:16] - xn_cordic_2_out[23:16] + 8'd1;
   assign normalize_difference3_w = diag_r[23:16] - xn_cordic_3_out[23:16] + 8'd1;
   assign normalize_difference4_w = diag_r[23:16] - xn_cordic_4_out[23:16] + 8'd1;
   assign normalize_difference5_w = diag_r[23:16] - xn_cordic_5_out[23:16] + 8'd1;
   assign normalize_difference6_w = diag_r[23:16] - xn_cordic_6_out[23:16] + 8'd1;
   assign normalize_difference7_w = diag_r[23:16] - xn_cordic_7_out[23:16] + 8'd1;
   assign count_bu_w = (histogram_accumulation_state_r == `BUFFER_COUNT_BU) ? count_bu_r + 2'd1 : 2'd0;
   assign histogram_accumulation_done_w = ((buffer_empty_w || buffer_count_read_r == buffer_count_r[6:1] - 6'd1) && histogram_accumulation_state_r == `BUFFER_OPER || histogram_accumulation_state_r == `BUFFER_WAIT)? 1'b1 : 1'b0;
   
   assign accumulation_histogram_reset = ~accumulation_histogram_enable || reset;
   assign histogram_accumulation_done = histogram_accumulation_done_r;
   assign accumulation_histogram_enable = Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM || Mode_i == `ACCUMULATION_TARGET_HISTOGRAM || Mode_i == `ACCUMULATION_CANDIDATE_BACKGROUND_HISTOGRAM || Mode_i == `ACCUMULATION_TARGET_BACKGROUND_HISTOGRAM;
   assign write_which_in_w = (histogram_accumulation_state_r == `BUFFER_WAIT) ? write_which_in : write_which_in_r;
   assign compute_bu_in_w = compute_bu_in;
   assign buffer_input_stop_w = (position_counter_x_r + {6'd0, accumulate_how_many_in_r} >= start_position_x_in + width_in) ? 1'b1 : 1'b0;
   
   assign MASK_stop_w = MASK_buffer_count_r[9:6] == 4'd9;
   
   assign MASK_1_in_w = MASK_buffer_DOA_w[{(MASK_buffer_count_read_r[5:1]),1'b0}];
   assign MASK_2_in_w = MASK_buffer_DOA_w[{(MASK_buffer_count_read_r[5:1]),1'b1}];
   
   
   
   
   
   
    
   
   
   always@(*)
   begin
      case(histogram_accumulation_state_r)
         `BUFFER_IDLE:
         begin
            if(Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM || Mode_i == `ACCUMULATION_TARGET_HISTOGRAM || Mode_i == `ACCUMULATION_CANDIDATE_BACKGROUND_HISTOGRAM || Mode_i == `ACCUMULATION_TARGET_BACKGROUND_HISTOGRAM)
               histogram_accumulation_state_w = `BUFFER_WAIT;
            else
               histogram_accumulation_state_w = `BUFFER_IDLE;
         end
         `BUFFER_COMPUTE_CORDIC:
         begin
            if(buffer_cordic_count_r >= 3'd7)
               histogram_accumulation_state_w = `BUFFER_WRITE_BUFFER;
            else
               histogram_accumulation_state_w = `BUFFER_COMPUTE_CORDIC;
         end
         `BUFFER_WRITE_BUFFER:
         begin
            if(write_which_in_r != `WRITE_MASK_BUFFER)
            begin
               if(buffer_full_w || buffer_input_stop_8d_r)  
                  histogram_accumulation_state_w = `BUFFER_WAIT;
               else
                  histogram_accumulation_state_w = `BUFFER_WRITE_BUFFER;
            end
            else
            begin
               if(MASK_stop_r || MASK_input_stop_r)  
                  histogram_accumulation_state_w = `BUFFER_WAIT;
               else
                  histogram_accumulation_state_w = `BUFFER_WRITE_BUFFER;
            end
         end
         `BUFFER_WAIT:
         begin
            if(compute_bu_in_r == 2'd0)
               histogram_accumulation_state_w = `BUFFER_WAIT;
            else if(compute_bu_in_r == 2'd1)
            begin
               if(write_which_in_w == `WRITE_MASK_BUFFER)
                  histogram_accumulation_state_w = `BUFFER_WRITE_BUFFER;
               else
                  histogram_accumulation_state_w = `BUFFER_COMPUTE_CORDIC;
               
            end
            else
               histogram_accumulation_state_w = `BUFFER_COUNT_BU;
         end
         `BUFFER_OPER:
         begin
            if(buffer_empty_w || buffer_count_read_r == buffer_count_r[6:1] - 6'd1)
               histogram_accumulation_state_w = `BUFFER_CLEAN;
            else
               histogram_accumulation_state_w = `BUFFER_COUNT_BU;
         end
         `BUFFER_COUNT_BU:
         begin
            if(count_bu_r <= 2'd1)
               histogram_accumulation_state_w = `BUFFER_COUNT_BU;
            else
               histogram_accumulation_state_w = `BUFFER_OPER;
            //histogram_accumulation_state_w = `BUFFER_OPER;   
         end
         `BUFFER_CLEAN:
         begin
            histogram_accumulation_state_w = `BUFFER_COMPUTE_CORDIC;
         end
         default:       
         begin
            histogram_accumulation_state_w = `BUFFER_IDLE;
         end
      endcase
      
   end
   
   always@(*)
   begin
      case(histogram_accumulation_state_r)
         `BUFFER_IDLE:
         begin
            MASK_WEAN_w = 1'b1;
            buffer_count_w = 7'd0;
            buffer_count_read_w = 6'd0;
            buffer_addr_A_w = 4'd0;
            Cordic_buffer_addr_A_w = 4'd0;
            buffer_MUXA_w = 4'd15;
            Cordic_buffer_MUXA_w = 4'd15;
            buffer_full_w = 1'b0;
            buffer_empty_w = 1'b0;
            buffer_WEAN_Y_w = 1'b1;      
            buffer_WEAN_U_w = 1'b1;      
            buffer_WEAN_V_w = 1'b1;      
            Cordic_buffer_WEAN_w = 1'b1;
            buffer_OEA_w = 1'b0;
            Cordic_buffer_OEA_w = 1'b0;      
            buffer_choose_reg_A_w = 1'b0;
            MASK_choose_reg_A_w = 1'b0;
            Cordic_buffer_choose_reg_A_w = 1'b0;
            MASK_buffer_count_w = 10'd0;
            MASK_buffer_count_read_w = 10'd0;
            MASK_buffer_A_w = 4'd0;
            
            
         end
         `BUFFER_COMPUTE_CORDIC:
         begin
            MASK_WEAN_w = 1'b1;
            buffer_count_w = 7'd0;
            buffer_count_read_w = 6'd0;
            buffer_addr_A_w = 4'd0;
            Cordic_buffer_addr_A_w = 4'd0;
            buffer_MUXA_w = 4'd15;
            Cordic_buffer_MUXA_w = 4'd15;
            buffer_full_w = 1'b0;
            buffer_empty_w = 1'b0;
            buffer_WEAN_Y_w = 1'b1;      
            buffer_WEAN_U_w = 1'b1;      
            buffer_WEAN_V_w = 1'b1;      
            Cordic_buffer_WEAN_w = 1'b1;
            buffer_OEA_w = 1'b0;
            Cordic_buffer_OEA_w = 1'b0;      
            buffer_choose_reg_A_w = 1'b0;
            Cordic_buffer_choose_reg_A_w = 1'b0;
            MASK_buffer_count_w = 10'd0;
            MASK_buffer_count_read_w = 10'd0;
            MASK_buffer_A_w = 4'd0;
            MASK_choose_reg_A_w = 1'b0;
         end
         `BUFFER_WRITE_BUFFER:
         begin
            MASK_WEAN_w = (write_which_in_r == `WRITE_MASK_BUFFER)?1'b0:1'b1;
            buffer_count_w = ((buffer_count_r < 7'd80) ? buffer_count_r + {3'd0, accumulate_how_many_in_r} : buffer_count_r );//(Mode_i == `ACCUMULATION_CANDIDATE_BACKGROUND_HISTOGRAM || Mode_i == `ACCUMULATION_TARGET_BACKGROUND_HISTOGRAM) ? ((buffer_count_r < 7'd80) ? buffer_count_r + {1'b0, accumulate_how_many_in_r, 2'd0} : buffer_count_r ) : ((buffer_count_r < 7'd80) ? buffer_count_r + {3'd0, accumulate_how_many_in_r} : buffer_count_r );
            buffer_addr_A_w = buffer_count_r[6:3];
            MASK_buffer_A_w = MASK_buffer_count_r[9:6];
            MASK_buffer_count_w = (MASK_stop_r == 1'b0)? MASK_buffer_count_r + 10'd64 : MASK_buffer_count_r;
            Cordic_buffer_addr_A_w = buffer_count_r[6:3];//(Mode_i == `ACCUMULATION_CANDIDATE_BACKGROUND_HISTOGRAM || Mode_i == `ACCUMULATION_TARGET_BACKGROUND_HISTOGRAM) ? {2'd0,buffer_count_r[6:5]} : buffer_count_r[6:3];
            //buffer_MUXA_w = (buffer_count_r[2] == 1'b0) ? ( (buffer_count_r[1] == 1'b0)?4'b0001:4'b0010 ) : ( (buffer_count_r[1] == 1'b0)?4'b0100:4'b1000 );
            case(accumulate_how_many_in_r)
               4'd0:    buffer_MUXA_w = 4'b0000;
               4'd2:    //buffer_MUXA_w = 4'b0001;
                     begin
                        case(buffer_count_r[2:0])
                           3'd0:buffer_MUXA_w = 4'b0001;
                           3'd2:buffer_MUXA_w = 4'b0010;
                           3'd4:buffer_MUXA_w = 4'b0100;
                           3'd6:buffer_MUXA_w = 4'b1000;
                           default: buffer_MUXA_w = 4'd0;
                        endcase
                     end
               4'd4:    //buffer_MUXA_w = 4'b0011;
                     begin
                        case(buffer_count_r[2:0])
                           3'd0:buffer_MUXA_w = 4'b0011;
                           3'd4:buffer_MUXA_w = 4'b1100;
                           default: buffer_MUXA_w = 4'd0;
                        endcase
                     end
               4'd6:    buffer_MUXA_w = 4'b0111;
               4'd8:    buffer_MUXA_w = 4'b1111;
               default: buffer_MUXA_w = 4'b0000;
            
            endcase
            
            case(accumulate_how_many_in_r)
               4'd0:    Cordic_buffer_MUXA_w = 4'b0000;
               4'd2:    //Cordic_buffer_MUXA_w = 4'b0001;
                     begin
                        case(buffer_count_r[2:0])
                           3'd0:Cordic_buffer_MUXA_w = 4'b0001;
                           3'd2:Cordic_buffer_MUXA_w = 4'b0010;
                           3'd4:Cordic_buffer_MUXA_w = 4'b0100;
                           3'd6:Cordic_buffer_MUXA_w = 4'b1000;
                           default: Cordic_buffer_MUXA_w = 4'd0;
                        endcase
                     end
               
               4'd4:    //Cordic_buffer_MUXA_w = 4'b0011;
                     begin
                        case(buffer_count_r[2:0])
                           3'd0:Cordic_buffer_MUXA_w = 4'b0011;
                           3'd4:Cordic_buffer_MUXA_w = 4'b1100;
                           default: Cordic_buffer_MUXA_w = 4'd0;
                        endcase
                     end
               4'd6:    Cordic_buffer_MUXA_w = 4'b0111;
               4'd8:    Cordic_buffer_MUXA_w = 4'b1111;
               default: Cordic_buffer_MUXA_w = 4'b0000;
            
            endcase
            /*
            if(Mode_i == `ACCUMULATION_CANDIDATE_BACKGROUND_HISTOGRAM || Mode_i == `ACCUMULATION_TARGET_BACKGROUND_HISTOGRAM)
            begin
               case(accumulate_how_many_in_r)
                  4'd0:    Cordic_buffer_MUXA_w = 4'b0000;
                  4'd4:    Cordic_buffer_MUXA_w = 4'b0001;
                  4'd8:    Cordic_buffer_MUXA_w = 4'b0011;
                  default: Cordic_buffer_MUXA_w = 4'b0000;
            
               endcase
            
            end
            else
            begin
               case(accumulate_how_many_in_r)
                  4'd0:    Cordic_buffer_MUXA_w = 4'b0000;
                  4'd2:    Cordic_buffer_MUXA_w = 4'b0001;
                  4'd4:    Cordic_buffer_MUXA_w = 4'b0011;
                  4'd6:    Cordic_buffer_MUXA_w = 4'b0111;
                  4'd8:    Cordic_buffer_MUXA_w = 4'b1111;
                  default: Cordic_buffer_MUXA_w = 4'b0000;
            
               endcase
            end
            */
            buffer_count_read_w = 6'd0;
            buffer_full_w = (buffer_count_r < 7'd80) ? 1'b0 : 1'b1;
            buffer_empty_w = 1'b0;
            buffer_WEAN_Y_w = (write_which_in_r == `WRITE_Y_BUFFER) ? 1'b0 : 1'b1;      
            buffer_WEAN_U_w = (write_which_in_r == `WRITE_U_BUFFER) ? 1'b0 : 1'b1;      
            buffer_WEAN_V_w = (write_which_in_r == `WRITE_V_BUFFER) ? 1'b0 : 1'b1;      
            Cordic_buffer_WEAN_w = 1'b0;
            buffer_OEA_w = 1'b0;
            Cordic_buffer_OEA_w = 1'b0;      
            buffer_choose_reg_A_w = 1'b1;
            MASK_choose_reg_A_w = 1'b1;
            Cordic_buffer_choose_reg_A_w = 1'b1;
            MASK_buffer_count_read_w = 64'd0;
         end
         `BUFFER_OPER:
         begin
            MASK_WEAN_w = 1'b1;
            buffer_count_w = buffer_count_r;
            MASK_buffer_count_w = MASK_buffer_count_r;
            MASK_buffer_count_read_w = MASK_buffer_count_read_r + 10'd2;
            buffer_count_read_w = (buffer_count_read_r <= buffer_count_r[6:1]) ? buffer_count_read_r + 6'd1 : buffer_count_read_r;
            buffer_addr_A_w = buffer_count_read_r[5:2];
            MASK_buffer_A_w = MASK_buffer_count_read_r[9:6];
            Cordic_buffer_addr_A_w = buffer_count_read_r[5:2];//(Mode_i == `ACCUMULATION_CANDIDATE_BACKGROUND_HISTOGRAM || Mode_i == `ACCUMULATION_TARGET_BACKGROUND_HISTOGRAM) ? {1'b0,buffer_count_read_r[5:3]} : buffer_count_read_r[5:2];
            buffer_MUXA_w = 4'd15;
            buffer_full_w = 1'b0;
            buffer_empty_w = (buffer_count_read_r <= buffer_count_r[6:1]) ? 1'b0 : 1'b1;
            buffer_WEAN_Y_w = 1'b1;      
            buffer_WEAN_U_w = 1'b1;      
            buffer_WEAN_V_w = 1'b1;      
            Cordic_buffer_WEAN_w = 1'b1;
            buffer_OEA_w = 1'b1;
            Cordic_buffer_OEA_w = 1'b1;      
            buffer_choose_reg_A_w = 1'b1;
            Cordic_buffer_choose_reg_A_w = 1'b1;
            Cordic_buffer_MUXA_w = 4'd15;
            MASK_choose_reg_A_w = 1'b1;
         end
         `BUFFER_COUNT_BU:
         begin
            MASK_WEAN_w = 1'b1;
            buffer_count_w = buffer_count_r;
            buffer_count_read_w = buffer_count_read_r;
            MASK_buffer_count_w = MASK_buffer_count_r;
            MASK_buffer_count_read_w = MASK_buffer_count_read_r;
            buffer_addr_A_w = buffer_count_read_r[5:2];
            MASK_buffer_A_w = MASK_buffer_count_read_r[9:6];
            Cordic_buffer_addr_A_w = buffer_count_read_r[5:2];//(Mode_i == `ACCUMULATION_CANDIDATE_BACKGROUND_HISTOGRAM || Mode_i == `ACCUMULATION_TARGET_BACKGROUND_HISTOGRAM) ? {1'b0,buffer_count_read_r[5:3]} : buffer_count_read_r[5:2];
            buffer_MUXA_w = 4'd15;
            buffer_full_w = 1'b0;
            buffer_empty_w = (buffer_count_read_r <= buffer_count_r[6:1]) ? 1'b0 : 1'b1;
            buffer_WEAN_Y_w = 1'b1;      
            buffer_WEAN_U_w = 1'b1;      
            buffer_WEAN_V_w = 1'b1;      
            Cordic_buffer_WEAN_w = 1'b1;
            buffer_OEA_w = 1'b1;
            Cordic_buffer_OEA_w = 1'b1;      
            buffer_choose_reg_A_w = 1'b1;
            Cordic_buffer_choose_reg_A_w = 1'b1;
            Cordic_buffer_MUXA_w = 4'd15;
            MASK_choose_reg_A_w = 1'b1;
         end
         `BUFFER_WAIT:
         begin
            MASK_WEAN_w = 1'b1;
            buffer_count_w = buffer_count_r;
            buffer_count_read_w = buffer_count_read_r;
            MASK_buffer_count_w = MASK_buffer_count_r;
            MASK_buffer_count_read_w = MASK_buffer_count_read_r;
            buffer_addr_A_w = buffer_count_read_r[5:2];
            MASK_buffer_A_w = MASK_buffer_count_read_r[9:6];
            Cordic_buffer_addr_A_w = buffer_count_read_r[5:2];//(Mode_i == `ACCUMULATION_CANDIDATE_BACKGROUND_HISTOGRAM || Mode_i == `ACCUMULATION_TARGET_BACKGROUND_HISTOGRAM) ? {1'b0,buffer_count_read_r[5:3]} : buffer_count_read_r[5:2];
            buffer_MUXA_w = 4'd15;
            buffer_full_w = 1'b0;
            buffer_empty_w = (buffer_count_read_r <= buffer_count_r[6:1]) ? 1'b0 : 1'b1;
            buffer_WEAN_Y_w = 1'b1;      
            buffer_WEAN_U_w = 1'b1;      
            buffer_WEAN_V_w = 1'b1;      
            Cordic_buffer_WEAN_w = 1'b1;
            buffer_OEA_w = 1'b1;
            Cordic_buffer_OEA_w = 1'b1;      
            buffer_choose_reg_A_w = 1'b1;
            Cordic_buffer_choose_reg_A_w = 1'b1;
            Cordic_buffer_MUXA_w = 4'd15;
            MASK_choose_reg_A_w = 1'b1;
         end
         default:       
         begin
            MASK_WEAN_w = 1'b1;
            buffer_count_w = 7'd0;
            buffer_count_read_w = 6'd0;
            MASK_buffer_count_w = 10'd0;
            MASK_buffer_count_read_w = 10'd0;
            buffer_addr_A_w = 4'd0;
            MASK_buffer_A_w = 4'd0;
            Cordic_buffer_addr_A_w = 4'd0;
            buffer_MUXA_w = 4'd0;
            buffer_full_w = 1'b0;
            buffer_empty_w = 1'b0;
            buffer_WEAN_Y_w = 1'b1;      
            buffer_WEAN_U_w = 1'b1;      
            buffer_WEAN_V_w = 1'b1;      
            Cordic_buffer_WEAN_w = 1'b1;
            buffer_OEA_w = 1'b0;
            Cordic_buffer_OEA_w = 1'b0;      
            buffer_choose_reg_A_w = 1'b0;
            Cordic_buffer_choose_reg_A_w = 1'b0;
            Cordic_buffer_MUXA_w = 4'd0;
            MASK_choose_reg_A_w = 1'b0;
         end
      endcase
   
   
   end
//   wire aclk = clk & accumulation_histogram_enable;
   
   always@(posedge clk or posedge reset)
   begin
      if(reset)
      begin
         histogram_accumulation_state_r <= 3'd0;
         buffer_count_r <= 7'd0;
         buffer_count_read_r <= 6'd0;
         buffer_cordic_count_r <= 3'd0;
         count_bu_r <= 2'd0;
         MASK_buffer_count_r <= 10'd0;
         MASK_buffer_count_read_r <= 10'd0;
         MASK_stop_r <= 1'b0;
         MASK_input_stop_r <= 1'b0;
      end
      else if(accumulation_histogram_enable)
      begin
         histogram_accumulation_state_r <= histogram_accumulation_state_w;
         buffer_count_r <= buffer_count_w;
         buffer_count_read_r <= buffer_count_read_w;
         buffer_cordic_count_r <= buffer_cordic_count_w;
         count_bu_r <= count_bu_w;
         MASK_buffer_count_r <= MASK_buffer_count_w;
         MASK_buffer_count_read_r <= MASK_buffer_count_read_w;
         MASK_stop_r <= MASK_stop_w;
         MASK_input_stop_r <= MASK_input_stop;
      end
   
   
   end




/*************************************************************/   
//                    PAZEN MEMORY CONTROL
/*************************************************************/    
   
   assign DOA00_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA00_w : DOA21_w;
   assign DOB00_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB00_w : DOB21_w;
   assign DOA01_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA01_w : DOA22_w;
   assign DOB01_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB01_w : DOB22_w;
   assign DOA02_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA02_w : DOA23_w;
   assign DOB02_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB02_w : DOB23_w;
   assign DOA03_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA03_w : DOA24_w;
   assign DOB03_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB03_w : DOB24_w;
   assign DOA04_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA04_w : DOA25_w;
   assign DOB04_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB04_w : DOB25_w;
   assign DOA05_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA05_w : DOA26_w;
   assign DOB05_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB05_w : DOB26_w;
   assign DOA06_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA06_w : DOA27_w;
   assign DOB06_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB06_w : DOB27_w;
   assign DOA00_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA07_w : DOA28_w;
   assign DOB00_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB07_w : DOB28_w;
   assign DOA01_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA08_w : DOA29_w;
   assign DOB01_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB08_w : DOB29_w;
   assign DOA02_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA09_w : DOA30_w;
   assign DOB02_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB09_w : DOB30_w;
   assign DOA03_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA10_w : DOA31_w;
   assign DOB03_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB10_w : DOB31_w;
   assign DOA04_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA11_w : DOA32_w;
   assign DOB04_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB11_w : DOB32_w;
   assign DOA05_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA12_w : DOA33_w;
   assign DOB05_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB12_w : DOB33_w;
   assign DOA06_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA13_w : DOA34_w;
   assign DOB06_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB13_w : DOB34_w;
   assign DOA00_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA14_w : DOA35_w;
   assign DOB00_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB14_w : DOB35_w;
   assign DOA01_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA15_w : DOA36_w;
   assign DOB01_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB15_w : DOB36_w;
   assign DOA02_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA16_w : DOA37_w;
   assign DOB02_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB16_w : DOB37_w;
   assign DOA03_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA17_w : DOA38_w;
   assign DOB03_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB17_w : DOB38_w;
   assign DOA04_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA18_w : DOA39_w;
   assign DOB04_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB18_w : DOB39_w;
   assign DOA05_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA19_w : DOA40_w;
   assign DOB05_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB19_w : DOB40_w;
   assign DOA06_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA20_w : DOA41_w;
   assign DOB06_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB20_w : DOB41_w;  
   
   
   assign DOA07_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA21_w : DOA00_w;
   assign DOB07_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB21_w : DOB00_w;
   assign DOA08_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA22_w : DOA01_w;
   assign DOB08_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB22_w : DOB01_w;
   assign DOA09_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA23_w : DOA02_w;
   assign DOB09_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB23_w : DOB02_w;
   assign DOA10_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA24_w : DOA03_w;
   assign DOB10_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB24_w : DOB03_w;
   assign DOA11_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA25_w : DOA04_w;
   assign DOB11_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB25_w : DOB04_w;
   assign DOA12_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA26_w : DOA05_w;
   assign DOB12_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB26_w : DOB05_w;
   assign DOA13_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA27_w : DOA06_w;
   assign DOB13_memory_control_Y_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB27_w : DOB06_w;
   assign DOA07_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA28_w : DOA07_w;
   assign DOB07_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB28_w : DOB07_w;
   assign DOA08_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA29_w : DOA08_w;
   assign DOB08_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB29_w : DOB08_w;
   assign DOA09_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA30_w : DOA09_w;
   assign DOB09_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB30_w : DOB09_w;
   assign DOA10_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA31_w : DOA10_w;
   assign DOB10_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB31_w : DOB10_w;
   assign DOA11_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA32_w : DOA11_w;
   assign DOB11_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB32_w : DOB11_w;
   assign DOA12_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA33_w : DOA12_w;
   assign DOB12_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB33_w : DOB12_w;
   assign DOA13_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA34_w : DOA13_w;
   assign DOB13_memory_control_U_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB34_w : DOB13_w;
   assign DOA07_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA35_w : DOA14_w;
   assign DOB07_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB35_w : DOB14_w;
   assign DOA08_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA36_w : DOA15_w;
   assign DOB08_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB36_w : DOB15_w;
   assign DOA09_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA37_w : DOA16_w;
   assign DOB09_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB37_w : DOB16_w;
   assign DOA10_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA38_w : DOA17_w;
   assign DOB10_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB38_w : DOB17_w;
   assign DOA11_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA39_w : DOA18_w;
   assign DOB11_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB39_w : DOB18_w;
   assign DOA12_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA40_w : DOA19_w;
   assign DOB12_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB40_w : DOB19_w;
   assign DOA13_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOA41_w : DOA20_w;
   assign DOB13_memory_control_V_w = (Mode_i == `ACCUMULATION_CANDIDATE_HISTOGRAM)? DOB41_w : DOB20_w;  
   
      

   assign acc_background_color_or_not = (Mode_i == `ACCUMULATION_CANDIDATE_BACKGROUND_HISTOGRAM || Mode_i == `ACCUMULATION_TARGET_BACKGROUND_HISTOGRAM) ? 1'b1 : 1'b0;

   pazen p01(
          .clk(clk), 
          .reset(reset_buffer), 
          .y1_in(Y_buffer_DOA_r[7:0] ), 
          .y2_in(Y_buffer_DOA_r[15:8]), 
          .u1_in(U_buffer_DOA_r[7:0]), 
          .u2_in(U_buffer_DOA_r[15:8]), 
          .v1_in(V_buffer_DOA_r[7:0]), 
          .v2_in(V_buffer_DOA_r[15:8]), 
          .pazen_enable(pazen_enable_r),         
          .data_read_A_Y(data_read_A_Y_pazen), 
          .data_read_B_Y(data_read_B_Y_pazen), 
          .data_read_A_U(data_read_A_U_pazen), 
          .data_read_B_U(data_read_B_U_pazen), 
          .data_read_A_V(data_read_A_V_pazen), 
          .data_read_B_V(data_read_B_V_pazen),
          .data_write_A_Y(data_write_A_Y_pazen), 
          .data_write_B_Y(data_write_B_Y_pazen), 
          .data_write_A_U(data_write_A_U_pazen), 
          .data_write_B_U(data_write_B_U_pazen), 
          .data_write_A_V(data_write_A_V_pazen), 
          .data_write_B_V(data_write_B_V_pazen), 
          .wea_Y(wea_Y_pazen), 
          .web_Y(web_Y_pazen), 
          .wea_U(wea_U_pazen), 
          .web_U(web_U_pazen), 
          .wea_V(wea_V_pazen), 
          .web_V(web_V_pazen), 
          .csa_Y(csa_Y_pazen), 
          .csb_Y(csb_Y_pazen), 
          .csa_U(csa_U_pazen), 
          .csb_U(csb_U_pazen), 
          .csa_V(csa_V_pazen), 
          .csb_V(csb_V_pazen), 
          .oea_Y(oea_Y_pazen),        
          .oeb_Y(oeb_Y_pazen),        
          .oea_U(oea_U_pazen),        
          .oeb_U(oeb_U_pazen),        
          .oea_V(oea_V_pazen),        
          .oeb_V(oeb_V_pazen),        
          .total_histogram_y(total_histogram_pazen_y_w), 
          .total_histogram_u(total_histogram_pazen_u_w), 
          .total_histogram_v(total_histogram_pazen_v_w), 
          .diag(diag),
          .y1_out(y1_pazen), 
          .y2_out(y2_pazen), 
          .u1_out(u1_pazen), 
          .u2_out(u2_pazen), 
          .v1_out(v1_pazen), 
          .v2_out(v2_pazen),
          .distance_from_cordic_1_in(Cordic_buffer_DOA_r[7:0]), 
          .distance_from_cordic_2_in(Cordic_buffer_DOA_r[15:8]), 
          .background_weight_1_in(Weight_buffer_DOA_w[7:0]), 
          .background_weight_2_in(Weight_buffer_DOA_w[15:8]), 
          .background_weight_threshold_in(background_weight_threshold_in), 
          .background_binvalue_threshold_in(background_binvalue_threshold_in),
          .acc_background_color_or_not(acc_background_color_or_not), 
          .bg_y1_binvalue_in(data_read_A_Y_pazen_bg), 
          .bg_y2_binvalue_in(data_read_B_Y_pazen_bg), 
          .bg_u1_binvalue_in(data_read_A_U_pazen_bg), 
          .bg_u2_binvalue_in(data_read_B_U_pazen_bg), 
          .bg_v1_binvalue_in(data_read_A_V_pazen_bg), 
          .bg_v2_binvalue_in(data_read_B_V_pazen_bg), 
          .use_background_color_or_not(use_background_color_or_not), 
          .mask_on_or_not(mask_on_or_not),
          .MASK_1_in(MASK_1_in_w),
          .MASK_2_in(MASK_2_in_w)
//          ,
//          .flag_Y(flag_Y),
//          .flag_U(flag_U),
//          .flag_V(flag_V)
         );                           
   pazen_memory_controller pmcY01(.clk(clk), 
                                 .reset(reset), 
                                 .A_in(y1_pazen), 
                                 .B_in(y2_pazen), 
                                 .DIA(data_write_A_Y_pazen), 
                                 .DIB(data_write_B_Y_pazen), 
                                 .DOA(data_read_A_Y_pazen), 
                                 .DOB(data_read_B_Y_pazen), 
                                 .A_w(A_memory_control_Y_w), 
                                 .B_w(B_memory_control_Y_w),
                                 .CSA(csa_Y_pazen),
                                 .CSB(csb_Y_pazen),
                                 .DOA00_w(DOA00_memory_control_Y_w), 
                                 .DOB00_w(DOB00_memory_control_Y_w), 
                                 .DOA01_w(DOA01_memory_control_Y_w), 
                                 .DOB01_w(DOB01_memory_control_Y_w), 
                                 .DOA02_w(DOA02_memory_control_Y_w), 
                                 .DOB02_w(DOB02_memory_control_Y_w), 
                                 .DOA03_w(DOA03_memory_control_Y_w), 
                                 .DOB03_w(DOB03_memory_control_Y_w), 
                                 .DOA04_w(DOA04_memory_control_Y_w), 
                                 .DOB04_w(DOB04_memory_control_Y_w), 
                                 .DOA05_w(DOA05_memory_control_Y_w), 
                                 .DOB05_w(DOB05_memory_control_Y_w), 
                                 .DOA06_w(DOA06_memory_control_Y_w), 
                                 .DOB06_w(DOB06_memory_control_Y_w),
                                 .DIA_T_w(DIA_T_memory_control_Y_w), 
                                 .DIB_T_w(DIB_T_memory_control_Y_w),
                                 .choose_reg_A_w(choose_reg_A_memory_control_Y_w), 
                                 .choose_reg_B_w(choose_reg_B_memory_control_Y_w), 
                                 .MUXA(MUXA_memory_control_Y),
                                 .MUXB(MUXB_memory_control_Y)
                                 );
   pazen_memory_controller pmcY02(.clk(clk), 
                                 .reset(reset), 
                                 .A_in(Y_buffer_DOA_r[7:0] ), 
                                 .B_in(Y_buffer_DOA_r[15:8]), 
                                 .CSA(csa_Y_pazen),
                                 .CSB(csb_Y_pazen),
                                 .DOA(data_read_A_Y_pazen_bg), 
                                 .DOB(data_read_B_Y_pazen_bg), 
                                 .A_w(A_memory_control_Y_bg_w), 
                                 .B_w(B_memory_control_Y_bg_w),
                                 .DOA00_w(DOA07_memory_control_Y_w), 
                                 .DOB00_w(DOB07_memory_control_Y_w), 
                                 .DOA01_w(DOA08_memory_control_Y_w), 
                                 .DOB01_w(DOB08_memory_control_Y_w), 
                                 .DOA02_w(DOA09_memory_control_Y_w), 
                                 .DOB02_w(DOB09_memory_control_Y_w), 
                                 .DOA03_w(DOA10_memory_control_Y_w), 
                                 .DOB03_w(DOB10_memory_control_Y_w), 
                                 .DOA04_w(DOA11_memory_control_Y_w), 
                                 .DOB04_w(DOB11_memory_control_Y_w), 
                                 .DOA05_w(DOA12_memory_control_Y_w), 
                                 .DOB05_w(DOB12_memory_control_Y_w), 
                                 .DOA06_w(DOA13_memory_control_Y_w), 
                                 .DOB06_w(DOB13_memory_control_Y_w)
                                 );
   pazen_memory_controller pmcU01(.clk(clk), 
                                 .reset(reset), 
                                 .A_in(u1_pazen), 
                                 .B_in(u2_pazen), 
                                 .DIA(data_write_A_U_pazen), 
                                 .DIB(data_write_B_U_pazen), 
                                 .DOA(data_read_A_U_pazen), 
                                 .DOB(data_read_B_U_pazen), 
                                 .A_w(A_memory_control_U_w), 
                                 .B_w(B_memory_control_U_w),
                                 .CSA(csa_U_pazen),
                                 .CSB(csb_U_pazen),
                                 .DOA00_w(DOA00_memory_control_U_w), 
                                 .DOB00_w(DOB00_memory_control_U_w), 
                                 .DOA01_w(DOA01_memory_control_U_w), 
                                 .DOB01_w(DOB01_memory_control_U_w), 
                                 .DOA02_w(DOA02_memory_control_U_w), 
                                 .DOB02_w(DOB02_memory_control_U_w), 
                                 .DOA03_w(DOA03_memory_control_U_w), 
                                 .DOB03_w(DOB03_memory_control_U_w), 
                                 .DOA04_w(DOA04_memory_control_U_w), 
                                 .DOB04_w(DOB04_memory_control_U_w), 
                                 .DOA05_w(DOA05_memory_control_U_w), 
                                 .DOB05_w(DOB05_memory_control_U_w), 
                                 .DOA06_w(DOA06_memory_control_U_w), 
                                 .DOB06_w(DOB06_memory_control_U_w),
                                 .DIA_T_w(DIA_T_memory_control_U_w), 
                                 .DIB_T_w(DIB_T_memory_control_U_w),
                                 .choose_reg_A_w(choose_reg_A_memory_control_U_w), 
                                 .choose_reg_B_w(choose_reg_B_memory_control_U_w), 
                                 .MUXA(MUXA_memory_control_U),
                                 .MUXB(MUXB_memory_control_U)
                                 );
   pazen_memory_controller pmcU02(.clk(clk), 
                                 .reset(reset), 
                                 .A_in(U_buffer_DOA_r[7:0] ), 
                                 .B_in(U_buffer_DOA_r[15:8]), 
                                 .DOA(data_read_A_U_pazen_bg), 
                                 .DOB(data_read_B_U_pazen_bg), 
                                 .A_w(A_memory_control_U_bg_w), 
                                 .B_w(B_memory_control_U_bg_w),
                                 .CSA(csa_U_pazen),
                                 .CSB(csb_U_pazen),
                                 .DOA00_w(DOA07_memory_control_U_w), 
                                 .DOB00_w(DOB07_memory_control_U_w), 
                                 .DOA01_w(DOA08_memory_control_U_w), 
                                 .DOB01_w(DOB08_memory_control_U_w), 
                                 .DOA02_w(DOA09_memory_control_U_w), 
                                 .DOB02_w(DOB09_memory_control_U_w), 
                                 .DOA03_w(DOA10_memory_control_U_w), 
                                 .DOB03_w(DOB10_memory_control_U_w), 
                                 .DOA04_w(DOA11_memory_control_U_w), 
                                 .DOB04_w(DOB11_memory_control_U_w), 
                                 .DOA05_w(DOA12_memory_control_U_w), 
                                 .DOB05_w(DOB12_memory_control_U_w), 
                                 .DOA06_w(DOA13_memory_control_U_w), 
                                 .DOB06_w(DOB13_memory_control_U_w)
                                 );                              
   pazen_memory_controller pmcV01(.clk(clk), 
                                 .reset(reset), 
                                 .A_in(v1_pazen), 
                                 .B_in(v2_pazen), 
                                 .DIA(data_write_A_V_pazen), 
                                 .DIB(data_write_B_V_pazen), 
                                 .DOA(data_read_A_V_pazen), 
                                 .DOB(data_read_B_V_pazen),
                                 .A_w(A_memory_control_V_w), 
                                 .B_w(B_memory_control_V_w),
                                 .CSA(csa_V_pazen),
                                 .CSB(csb_V_pazen),
                                 .DOA00_w(DOA00_memory_control_V_w), 
                                 .DOB00_w(DOB00_memory_control_V_w), 
                                 .DOA01_w(DOA01_memory_control_V_w), 
                                 .DOB01_w(DOB01_memory_control_V_w), 
                                 .DOA02_w(DOA02_memory_control_V_w), 
                                 .DOB02_w(DOB02_memory_control_V_w), 
                                 .DOA03_w(DOA03_memory_control_V_w), 
                                 .DOB03_w(DOB03_memory_control_V_w), 
                                 .DOA04_w(DOA04_memory_control_V_w), 
                                 .DOB04_w(DOB04_memory_control_V_w), 
                                 .DOA05_w(DOA05_memory_control_V_w), 
                                 .DOB05_w(DOB05_memory_control_V_w), 
                                 .DOA06_w(DOA06_memory_control_V_w), 
                                 .DOB06_w(DOB06_memory_control_V_w),
                                 .DIA_T_w(DIA_T_memory_control_V_w), 
                                 .DIB_T_w(DIB_T_memory_control_V_w),
                                 .choose_reg_A_w(choose_reg_A_memory_control_V_w), 
                                 .choose_reg_B_w(choose_reg_B_memory_control_V_w), 
                                 .MUXA(MUXA_memory_control_V),
                                 .MUXB(MUXB_memory_control_V)
                                 );                         
   pazen_memory_controller pmcV02(.clk(clk), 
                                 .reset(reset), 
                                 .A_in(V_buffer_DOA_r[7:0] ), 
                                 .B_in(V_buffer_DOA_r[15:8]), 
                                 .DOA(data_read_A_V_pazen_bg), 
                                 .DOB(data_read_B_V_pazen_bg),
                                 .A_w(A_memory_control_V_bg_w), 
                                 .B_w(B_memory_control_V_bg_w),
                                 .CSA(csa_V_pazen),
                                 .CSB(csb_V_pazen),
                                 .DOA00_w(DOA07_memory_control_V_w), 
                                 .DOB00_w(DOB07_memory_control_V_w), 
                                 .DOA01_w(DOA08_memory_control_V_w), 
                                 .DOB01_w(DOB08_memory_control_V_w), 
                                 .DOA02_w(DOA09_memory_control_V_w), 
                                 .DOB02_w(DOB09_memory_control_V_w), 
                                 .DOA03_w(DOA10_memory_control_V_w), 
                                 .DOB03_w(DOB10_memory_control_V_w), 
                                 .DOA04_w(DOA11_memory_control_V_w), 
                                 .DOB04_w(DOB11_memory_control_V_w), 
                                 .DOA05_w(DOA12_memory_control_V_w), 
                                 .DOB05_w(DOB12_memory_control_V_w), 
                                 .DOA06_w(DOA13_memory_control_V_w), 
                                 .DOB06_w(DOB13_memory_control_V_w)
                                 );
/******************************************************************************************************************************/   
//                                      End of Histogram Accumulation
/******************************************************************************************************************************/
/******************************************************************************************************************************/   
//                                       Distance Computation
//distance compute: Compute the distance between the candidate histogram and target histogram
//distance_memory_controller: bin maps to addresses of register file   
/******************************************************************************************************************************/
   
/*************************************************************/   
//                  DISTANCE MEMORY CONTROL
/*************************************************************/    
   
   assign DOA00_DMC_C_Y_w = DOA00_w;
   assign DOB00_DMC_C_Y_w = DOB00_w;
   assign DOA01_DMC_C_Y_w = DOA01_w;
   assign DOB01_DMC_C_Y_w = DOB01_w;
   assign DOA02_DMC_C_Y_w = DOA02_w;
   assign DOB02_DMC_C_Y_w = DOB02_w;
   assign DOA03_DMC_C_Y_w = DOA03_w;
   assign DOB03_DMC_C_Y_w = DOB03_w;
   assign DOA04_DMC_C_Y_w = DOA04_w;
   assign DOB04_DMC_C_Y_w = DOB04_w;
   assign DOA05_DMC_C_Y_w = DOA05_w;
   assign DOB05_DMC_C_Y_w = DOB05_w;
   assign DOA06_DMC_C_Y_w = DOA06_w;
   assign DOB06_DMC_C_Y_w = DOB06_w;
   assign DOA00_DMC_C_U_w = DOA07_w;
   assign DOB00_DMC_C_U_w = DOB07_w;
   assign DOA01_DMC_C_U_w = DOA08_w;
   assign DOB01_DMC_C_U_w = DOB08_w;
   assign DOA02_DMC_C_U_w = DOA09_w;
   assign DOB02_DMC_C_U_w = DOB09_w;
   assign DOA03_DMC_C_U_w = DOA10_w;
   assign DOB03_DMC_C_U_w = DOB10_w;
   assign DOA04_DMC_C_U_w = DOA11_w;
   assign DOB04_DMC_C_U_w = DOB11_w;
   assign DOA05_DMC_C_U_w = DOA12_w;
   assign DOB05_DMC_C_U_w = DOB12_w;
   assign DOA06_DMC_C_U_w = DOA13_w;
   assign DOB06_DMC_C_U_w = DOB13_w;
   assign DOA00_DMC_C_V_w = DOA14_w;
   assign DOB00_DMC_C_V_w = DOB14_w;
   assign DOA01_DMC_C_V_w = DOA15_w;
   assign DOB01_DMC_C_V_w = DOB15_w;
   assign DOA02_DMC_C_V_w = DOA16_w;
   assign DOB02_DMC_C_V_w = DOB16_w;
   assign DOA03_DMC_C_V_w = DOA17_w;
   assign DOB03_DMC_C_V_w = DOB17_w;
   assign DOA04_DMC_C_V_w = DOA18_w;
   assign DOB04_DMC_C_V_w = DOB18_w;
   assign DOA05_DMC_C_V_w = DOA19_w;
   assign DOB05_DMC_C_V_w = DOB19_w;
   assign DOA06_DMC_C_V_w = DOA20_w;
   assign DOB06_DMC_C_V_w = DOB20_w;
   
   assign DOA00_DMC_T_Y_w = DOA21_w;
   assign DOB00_DMC_T_Y_w = DOB21_w;
   assign DOA01_DMC_T_Y_w = DOA22_w;
   assign DOB01_DMC_T_Y_w = DOB22_w;
   assign DOA02_DMC_T_Y_w = DOA23_w;
   assign DOB02_DMC_T_Y_w = DOB23_w;
   assign DOA03_DMC_T_Y_w = DOA24_w;
   assign DOB03_DMC_T_Y_w = DOB24_w;
   assign DOA04_DMC_T_Y_w = DOA25_w;
   assign DOB04_DMC_T_Y_w = DOB25_w;
   assign DOA05_DMC_T_Y_w = DOA26_w;
   assign DOB05_DMC_T_Y_w = DOB26_w;
   assign DOA06_DMC_T_Y_w = DOA27_w;
   assign DOB06_DMC_T_Y_w = DOB27_w;
   assign DOA00_DMC_T_U_w = DOA28_w;
   assign DOB00_DMC_T_U_w = DOB28_w;
   assign DOA01_DMC_T_U_w = DOA29_w;
   assign DOB01_DMC_T_U_w = DOB29_w;
   assign DOA02_DMC_T_U_w = DOA30_w;
   assign DOB02_DMC_T_U_w = DOB30_w;
   assign DOA03_DMC_T_U_w = DOA31_w;
   assign DOB03_DMC_T_U_w = DOB31_w;
   assign DOA04_DMC_T_U_w = DOA32_w;
   assign DOB04_DMC_T_U_w = DOB32_w;
   assign DOA05_DMC_T_U_w = DOA33_w;
   assign DOB05_DMC_T_U_w = DOB33_w;
   assign DOA06_DMC_T_U_w = DOA34_w;
   assign DOB06_DMC_T_U_w = DOB34_w;
   assign DOA00_DMC_T_V_w = DOA35_w;
   assign DOB00_DMC_T_V_w = DOB35_w;
   assign DOA01_DMC_T_V_w = DOA36_w;
   assign DOB01_DMC_T_V_w = DOB36_w;
   assign DOA02_DMC_T_V_w = DOA37_w;
   assign DOB02_DMC_T_V_w = DOB37_w;
   assign DOA03_DMC_T_V_w = DOA38_w;
   assign DOB03_DMC_T_V_w = DOB38_w;
   assign DOA04_DMC_T_V_w = DOA39_w;
   assign DOB04_DMC_T_V_w = DOB39_w;
   assign DOA05_DMC_T_V_w = DOA40_w;
   assign DOB05_DMC_T_V_w = DOB40_w;
   assign DOA06_DMC_T_V_w = DOA41_w;
   assign DOB06_DMC_T_V_w = DOB41_w;
                                 
   distance_compute d0(.clk(clk), 
                       .reset(reset_buffer), 
                       .data_read_C_A(data_read_C_A_DC_Y), 
                       .data_read_C_B(data_read_C_B_DC_Y), 
                       //.data_write_C_A(data_write_C_A_DC_Y), 
                       .data_write_C_B(data_write_C_B_DC_Y), 
                       .A_C_out(A_C_out_DC_Y), 
                       .B_C_out(B_C_out_DC_Y), 
                       //.WEAN_C(WEAN_C_DC_Y), 
                       //.WEBN_C(WEBN_C_DC_Y), 
                       .CSA_C(CSA_C_DC_Y), 
                       .CSB_C(CSB_C_DC_Y), 
                       //.OEA_C(OEA_C_DC_Y), 
                       //.OEB_C(OEB_C_DC_Y),
                       .data_read_T_A(data_read_T_A_DC_Y), 
                       .data_read_T_B(data_read_T_B_DC_Y), 
                       //.WEAN_T(WEAN_T_DC_Y), 
                       //.WEBN_T(WEBN_T_DC_Y), 
                       .CSA_T(CSA_T_DC_Y), 
                       .CSB_T(CSB_T_DC_Y), 
                       //.OEA_T(OEA_T_DC_Y), 
                       //.OEB_T(OEB_T_DC_Y),
                       .distance(distance_DC_Y), 
                       .distance_compute_enable(distance_compute_enable), 
                       .iteration_times(iteration_times_r), 
                       .total_histogram_C(total_histogram_C_y_r), 
                       .total_histogram_T(total_histogram_T_y_r), 
                       .done(done_DC_Y), 
                       .MUX(MUX_DC_Y));        
   distance_memory_controller dmc0(.clk(clk), 
                                   .reset(reset), 
                                   .A_in(A_C_out_DC_Y), 
                                   .B_in(B_C_out_DC_Y),  
                                   .DOA(data_read_C_A_DC_Y), 
                                   .DOB(data_read_C_B_DC_Y), 
                                   .A_w(A_DMC_Y_C_w),
                                   .B_w(B_DMC_Y_C_w), 
                                   .CSA(CSA_C_DC_Y), 
                                   .CSB(CSB_C_DC_Y),
                                   .DOA00_w(DOA00_DMC_C_Y_w), 
                                   .DOB00_w(DOB00_DMC_C_Y_w), 
                                   .DOA01_w(DOA01_DMC_C_Y_w), 
                                   .DOB01_w(DOB01_DMC_C_Y_w), 
                                   .DOA02_w(DOA02_DMC_C_Y_w), 
                                   .DOB02_w(DOB02_DMC_C_Y_w), 
                                   .DOA03_w(DOA03_DMC_C_Y_w), 
                                   .DOB03_w(DOB03_DMC_C_Y_w), 
                                   .DOA04_w(DOA04_DMC_C_Y_w), 
                                   .DOB04_w(DOB04_DMC_C_Y_w), 
                                   .DOA05_w(DOA05_DMC_C_Y_w), 
                                   .DOB05_w(DOB05_DMC_C_Y_w), 
                                   .DOA06_w(DOA06_DMC_C_Y_w), 
                                   .DOB06_w(DOB06_DMC_C_Y_w),
                                   .choose_reg_A_w(choose_reg_A_DMC_C_Y_w), 
                                   .choose_reg_B_w(choose_reg_B_DMC_C_Y_w)
                                   );
   distance_memory_controller dmc1(.clk(clk), 
                                   .reset(reset), 
                                   .A_in(A_C_out_DC_Y), 
                                   .B_in(B_C_out_DC_Y), 
                                   .DOA(data_read_T_A_DC_Y), 
                                   .DOB(data_read_T_B_DC_Y), 
                                   .A_w(A_DMC_Y_T_w),
                                   .B_w(B_DMC_Y_T_w), 
                                   .CSA(CSA_T_DC_Y), 
                                   .CSB(CSB_T_DC_Y),
                                   .DOA00_w(DOA00_DMC_T_Y_w), 
                                   .DOB00_w(DOB00_DMC_T_Y_w), 
                                   .DOA01_w(DOA01_DMC_T_Y_w), 
                                   .DOB01_w(DOB01_DMC_T_Y_w), 
                                   .DOA02_w(DOA02_DMC_T_Y_w), 
                                   .DOB02_w(DOB02_DMC_T_Y_w), 
                                   .DOA03_w(DOA03_DMC_T_Y_w), 
                                   .DOB03_w(DOB03_DMC_T_Y_w), 
                                   .DOA04_w(DOA04_DMC_T_Y_w), 
                                   .DOB04_w(DOB04_DMC_T_Y_w), 
                                   .DOA05_w(DOA05_DMC_T_Y_w), 
                                   .DOB05_w(DOB05_DMC_T_Y_w), 
                                   .DOA06_w(DOA06_DMC_T_Y_w), 
                                   .DOB06_w(DOB06_DMC_T_Y_w),
                                   .choose_reg_A_w(choose_reg_A_DMC_T_Y_w), 
                                   .choose_reg_B_w(choose_reg_B_DMC_T_Y_w)
                                   );

   distance_compute d1(.clk(clk), 
                       .reset(reset_buffer), 
                       .data_read_C_A(data_read_C_A_DC_U), 
                       .data_read_C_B(data_read_C_B_DC_U), 
                       //.data_write_C_A(data_write_C_A_DC_U), 
                       .data_write_C_B(data_write_C_B_DC_U), 
                       .A_C_out(A_C_out_DC_U), 
                       .B_C_out(B_C_out_DC_U), 
                       //.WEAN_C(WEAN_C_DC_U), 
                       //.WEBN_C(WEBN_C_DC_U), 
                       .CSA_C(CSA_C_DC_U), 
                       .CSB_C(CSB_C_DC_U), 
                       //.OEA_C(OEA_C_DC_U), 
                       //.OEB_C(OEB_C_DC_U),
                       .data_read_T_A(data_read_T_A_DC_U), 
                       .data_read_T_B(data_read_T_B_DC_U), 
                       //.WEAN_T(WEAN_T_DC_U), 
                       //.WEBN_T(WEBN_T_DC_U), 
                       .CSA_T(CSA_T_DC_U), 
                       .CSB_T(CSB_T_DC_U), 
                       //.OEA_T(OEA_T_DC_U), 
                       //.OEB_T(OEB_T_DC_U),
                       .distance(distance_DC_U), 
                       .distance_compute_enable(distance_compute_enable), 
                       .iteration_times(iteration_times_r), 
                       .total_histogram_C(total_histogram_C_u_r), 
                       .total_histogram_T(total_histogram_T_u_r), 
                       .done(done_DC_U), 
                       .MUX(MUX_DC_U));        
   distance_memory_controller dmc2(.clk(clk), 
                                   .reset(reset), 
                                   .A_in(A_C_out_DC_U), 
                                   .B_in(B_C_out_DC_U), 
                                   .DOA(data_read_C_A_DC_U), 
                                   .DOB(data_read_C_B_DC_U), 
                                   .A_w(A_DMC_U_C_w),
                                   .B_w(B_DMC_U_C_w), 
                                   .CSA(CSA_C_DC_U), 
                                   .CSB(CSB_C_DC_U),
                                   .DOA00_w(DOA00_DMC_C_U_w), 
                                   .DOB00_w(DOB00_DMC_C_U_w), 
                                   .DOA01_w(DOA01_DMC_C_U_w), 
                                   .DOB01_w(DOB01_DMC_C_U_w), 
                                   .DOA02_w(DOA02_DMC_C_U_w), 
                                   .DOB02_w(DOB02_DMC_C_U_w), 
                                   .DOA03_w(DOA03_DMC_C_U_w), 
                                   .DOB03_w(DOB03_DMC_C_U_w), 
                                   .DOA04_w(DOA04_DMC_C_U_w), 
                                   .DOB04_w(DOB04_DMC_C_U_w), 
                                   .DOA05_w(DOA05_DMC_C_U_w), 
                                   .DOB05_w(DOB05_DMC_C_U_w), 
                                   .DOA06_w(DOA06_DMC_C_U_w), 
                                   .DOB06_w(DOB06_DMC_C_U_w),
                                   .choose_reg_A_w(choose_reg_A_DMC_C_U_w), 
                                   .choose_reg_B_w(choose_reg_B_DMC_C_U_w)
                                   );
   distance_memory_controller dmc3(.clk(clk), 
                                   .reset(reset), 
                                   .A_in(A_C_out_DC_U), 
                                   .B_in(B_C_out_DC_U), 
                                   .DOA(data_read_T_A_DC_U), 
                                   .DOB(data_read_T_B_DC_U), 
                                   .A_w(A_DMC_U_T_w),
                                   .B_w(B_DMC_U_T_w), 
                                   .CSA(CSA_T_DC_U), 
                                   .CSB(CSB_T_DC_U),
                                   .DOA00_w(DOA00_DMC_T_U_w), 
                                   .DOB00_w(DOB00_DMC_T_U_w), 
                                   .DOA01_w(DOA01_DMC_T_U_w), 
                                   .DOB01_w(DOB01_DMC_T_U_w), 
                                   .DOA02_w(DOA02_DMC_T_U_w), 
                                   .DOB02_w(DOB02_DMC_T_U_w), 
                                   .DOA03_w(DOA03_DMC_T_U_w), 
                                   .DOB03_w(DOB03_DMC_T_U_w), 
                                   .DOA04_w(DOA04_DMC_T_U_w), 
                                   .DOB04_w(DOB04_DMC_T_U_w), 
                                   .DOA05_w(DOA05_DMC_T_U_w), 
                                   .DOB05_w(DOB05_DMC_T_U_w), 
                                   .DOA06_w(DOA06_DMC_T_U_w), 
                                   .DOB06_w(DOB06_DMC_T_U_w),
                                   .choose_reg_A_w(choose_reg_A_DMC_T_U_w), 
                                   .choose_reg_B_w(choose_reg_B_DMC_T_U_w)
                                   );
   
   distance_compute d2(.clk(clk), 
                       .reset(reset_buffer), 
                       .data_read_C_A(data_read_C_A_DC_V), 
                       .data_read_C_B(data_read_C_B_DC_V), 
                       //.data_write_C_A(data_write_C_A_DC_V), 
                       .data_write_C_B(data_write_C_B_DC_V), 
                       .A_C_out(A_C_out_DC_V), 
                       .B_C_out(B_C_out_DC_V), 
                       //.WEAN_C(WEAN_C_DC_V), 
                       //.WEBN_C(WEBN_C_DC_V), 
                       .CSA_C(CSA_C_DC_V), 
                       .CSB_C(CSB_C_DC_V), 
                       //.OEA_C(OEA_C_DC_V), 
                       //.OEB_C(OEB_C_DC_V),
                       .data_read_T_A(data_read_T_A_DC_V), 
                       .data_read_T_B(data_read_T_B_DC_V), 
                       //.WEAN_T(WEAN_T_DC_V), 
                       //.WEBN_T(WEBN_T_DC_V), 
                       .CSA_T(CSA_T_DC_V), 
                       .CSB_T(CSB_T_DC_V), 
                       //.OEA_T(OEA_T_DC_V), 
                       //.OEB_T(OEB_T_DC_V),
                       .distance(distance_DC_V), 
                       .distance_compute_enable(distance_compute_enable), 
                       .iteration_times(iteration_times_r), 
                       .total_histogram_C(total_histogram_C_v_r), 
                       .total_histogram_T(total_histogram_T_v_r), 
                       .done(done_DC_V), 
                       .MUX(MUX_DC_V));        
   distance_memory_controller dmc4(.clk(clk), 
                                   .reset(reset), 
                                   .A_in(A_C_out_DC_V), 
                                   .B_in(B_C_out_DC_V),                                    
                                   .DOA(data_read_C_A_DC_V), 
                                   .DOB(data_read_C_B_DC_V), 
                                   .A_w(A_DMC_V_C_w),
                                   .B_w(B_DMC_V_C_w), 
                                   .CSA(CSA_C_DC_V), 
                                   .CSB(CSB_C_DC_V),
                                   .DOA00_w(DOA00_DMC_C_V_w), 
                                   .DOB00_w(DOB00_DMC_C_V_w), 
                                   .DOA01_w(DOA01_DMC_C_V_w), 
                                   .DOB01_w(DOB01_DMC_C_V_w), 
                                   .DOA02_w(DOA02_DMC_C_V_w), 
                                   .DOB02_w(DOB02_DMC_C_V_w), 
                                   .DOA03_w(DOA03_DMC_C_V_w), 
                                   .DOB03_w(DOB03_DMC_C_V_w), 
                                   .DOA04_w(DOA04_DMC_C_V_w), 
                                   .DOB04_w(DOB04_DMC_C_V_w), 
                                   .DOA05_w(DOA05_DMC_C_V_w), 
                                   .DOB05_w(DOB05_DMC_C_V_w), 
                                   .DOA06_w(DOA06_DMC_C_V_w), 
                                   .DOB06_w(DOB06_DMC_C_V_w),
                                   .choose_reg_A_w(choose_reg_A_DMC_C_V_w), 
                                   .choose_reg_B_w(choose_reg_B_DMC_C_V_w)
                                   );
   distance_memory_controller dmc5(.clk(clk), 
                                   .reset(reset), 
                                   .A_in(A_C_out_DC_V), 
                                   .B_in(B_C_out_DC_V), 
                                   .DOA(data_read_T_A_DC_V), 
                                   .DOB(data_read_T_B_DC_V), 
                                   .A_w(A_DMC_V_T_w),
                                   .B_w(B_DMC_V_T_w), 
                                   .CSA(CSA_T_DC_V), 
                                   .CSB(CSB_T_DC_V),
                                   .DOA00_w(DOA00_DMC_T_V_w), 
                                   .DOB00_w(DOB00_DMC_T_V_w), 
                                   .DOA01_w(DOA01_DMC_T_V_w), 
                                   .DOB01_w(DOB01_DMC_T_V_w), 
                                   .DOA02_w(DOA02_DMC_T_V_w), 
                                   .DOB02_w(DOB02_DMC_T_V_w), 
                                   .DOA03_w(DOA03_DMC_T_V_w), 
                                   .DOB03_w(DOB03_DMC_T_V_w), 
                                   .DOA04_w(DOA04_DMC_T_V_w), 
                                   .DOB04_w(DOB04_DMC_T_V_w), 
                                   .DOA05_w(DOA05_DMC_T_V_w), 
                                   .DOB05_w(DOB05_DMC_T_V_w), 
                                   .DOA06_w(DOA06_DMC_T_V_w), 
                                   .DOB06_w(DOB06_DMC_T_V_w),
                                   .choose_reg_A_w(choose_reg_A_DMC_T_V_w), 
                                   .choose_reg_B_w(choose_reg_B_DMC_T_V_w)
                                   );    

                                
/******************************************************************************************************************************/   
//                                       CONNECT COMPONENT ANALYSIS
//ALU
/******************************************************************************************************************************/
   
/*************************************************************/   
//                            ALU
/*************************************************************/                                       
   
   
   
   

   
   assign CCL_write_time = CCA_compute_count_r == 2'd2;
   assign CCA_index_I_0_w = count_CCA_r[5:0];
   assign CCA_index_I_1_w = count_CCA_r[5:0] + 6'd1;
   
   assign Iup_0_in = CCA_I_DOA_0_r[CCA_index_I_0_w];
   assign Ileft_0_in = CCA_I_LEFT_2d_r;
   assign Iup_1_in = CCA_I_DOA_0_r[CCA_index_I_1_w];
   assign Imid_0_in = CCA_I_DOA_1_r[CCA_index_I_0_w];
   assign Imid_1_in = CCA_I_DOA_1_r[CCA_index_I_1_w];
   assign Dup_0_in = (count_CCA_r[2] == 1'd0) ? ( (count_CCA_r[1] == 1'b0)?CCA_D_DOA_up_w[6:0]: CCA_D_DOA_up_w[22:16] ) : ( (count_CCA_r[1] == 1'b0)?CCA_D_DOA_up_w[38:32]: CCA_D_DOA_up_w[54:48] );
   assign Dleft_0_in = CCA_D_LEFT_r;
   assign Dup_1_in = (count_CCA_r[2] == 1'd0) ? ( (count_CCA_r[1] == 1'b0)?CCA_D_DOA_up_w[14:8]: CCA_D_DOA_up_w[30:24] ) : ( (count_CCA_r[1] == 1'b0)?CCA_D_DOA_up_w[46:40]: CCA_D_DOA_up_w[62:56] );
   assign Dmid_0_in = (count_CCA_r[2] == 1'd0) ? ( (count_CCA_r[1] == 1'b0)?CCA_D_DOA_w[6:0]: CCA_D_DOA_w[22:16] ) : ( (count_CCA_r[1] == 1'b0)?CCA_D_DOA_w[38:32]: CCA_D_DOA_w[54:48] );
   assign Dmid_1_in = (count_CCA_r[2] == 1'd0) ? ( (count_CCA_r[1] == 1'b0)?CCA_D_DOA_w[14:8]: CCA_D_DOA_w[30:24] ) : ( (count_CCA_r[1] == 1'b0)?CCA_D_DOA_w[46:40]: CCA_D_DOA_w[62:56] );
   
   assign CCA_compute_count_w = (CCA_state_r == `CCA_OPER && CCA_compute_count_r < 2'b10) ? CCA_compute_count_r + 2'd1 : 2'd0;
   assign CCA_D_LEFT_w = (count_CCA_r >= 10'd638 && CCA_compute_count_r == 2'd2) ? 7'd0 : ((CCA_compute_count_r == 2'd2)?Dout_1_out: CCA_D_LEFT_r);
   assign CCA_I_LEFT_w = (count_CCA_r >= 10'd638 && CCA_compute_count_r == 2'd2) ? 1'd0 : ((CCA_compute_count_r == 2'd2)?Imid_1_in : CCA_I_LEFT_r);
   assign CCA_D_A_w = {1'b0, count_CCA_r[5:3]};                                                                                                
   assign CCA_I_A_w = {count_CCA_r[9:6]};
   assign CCA_D_DOA_00_w = DOA00_w;
   assign CCA_D_DOA_01_w = DOA01_w;
   assign CCA_D_DOA_02_w = DOA02_w;
   assign CCA_D_DOA_03_w = DOA03_w;
   assign CCA_D_DOA_04_w = DOA04_w;
   assign CCA_D_DOA_05_w = DOA05_w;
   assign CCA_D_DOA_06_w = DOA06_w;
   assign CCA_D_DOA_07_w = DOA07_w;
   assign CCA_D_DOA_08_w = DOA08_w;
   assign CCA_D_DOA_09_w = DOA09_w;
   assign CCA_D_DOA_10_w = DOA10_w;
   assign CCA_D_DOA_11_w = DOA11_w;
   assign CCA_D_DOA_12_w = DOA12_w;
   assign CCA_D_DOA_13_w = DOA13_w;
   assign CCA_D_DOA_14_w = DOA14_w;
   assign CCA_D_DOA_15_w = DOA15_w;
   assign CCA_D_DOA_16_w = DOA16_w;
   assign CCA_D_DOA_17_w = DOA17_w;
   assign CCA_D_DOA_18_w = DOA18_w;
   assign CCA_D_DOA_19_w = DOA19_w;
   
   assign CCA_I_DOA_0_w = DOA20_w;
   assign CCA_I_DOA_1_w = DOA21_w;
   assign CCA_I_DOA_up_w = CCA_I_DOA_0_r;
   assign CCA_I_DOA_w = CCA_I_DOA_1_r;
   
   assign CCA_D_DIA_00_w = CCA_D_DOA_10_w;
   assign CCA_D_DIA_01_w = CCA_D_DOA_11_w;
   assign CCA_D_DIA_02_w = CCA_D_DOA_12_w;
   assign CCA_D_DIA_03_w = CCA_D_DOA_13_w;
   assign CCA_D_DIA_04_w = CCA_D_DOA_14_w;
   assign CCA_D_DIA_05_w = CCA_D_DOA_15_w;
   assign CCA_D_DIA_06_w = CCA_D_DOA_16_w;
   assign CCA_D_DIA_07_w = CCA_D_DOA_17_w;
   assign CCA_D_DIA_08_w = CCA_D_DOA_18_w;
   assign CCA_D_DIA_09_w = CCA_D_DOA_19_w;
   assign CCA_D_DIA_10_w = (CCA_state_r != `CCA_OPER) ? CCA_D_in_r : CCA_D_DIA_w;
   assign CCA_D_DIA_11_w = (CCA_state_r != `CCA_OPER) ? CCA_D_in_r : CCA_D_DIA_w;
   assign CCA_D_DIA_12_w = (CCA_state_r != `CCA_OPER) ? CCA_D_in_r : CCA_D_DIA_w;
   assign CCA_D_DIA_13_w = (CCA_state_r != `CCA_OPER) ? CCA_D_in_r : CCA_D_DIA_w;
   assign CCA_D_DIA_14_w = (CCA_state_r != `CCA_OPER) ? CCA_D_in_r : CCA_D_DIA_w;
   assign CCA_D_DIA_15_w = (CCA_state_r != `CCA_OPER) ? CCA_D_in_r : CCA_D_DIA_w;
   assign CCA_D_DIA_16_w = (CCA_state_r != `CCA_OPER) ? CCA_D_in_r : CCA_D_DIA_w;
   assign CCA_D_DIA_17_w = (CCA_state_r != `CCA_OPER) ? CCA_D_in_r : CCA_D_DIA_w;
   assign CCA_D_DIA_18_w = (CCA_state_r != `CCA_OPER) ? CCA_D_in_r : CCA_D_DIA_w;
   assign CCA_D_DIA_19_w = (CCA_state_r != `CCA_OPER) ? CCA_D_in_r : CCA_D_DIA_w;
   
   assign CCA_I_DIA_0_w = CCA_I_DOA_1_w;
   assign CCA_I_DIA_1_w = CCA_I_in_r;
   
   assign DIA_D_MUX_w = (CCA_state_r == `CCA_WRITE_D) ? 4'b1111 : ((count_CCA_r[2] == 1'd0) ? ( (count_CCA_r[1] == 1'b0)?4'b0001: 4'b0010 ) : ( (count_CCA_r[1] == 1'b0)?4'b0100: 4'b1000 ));
   
   assign CCA_D_DIA_w = (count_CCA_r[2] == 1'd0) ? ( (count_CCA_r[1] == 1'b0)?{48'd0, 1'b0,Dout_1_out, 1'b0,Dout_0_out}: {32'd0, 1'b0,Dout_1_out, 1'b0,Dout_0_out, 16'd0} ) : ( (count_CCA_r[1] == 1'b0)?{16'd0, 1'b0,Dout_1_out, 1'b0,Dout_0_out,32'd0} : {1'b0,Dout_1_out, 1'b0,Dout_0_out, 48'd0}  );
   assign ALU_enable = (Mode_i == `CONNECT_COMPONENT_ANALYSIS) ? 1'b1 : 1'b0;
   assign CCA_enable = (Mode_i == `CONNECT_COMPONENT_ANALYSIS && CCA_state_r == `CCA_OPER) ? 1'b1 : 1'b0;
   
   
   always@(*)
   begin
      if(count_CCA_r[9:6] <= 4'd4)
      begin
         if(count_CCA_r[9:6] <= 4'd2)
         begin
            if(count_CCA_r[9:6] == 4'd0)
            begin
               CCA_choose_reg_w = 10'b0000000001; CCA_D_DOA_up_w = CCA_D_DOA_00_r; 
               CCA_D_DOA_w = CCA_D_DOA_10_r; 
            end
            else if(count_CCA_r[9:6] == 4'd1)
            begin
               CCA_choose_reg_w = 10'b0000000010; CCA_D_DOA_up_w = CCA_D_DOA_01_r; CCA_D_DOA_w = CCA_D_DOA_11_r; 
            end
            else
            begin
               CCA_choose_reg_w = 10'b0000000100; CCA_D_DOA_up_w = CCA_D_DOA_02_r; CCA_D_DOA_w = CCA_D_DOA_12_r; 
            end
         end
         else 
         begin
            if(count_CCA_r[9:6] == 4'd3)
            begin
               CCA_choose_reg_w = 10'b0000001000; CCA_D_DOA_up_w = CCA_D_DOA_03_r; CCA_D_DOA_w = CCA_D_DOA_13_r; 
            end
            else
            begin
               CCA_choose_reg_w = 10'b0000010000; CCA_D_DOA_up_w = CCA_D_DOA_04_r; CCA_D_DOA_w = CCA_D_DOA_14_r; 
            end
         end
      end
      else
      begin
         if(count_CCA_r[9:6] <= 4'd7)
         begin
            if(count_CCA_r[9:6] == 4'd5)
            begin
               CCA_choose_reg_w = 10'b0000100000; CCA_D_DOA_up_w = CCA_D_DOA_05_r; CCA_D_DOA_w = CCA_D_DOA_15_r; 
            end                                                               
            else if(count_CCA_r[9:6] == 4'd6)                                 
            begin                                                             
               CCA_choose_reg_w = 10'b0001000000; CCA_D_DOA_up_w = CCA_D_DOA_06_r; CCA_D_DOA_w = CCA_D_DOA_16_r; 
            end                                                               
            else                                                              
            begin                                                             
               CCA_choose_reg_w = 10'b0010000000; CCA_D_DOA_up_w = CCA_D_DOA_07_r; CCA_D_DOA_w = CCA_D_DOA_17_r; 
            end                                                               
         end                                                                  
         else                                                                 
         begin                                                                
            if(count_CCA_r[9:6] == 4'd8)                                      
            begin                                                             
               CCA_choose_reg_w = 10'b0100000000; CCA_D_DOA_up_w = CCA_D_DOA_08_r; CCA_D_DOA_w = CCA_D_DOA_18_r; 
            end                                                               
            else                                                              
            begin                                                             
               CCA_choose_reg_w = 10'b1000000000; CCA_D_DOA_up_w = CCA_D_DOA_09_r; CCA_D_DOA_w = CCA_D_DOA_19_r; 
            end
         end
      end
      
   
   end
   
   
   
   
   
                            
   
                            
                            
   
   
                            
                            
                            
   always@(*)               
   begin                    
      case(CCA_state_r)     
         `CCA_IDLE:         
         begin              
            if(Mode_i == `CONNECT_COMPONENT_ANALYSIS)
            begin           
               CCA_state_w = `CCA_WRITE_I;
            end             
            else            
            begin           
               CCA_state_w = `CCA_IDLE;
            end             
         end                
         `CCA_WRITE_I:      
         begin              
            if(count_CCA_r >= 10'd576) 
            begin           
               CCA_state_w = `CCA_WRITE_D;
            end             
            else            
            begin           
               CCA_state_w = `CCA_WRITE_I;
            end             
         end                
         `CCA_WRITE_D:      
         begin              
            if(count_CCA_r >= 10'd632) 
            begin           
               CCA_state_w = `CCA_OPER;
            end             
            else            
            begin           
               CCA_state_w = `CCA_WRITE_D;
            end             
         end                
         `CCA_OPER:         
         begin   
            if(count_CCA_r >= 10'd638)           
            begin
               if(CCA_stop)    
               begin           
                  CCA_state_w = `CCA_IDLE;
               end             
               else            
               begin           
                  CCA_state_w = `CCA_WRITE_I;
               end  
            end
            else
            begin
               CCA_state_w = `CCA_OPER;
            end           
         end                
         default:           
         begin              
            CCA_state_w = `CCA_IDLE;
         end                
                            
                            
      endcase               
                            
   end                      
                            
                            
   always@(*)               
   begin                    
      case(CCA_state_r)     
         `CCA_IDLE:         
         begin              
            CCA_I_WEAN_w = 1'b1;
            CCA_D_WEAN_w = 1'b1;
            CCA_D_up_WEAN_w = 1'b1;
            count_CCA_w = 10'd0;
         end                
         `CCA_WRITE_I:      
         begin              
            CCA_I_WEAN_w = 1'b0;
            CCA_D_WEAN_w = 1'b1;
            CCA_D_up_WEAN_w = 1'b1;
            if(count_CCA_r >= 10'd576) count_CCA_w = 10'd0;
            else                       count_CCA_w = count_CCA_r + 10'd64;
            
         end                
         `CCA_WRITE_D:      
         begin              
            CCA_I_WEAN_w = 1'b1;
            CCA_D_WEAN_w = 1'b0;
            CCA_D_up_WEAN_w = 1'b0;
            if(count_CCA_r >= 10'd632) count_CCA_w = 10'd0;
            else                       count_CCA_w = count_CCA_r + 10'd8;
         end                
         `CCA_OPER:         
         begin              
            CCA_I_WEAN_w = 1'b1;
            CCA_D_up_WEAN_w = 1'b1;
            
            if(count_CCA_r >= 10'd638)       count_CCA_w = 10'd0;
            else if(CCA_compute_count_r == 2'b10)   count_CCA_w = count_CCA_r + 10'd2;
            else                             count_CCA_w = count_CCA_r;
            if(CCA_compute_count_r == 2'b10)        CCA_D_WEAN_w = 1'b0;
            else                             CCA_D_WEAN_w = 1'b1;
         end                
         default:           
         begin              
            CCA_I_WEAN_w = 1'b1;
            CCA_D_WEAN_w = 1'b1;
            CCA_D_up_WEAN_w = 1'b1;
            count_CCA_w = 10'd0;
         end                
                            
                            
      endcase               
                            
   end                      
   
   
                            
   always@(posedge clk or posedge reset)
   begin                    
      if(reset)             
      begin                 
         CCA_state_r <= 2'd0;
         CCA_I_LEFT_r <= 1'b0;
         count_CCA_r <= 10'd0;
         CCA_compute_count_r <= 2'd0;
         CCA_D_DOA_00_r <= 8'd0;
         CCA_D_DOA_01_r <= 8'd0;
         CCA_D_DOA_02_r <= 8'd0;
         CCA_D_DOA_03_r <= 8'd0;
         CCA_D_DOA_04_r <= 8'd0;
         CCA_D_DOA_05_r <= 8'd0;
         CCA_D_DOA_06_r <= 8'd0;
         CCA_D_DOA_07_r <= 8'd0;
         CCA_D_DOA_08_r <= 8'd0;
         CCA_D_DOA_09_r <= 8'd0;
         CCA_D_DOA_10_r <= 8'd0;
         CCA_D_DOA_11_r <= 8'd0;
         CCA_D_DOA_12_r <= 8'd0;
         CCA_D_DOA_13_r <= 8'd0;
         CCA_D_DOA_14_r <= 8'd0;
         CCA_D_DOA_15_r <= 8'd0;
         CCA_D_DOA_16_r <= 8'd0;
         CCA_D_DOA_17_r <= 8'd0;
         CCA_D_DOA_18_r <= 8'd0;
         CCA_D_DOA_19_r <= 8'd0;
         CCA_I_DOA_0_r <= 1'd0;
         CCA_I_DOA_1_r <= 1'd0;
         CCA_D_LEFT_r <= 7'd0;
         CCA_I_LEFT_2d_r <= 1'b0;
         
         
         
         
         
         
         
      end                   
      else if(controller_enable)               
      begin                 
         CCA_state_r <= CCA_state_w;
         CCA_I_LEFT_r <= CCA_I_LEFT_w;
         count_CCA_r <= count_CCA_w;
         CCA_compute_count_r <= CCA_compute_count_w;
         CCA_D_DOA_00_r <= CCA_D_DOA_00_w;
         CCA_D_DOA_01_r <= CCA_D_DOA_01_w;
         CCA_D_DOA_02_r <= CCA_D_DOA_02_w;
         CCA_D_DOA_03_r <= CCA_D_DOA_03_w;
         CCA_D_DOA_04_r <= CCA_D_DOA_04_w;
         CCA_D_DOA_05_r <= CCA_D_DOA_05_w;
         CCA_D_DOA_06_r <= CCA_D_DOA_06_w;
         CCA_D_DOA_07_r <= CCA_D_DOA_07_w;
         CCA_D_DOA_08_r <= CCA_D_DOA_08_w;
         CCA_D_DOA_09_r <= CCA_D_DOA_09_w;
         CCA_D_DOA_10_r <= CCA_D_DOA_10_w;
         CCA_D_DOA_11_r <= CCA_D_DOA_11_w;
         CCA_D_DOA_12_r <= CCA_D_DOA_12_w;
         CCA_D_DOA_13_r <= CCA_D_DOA_13_w;
         CCA_D_DOA_14_r <= CCA_D_DOA_14_w;
         CCA_D_DOA_15_r <= CCA_D_DOA_15_w;
         CCA_D_DOA_16_r <= CCA_D_DOA_16_w;
         CCA_D_DOA_17_r <= CCA_D_DOA_17_w;
         CCA_D_DOA_18_r <= CCA_D_DOA_18_w;
         CCA_D_DOA_19_r <= CCA_D_DOA_19_w;    
         CCA_I_DOA_0_r <= CCA_I_DOA_0_w;
         CCA_I_DOA_1_r <= CCA_I_DOA_1_w;
         CCA_D_LEFT_r <= CCA_D_LEFT_w;
         CCA_I_LEFT_2d_r <= CCA_I_LEFT_r;
         
         
      end                   
   end                      
                   
                            
                            
                            
                        
                            
   assign Dtemp_0_w = ALU_nobuffer_0_data_out_w;
   assign temp_out_0_w = ALU_nobuffer_1_data_out_w;
   assign Dtemp_1_w = ALU_nobuffer_2_data_out_w;
   assign temp_out_1_w = ALU_nobuffer_3_data_out_w;
   
   assign CCA_1_out_w = Dout_0_out;
   assign CCA_2_out_w = Dout_1_out;
   
   always@(posedge clk or posedge reset)
   begin
      if(reset)
      begin
         CCA_1_out_r <= 7'd0;
         CCA_2_out_r <= 7'd0;
      end
      else
      begin
         CCA_1_out_r <= CCA_1_out_w;
         CCA_2_out_r <= CCA_2_out_w;
      end
   end
                            
                 
                            
                            
   CCA cca0(.clk(clk),      
            .reset(reset),  
            .Imid_0_in(Imid_0_in), 
            .Imid_1_in(Imid_1_in),
            .Dmid_0_in(Dmid_0_in), 
            .Dmid_1_in(Dmid_1_in),
            .Dtemp_0_in(Dtemp_0_w), 
            .Dout_0_out(Dout_0_out), 
            .PE_temp_0_out(PE_temp_0_w), 
            .temp_out_0_in(temp_out_0_w), 
            .Dtemp_1_in(Dtemp_1_w), 
            .Dout_1_out(Dout_1_out), 
            .PE_temp_1_out(PE_temp_1_w), 
            .temp_out_1_in(temp_out_1_w), 
            .Dout_0_out_w(Dout_0_out_w), 
            .CCA_enable(CCA_enable)
            );              

/**************************************************************************************************/
//                                      OBJECT INFO RSPE
/**************************************************************************************************/                                
   assign ObjectInfoRSPE_en = (Mode_i == `OBJECT_INFO_RSPE) ? 1'b1: 1'b0;
   assign OI_start = (Mode_i == `OBJECT_INFO_RSPE) ? 1'b1: 1'b0;

ObjectInfoRSPE oir0(.clk(clk), 
                    .reset(reset), 
                    .start(OI_start), 
                    .Data_64bit(OI_Data_64bit), 
                    .o0_label(o0_label), 
                    .o0_x_min(o0_x_min), 
                    .o0_x_max(o0_x_max), 
                    .o0_y_min(o0_y_min), 
                    .o0_y_max(o0_y_max),
                    .o1_label(o1_label), 
                    .o1_x_min(o1_x_min), 
                    .o1_x_max(o1_x_max), 
                    .o1_y_min(o1_y_min), 
                    .o1_y_max(o1_y_max),
                    .o2_label(o2_label), 
                    .o2_x_min(o2_x_min), 
                    .o2_x_max(o2_x_max), 
                    .o2_y_min(o2_y_min), 
                    .o2_y_max(o2_y_max),
                    .o3_label(o3_label), 
                    .o3_x_min(o3_x_min), 
                    .o3_x_max(o3_x_max), 
                    .o3_y_min(o3_y_min), 
                    .o3_y_max(o3_y_max),
                    .o4_label(o4_label), 
                    .o4_x_min(o4_x_min), 
                    .o4_x_max(o4_x_max), 
                    .o4_y_min(o4_y_min), 
                    .o4_y_max(o4_y_max),
                    .o5_label(o5_label), 
                    .o5_x_min(o5_x_min), 
                    .o5_x_max(o5_x_max), 
                    .o5_y_min(o5_y_min), 
                    .o5_y_max(o5_y_max),
                    .o6_label(o6_label), 
                    .o6_x_min(o6_x_min), 
                    .o6_x_max(o6_x_max), 
                    .o6_y_min(o6_y_min), 
                    .o6_y_max(o6_y_max),
                    .o7_label(o7_label), 
                    .o7_x_min(o7_x_min), 
                    .o7_x_max(o7_x_max), 
                    .o7_y_min(o7_y_min), 
                    .o7_y_max(o7_y_max),
                    .o8_label(o8_label), 
                    .o8_x_min(o8_x_min), 
                    .o8_x_max(o8_x_max), 
                    .o8_y_min(o8_y_min), 
                    .o8_y_max(o8_y_max),
                    .o9_label(o9_label), 
                    .o9_x_min(o9_x_min), 
                    .o9_x_max(o9_x_max), 
                    .o9_y_min(o9_y_min), 
                    .o9_y_max(o9_y_max),
                    .ObjectInfoRSPE_en(ObjectInfoRSPE_en)
                    );        
                
/**************************************************************************************************/
//                                            DMA
/**************************************************************************************************/                                     
   assign Data_to_DMA = Data_to_DMA_r;
   
   always@(*)
   begin
      if(choose_reg_from_DMA_r[23:0] != 24'd0)
      begin
         if(choose_reg_from_DMA_r[11:0] != 12'd0)
         begin
            if(choose_reg_from_DMA_r[5:0] != 6'd0)
            begin
               if(choose_reg_from_DMA_r[2:0] != 3'd0)
               begin
                  if(choose_reg_from_DMA_r[0] == 1'b1)       Data_to_DMA_w = DOA00_w;
                  else if(choose_reg_from_DMA_r[1] == 1'b1)  Data_to_DMA_w = DOA01_w;
                  else                                       Data_to_DMA_w = DOA02_w;
               end
               else
               begin
                  if(choose_reg_from_DMA_r[3] == 1'b1)       Data_to_DMA_w = DOA03_w;
                  else if(choose_reg_from_DMA_r[4] == 1'b1)  Data_to_DMA_w = DOA04_w;
                  else                                       Data_to_DMA_w = DOA05_w;
               end
            end
            else
            begin
               if(choose_reg_from_DMA_r[8:6] != 3'd0)
               begin
                  if(choose_reg_from_DMA_r[6] == 1'b1)       Data_to_DMA_w = DOA06_w;
                  else if(choose_reg_from_DMA_r[7] == 1'b1)  Data_to_DMA_w = DOA07_w;
                  else                                       Data_to_DMA_w = DOA08_w;
               end
               else
               begin
                  if(choose_reg_from_DMA_r[9] == 1'b1)       Data_to_DMA_w = DOA09_w;
                  else if(choose_reg_from_DMA_r[10] == 1'b1) Data_to_DMA_w = DOA10_w;
                  else                                       Data_to_DMA_w = DOA11_w;
               end
            end
         end
         else
         begin
            if(choose_reg_from_DMA_r[17:12] != 6'd0)
            begin
               if(choose_reg_from_DMA_r[14:12] != 3'd0)
               begin
                  if(choose_reg_from_DMA_r[12] == 1'b1)      Data_to_DMA_w = DOA12_w;
                  else if(choose_reg_from_DMA_r[13] == 1'b1) Data_to_DMA_w = DOA13_w;
                  else                                       Data_to_DMA_w = DOA14_w;
               end
               else
               begin
                  if(choose_reg_from_DMA_r[15] == 1'b1)      Data_to_DMA_w = DOA15_w;
                  else if(choose_reg_from_DMA_r[16] == 1'b1) Data_to_DMA_w = DOA16_w;
                  else                                       Data_to_DMA_w = DOA17_w;
               end
            end
            else
            begin
               if(choose_reg_from_DMA_r[20:18] != 3'd0)
               begin
                  if(choose_reg_from_DMA_r[18] == 1'b1)      Data_to_DMA_w = DOA18_w;
                  else if(choose_reg_from_DMA_r[19] == 1'b1) Data_to_DMA_w = DOA19_w;
                  else                                       Data_to_DMA_w = DOA20_w;
               end
               else
               begin
                  if(choose_reg_from_DMA_r[21] == 1'b1)      Data_to_DMA_w = DOA21_w;
                  else if(choose_reg_from_DMA_r[22] == 1'b1) Data_to_DMA_w = DOA22_w;
                  else                                       Data_to_DMA_w = DOA23_w;
               end
            end
         end
      end
      else
      begin
         if(choose_reg_from_DMA_r[35:24] != 12'd0)
         begin
            if(choose_reg_from_DMA_r[29:24] != 6'd0)
            begin
               if(choose_reg_from_DMA_r[26:24] != 3'd0)
               begin
                  if(choose_reg_from_DMA_r[24] == 1'b1)      Data_to_DMA_w = DOA24_w;
                  else if(choose_reg_from_DMA_r[25] == 1'b1) Data_to_DMA_w = DOA25_w;
                  else                                       Data_to_DMA_w = DOA26_w;
               end
               else
               begin
                  if(choose_reg_from_DMA_r[27] == 1'b1)      Data_to_DMA_w = DOA27_w;
                  else if(choose_reg_from_DMA_r[28] == 1'b1) Data_to_DMA_w = DOA28_w;
                  else                                       Data_to_DMA_w = DOA29_w;
               end
            end
            else
            begin
               if(choose_reg_from_DMA_r[32:30] != 3'd0)
               begin
                  if(choose_reg_from_DMA_r[30] == 1'b1)      Data_to_DMA_w = DOA30_w;
                  else if(choose_reg_from_DMA_r[31] == 1'b1) Data_to_DMA_w = DOA31_w;
                  else                                       Data_to_DMA_w = DOA32_w;
               end
               else
               begin
                  if(choose_reg_from_DMA_r[33] == 1'b1)      Data_to_DMA_w = DOA33_w;
                  else if(choose_reg_from_DMA_r[34] == 1'b1) Data_to_DMA_w = DOA34_w;
                  else                                       Data_to_DMA_w = DOA35_w;
               end
            end
         end
         else
         begin
            if(choose_reg_from_DMA_r[41:36] != 6'd0)
            begin
               if(choose_reg_from_DMA_r[38:36] != 3'd0)
               begin
                  if(choose_reg_from_DMA_r[36] == 1'b1)      Data_to_DMA_w = DOA36_w;
                  else if(choose_reg_from_DMA_r[37] == 1'b1) Data_to_DMA_w = DOA37_w;
                  else                                       Data_to_DMA_w = DOA38_w;
               end
               else
               begin
                  if(choose_reg_from_DMA_r[39] == 1'b1)      Data_to_DMA_w = DOA39_w;
                  else if(choose_reg_from_DMA_r[40] == 1'b1) Data_to_DMA_w = DOA40_w;
                  else                                       Data_to_DMA_w = DOA41_w;
               end
            end
            else
            begin
               if(choose_reg_from_DMA_r[44:42] != 3'd0)
               begin
                  if(choose_reg_from_DMA_r[42] == 1'b1)      Data_to_DMA_w = DOA42_w;
                  else if(choose_reg_from_DMA_r[43] == 1'b1) Data_to_DMA_w = DOA43_w;
                  else                                       Data_to_DMA_w = DOA44_w;
               end
               else
               begin
                  if(choose_reg_from_DMA_r[45] == 1'b1)      Data_to_DMA_w = DOA45_w;
                  else if(choose_reg_from_DMA_r[46] == 1'b1) Data_to_DMA_w = DOA46_w;
                  else                                       Data_to_DMA_w = DOA47_w;
               end
            end
         end
      
      end
   
   end
                            
                            
   always@(posedge clk or posedge reset)
   begin                    
      if(reset)             
      begin                 
         total_histogram_C_y_r <= 20'd0;
         total_histogram_T_y_r <= 20'd0;
         total_histogram_C_u_r <= 20'd0;
         total_histogram_T_u_r <= 20'd0;
         total_histogram_C_v_r <= 20'd0;
         total_histogram_T_v_r <= 20'd0;
         total_target_histogram_y_r <= 20'd0;
         total_target_histogram_u_r <= 20'd0;
         total_target_histogram_v_r <= 20'd0;
         distanceY_r <= 64'd0;
         distanceU_r <= 64'd0;
         distanceV_r <= 64'd0;
                            
         //y1_in_r <= 8'd0; 
         //y2_in_r <= 8'd0;                               
         //u1_in_r <= 8'd0; 
         //u2_in_r <= 8'd0;                                
         //v1_in_r <= 8'd0; 
         //v2_in_r <= 8'd0;    
         color_0_in_r     <= 8'd0;
         color_1_in_r     <= 8'd0;
         color_2_in_r     <= 8'd0;
         color_3_in_r     <= 8'd0;
         color_4_in_r     <= 8'd0;
         color_5_in_r     <= 8'd0;
         color_6_in_r     <= 8'd0;
         color_7_in_r     <= 8'd0;
         
         color_0_in_2d_r  <= 8'd0;
         color_1_in_2d_r  <= 8'd0;
         color_2_in_2d_r  <= 8'd0;
         color_3_in_2d_r  <= 8'd0;
         color_4_in_2d_r  <= 8'd0;
         color_5_in_2d_r  <= 8'd0;
         color_6_in_2d_r  <= 8'd0;
         color_7_in_2d_r  <= 8'd0;
                          
         color_0_in_3d_r  <= 8'd0;
         color_1_in_3d_r  <= 8'd0;
         color_2_in_3d_r  <= 8'd0;
         color_3_in_3d_r  <= 8'd0;
         color_4_in_3d_r  <= 8'd0;
         color_5_in_3d_r  <= 8'd0;
         color_6_in_3d_r  <= 8'd0;
         color_7_in_3d_r  <= 8'd0;
                          
         color_0_in_4d_r  <= 8'd0;
         color_1_in_4d_r  <= 8'd0;
         color_2_in_4d_r  <= 8'd0;
         color_3_in_4d_r  <= 8'd0;
         color_4_in_4d_r  <= 8'd0;
         color_5_in_4d_r  <= 8'd0;
         color_6_in_4d_r  <= 8'd0;
         color_7_in_4d_r  <= 8'd0;
                          
         color_0_in_5d_r  <= 8'd0;
         color_1_in_5d_r  <= 8'd0;
         color_2_in_5d_r  <= 8'd0;
         color_3_in_5d_r  <= 8'd0;
         color_4_in_5d_r  <= 8'd0;
         color_5_in_5d_r  <= 8'd0;
         color_6_in_5d_r  <= 8'd0;
         color_7_in_5d_r  <= 8'd0;
                          
         color_0_in_6d_r  <= 8'd0;
         color_1_in_6d_r  <= 8'd0;
         color_2_in_6d_r  <= 8'd0;
         color_3_in_6d_r  <= 8'd0;
         color_4_in_6d_r  <= 8'd0;
         color_5_in_6d_r  <= 8'd0;
         color_6_in_6d_r  <= 8'd0;
         color_7_in_6d_r  <= 8'd0;
                          
         color_0_in_7d_r  <= 8'd0;
         color_1_in_7d_r  <= 8'd0;
         color_2_in_7d_r  <= 8'd0;
         color_3_in_7d_r  <= 8'd0;
         color_4_in_7d_r  <= 8'd0;
         color_5_in_7d_r  <= 8'd0;
         color_6_in_7d_r  <= 8'd0;
         color_7_in_7d_r  <= 8'd0;
                          
         color_0_in_8d_r  <= 8'd0;
         color_1_in_8d_r  <= 8'd0;
         color_2_in_8d_r  <= 8'd0;
         color_3_in_8d_r  <= 8'd0;
         color_4_in_8d_r  <= 8'd0;
         color_5_in_8d_r  <= 8'd0;
         color_6_in_8d_r  <= 8'd0;
         color_7_in_8d_r  <= 8'd0;
                          
         color_0_in_9d_r  <= 8'd0;
         color_1_in_9d_r  <= 8'd0;
         color_2_in_9d_r  <= 8'd0;
         color_3_in_9d_r  <= 8'd0;
         color_4_in_9d_r  <= 8'd0;
         color_5_in_9d_r  <= 8'd0;
         color_6_in_9d_r  <= 8'd0;
         color_7_in_9d_r  <= 8'd0;
         
         color_0_in_10d_r <= 8'd0;
         color_1_in_10d_r <= 8'd0;
         color_2_in_10d_r <= 8'd0;
         color_3_in_10d_r <= 8'd0;
         color_4_in_10d_r <= 8'd0;
         color_5_in_10d_r <= 8'd0;
         color_6_in_10d_r <= 8'd0;
         color_7_in_10d_r <= 8'd0;
         
         
         accumulate_how_many_in_r <= 4'd0;                           
         diag_r <= 32'd0;   
         background_weight_0_in_r <= 8'd0;
         background_weight_1_in_r <= 8'd0;
         background_weight_2_in_r <= 8'd0;
         background_weight_3_in_r <= 8'd0;
         background_weight_4_in_r <= 8'd0;
         background_weight_5_in_r <= 8'd0;
         background_weight_6_in_r <= 8'd0;
         background_weight_7_in_r <= 8'd0;                                      
         
                            
         centerx_in_r <= 10'd0; 
                            
         centery_in_r <= 9'd0; 
         //Mode_i <= 4'd0;     
                            
                            
                            
         iteration_times_r <= 3'd0;    
         buffer_input_stop_r <= 1'b0;  
         buffer_input_stop_2d_r <= 1'b0;  
         buffer_input_stop_3d_r <= 1'b0;  
         buffer_input_stop_4d_r <= 1'b0;  
         buffer_input_stop_5d_r <= 1'b0;  
         buffer_input_stop_6d_r <= 1'b0;  
         buffer_input_stop_7d_r <= 1'b0;  
         buffer_input_stop_8d_r <= 1'b0;  
         
         histogram_accumulation_done_r <= 1'd0;
         write_which_in_r <= 3'd0;
         compute_bu_in_r <= 2'd0;
         Address_from_DMA_r <= 4'd0;  
         Data_from_DMA_r <= 64'd0;     
         WEAN_from_DMA_r <= 1'd0;     
         choose_reg_from_DMA_r <= 48'd0;
         MUXA_from_DMA_r <= 4'd0;
         Data_to_DMA_r <= 64'd0;
         CCA_D_in_r <= 7'd0;
         CCA_I_in_r <= 1'd0;
         
         
         position_counter_x_r <= 10'd0;
         position_counter_y_r <= 9'd0;   
         
         Y_buffer_DOA_r <= 16'd0;
         U_buffer_DOA_r <= 16'd0;                  
         V_buffer_DOA_r <= 16'd0;                  
         Cordic_buffer_DOA_r <= 16'd0;
         Weight_buffer_DOA_r <= 16'd0;
         pazen_enable_r <= 1'b0;
      end                   
      else if(controller_enable)
      begin                 
         total_histogram_C_y_r <= total_histogram_C_y_w;
         total_histogram_T_y_r <= total_histogram_T_y_w;
         total_histogram_C_u_r <= total_histogram_C_u_w;
         total_histogram_T_u_r <= total_histogram_T_u_w;
         total_histogram_C_v_r <= total_histogram_C_v_w;
         total_histogram_T_v_r <= total_histogram_T_v_w;
         total_target_histogram_y_r <= total_target_histogram_y;
         total_target_histogram_u_r <= total_target_histogram_u;
         total_target_histogram_v_r <= total_target_histogram_v;
         distanceY_r <= distanceY_w;
         distanceU_r <= distanceU_w;
         distanceV_r <= distanceV_w;
         color_0_in_r     <= color_0_in;
         color_1_in_r     <= color_1_in;
         color_2_in_r     <= color_2_in;
         color_3_in_r     <= color_3_in;
         color_4_in_r     <= color_4_in;
         color_5_in_r     <= color_5_in;
         color_6_in_r     <= color_6_in;
         color_7_in_r     <= color_7_in;
                             
         color_0_in_2d_r  <= color_0_in_r   ; 
         color_1_in_2d_r  <= color_1_in_r   ; 
         color_2_in_2d_r  <= color_2_in_r   ; 
         color_3_in_2d_r  <= color_3_in_r   ; 
         color_4_in_2d_r  <= color_4_in_r   ; 
         color_5_in_2d_r  <= color_5_in_r   ; 
         color_6_in_2d_r  <= color_6_in_r   ; 
         color_7_in_2d_r  <= color_7_in_r   ; 
                                             
         color_0_in_3d_r  <= color_0_in_2d_r; 
         color_1_in_3d_r  <= color_1_in_2d_r; 
         color_2_in_3d_r  <= color_2_in_2d_r; 
         color_3_in_3d_r  <= color_3_in_2d_r; 
         color_4_in_3d_r  <= color_4_in_2d_r; 
         color_5_in_3d_r  <= color_5_in_2d_r; 
         color_6_in_3d_r  <= color_6_in_2d_r; 
         color_7_in_3d_r  <= color_7_in_2d_r; 
                                             
         color_0_in_4d_r  <= color_0_in_3d_r; 
         color_1_in_4d_r  <= color_1_in_3d_r; 
         color_2_in_4d_r  <= color_2_in_3d_r; 
         color_3_in_4d_r  <= color_3_in_3d_r; 
         color_4_in_4d_r  <= color_4_in_3d_r; 
         color_5_in_4d_r  <= color_5_in_3d_r; 
         color_6_in_4d_r  <= color_6_in_3d_r; 
         color_7_in_4d_r  <= color_7_in_3d_r; 
                                            
         color_0_in_5d_r  <= color_0_in_4d_r; 
         color_1_in_5d_r  <= color_1_in_4d_r; 
         color_2_in_5d_r  <= color_2_in_4d_r; 
         color_3_in_5d_r  <= color_3_in_4d_r; 
         color_4_in_5d_r  <= color_4_in_4d_r; 
         color_5_in_5d_r  <= color_5_in_4d_r; 
         color_6_in_5d_r  <= color_6_in_4d_r; 
         color_7_in_5d_r  <= color_7_in_4d_r; 
                                            
         color_0_in_6d_r  <= color_0_in_5d_r; 
         color_1_in_6d_r  <= color_1_in_5d_r; 
         color_2_in_6d_r  <= color_2_in_5d_r; 
         color_3_in_6d_r  <= color_3_in_5d_r; 
         color_4_in_6d_r  <= color_4_in_5d_r; 
         color_5_in_6d_r  <= color_5_in_5d_r; 
         color_6_in_6d_r  <= color_6_in_5d_r; 
         color_7_in_6d_r  <= color_7_in_5d_r; 
                                            
         color_0_in_7d_r  <= color_0_in_6d_r; 
         color_1_in_7d_r  <= color_1_in_6d_r; 
         color_2_in_7d_r  <= color_2_in_6d_r; 
         color_3_in_7d_r  <= color_3_in_6d_r; 
         color_4_in_7d_r  <= color_4_in_6d_r; 
         color_5_in_7d_r  <= color_5_in_6d_r; 
         color_6_in_7d_r  <= color_6_in_6d_r; 
         color_7_in_7d_r  <= color_7_in_6d_r; 
                                             
         color_0_in_8d_r  <= color_0_in_7d_r; 
         color_1_in_8d_r  <= color_1_in_7d_r; 
         color_2_in_8d_r  <= color_2_in_7d_r; 
         color_3_in_8d_r  <= color_3_in_7d_r; 
         color_4_in_8d_r  <= color_4_in_7d_r; 
         color_5_in_8d_r  <= color_5_in_7d_r; 
         color_6_in_8d_r  <= color_6_in_7d_r; 
         color_7_in_8d_r  <= color_7_in_7d_r; 
                                            
         color_0_in_9d_r  <= color_0_in_8d_r; 
         color_1_in_9d_r  <= color_1_in_8d_r; 
         color_2_in_9d_r  <= color_2_in_8d_r; 
         color_3_in_9d_r  <= color_3_in_8d_r; 
         color_4_in_9d_r  <= color_4_in_8d_r; 
         color_5_in_9d_r  <= color_5_in_8d_r; 
         color_6_in_9d_r  <= color_6_in_8d_r; 
         color_7_in_9d_r  <= color_7_in_8d_r; 
                                             
         color_0_in_10d_r <= color_0_in_9d_r; 
         color_1_in_10d_r <= color_1_in_9d_r; 
         color_2_in_10d_r <= color_2_in_9d_r; 
         color_3_in_10d_r <= color_3_in_9d_r; 
         color_4_in_10d_r <= color_4_in_9d_r; 
         color_5_in_10d_r <= color_5_in_9d_r; 
         color_6_in_10d_r <= color_6_in_9d_r; 
         color_7_in_10d_r <= color_7_in_9d_r; 
         
         
         
         
         
         
         
         
         
         
         accumulate_how_many_in_r <= accumulate_how_many_in;
         background_weight_0_in_r <= background_weight_0_in;
         background_weight_1_in_r <= background_weight_1_in;
         background_weight_2_in_r <= background_weight_2_in;
         background_weight_3_in_r <= background_weight_3_in;
         background_weight_4_in_r <= background_weight_4_in;
         background_weight_5_in_r <= background_weight_5_in;
         background_weight_6_in_r <= background_weight_6_in;                                         
         background_weight_7_in_r <= background_weight_7_in;                                                                  
         diag_r <= diag;                                         
                            
         centerx_in_r <= centerx_in; 
                            
         centery_in_r <= centery_in; 
         //Mode_i    <= cmd;                                      
         iteration_times_r <= iteration_times;
         buffer_input_stop_r    <= buffer_input_stop_w;
         buffer_input_stop_2d_r <= buffer_input_stop_r   ;
         buffer_input_stop_3d_r <= buffer_input_stop_2d_r;
         buffer_input_stop_4d_r <= buffer_input_stop_3d_r;
         buffer_input_stop_5d_r <= buffer_input_stop_4d_r;
         buffer_input_stop_6d_r <= buffer_input_stop_5d_r;
         buffer_input_stop_7d_r <= buffer_input_stop_6d_r;
         buffer_input_stop_8d_r <= buffer_input_stop_7d_r;
         
         
         histogram_accumulation_done_r <= histogram_accumulation_done_w;
         write_which_in_r <= write_which_in_w;
         compute_bu_in_r <= compute_bu_in_w;
         Address_from_DMA_r <= Address_from_DMA;  
         Data_from_DMA_r <= Data_from_DMA;     
         WEAN_from_DMA_r <= WEAN_from_DMA;     
         choose_reg_from_DMA_r <= choose_reg_from_DMA;
         MUXA_from_DMA_r <= MUXA_from_DMA;
         Data_to_DMA_r <= Data_to_DMA_w;
         CCA_D_in_r <= CCA_D_in;
         CCA_I_in_r <= CCA_I_in;
         
         
         position_counter_x_r <= position_counter_x_w;
         position_counter_y_r <= position_counter_y_w;
         
         Y_buffer_DOA_r <= Y_buffer_DOA_w;
         U_buffer_DOA_r <= U_buffer_DOA_w;
         V_buffer_DOA_r <= V_buffer_DOA_w;
         Cordic_buffer_DOA_r <= Cordic_buffer_DOA_w;
         Weight_buffer_DOA_r <= Weight_buffer_DOA_w;
         pazen_enable_r <= pazen_enable;
         
      end                   
                            
                            
   end                      
                            

                            
                            
                            
                            
                            
                                            
                
                
endmodule
